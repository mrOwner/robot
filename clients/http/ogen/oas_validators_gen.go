// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s PortfolioRequestCurrencyRequest) Validate() error {
	switch s {
	case "RUB":
		return nil
	case "USD":
		return nil
	case "EUR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ProtobufAny) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"],
		}).Validate(string(s.Value)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *RpcStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Details {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "details",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *RpcStatusStatusCode) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Response",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1AccessLevel) Validate() error {
	switch s {
	case "ACCOUNT_ACCESS_LEVEL_UNSPECIFIED":
		return nil
	case "ACCOUNT_ACCESS_LEVEL_FULL_ACCESS":
		return nil
	case "ACCOUNT_ACCESS_LEVEL_READ_ONLY":
		return nil
	case "ACCOUNT_ACCESS_LEVEL_NO_ACCESS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1Account) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.AccessLevel.Set {
			if err := func() error {
				if err := s.AccessLevel.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "accessLevel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1AccountStatus) Validate() error {
	switch s {
	case "ACCOUNT_STATUS_UNSPECIFIED":
		return nil
	case "ACCOUNT_STATUS_NEW":
		return nil
	case "ACCOUNT_STATUS_OPEN":
		return nil
	case "ACCOUNT_STATUS_CLOSED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1AccountType) Validate() error {
	switch s {
	case "ACCOUNT_TYPE_UNSPECIFIED":
		return nil
	case "ACCOUNT_TYPE_TINKOFF":
		return nil
	case "ACCOUNT_TYPE_TINKOFF_IIS":
		return nil
	case "ACCOUNT_TYPE_INVEST_BOX":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1Asset) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetFull) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Security.Set {
			if err := func() error {
				if err := s.Security.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetInstrument) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Asset.Set {
			if err := func() error {
				if err := s.Asset.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "asset",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetSecurity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Share.Set {
			if err := func() error {
				if err := s.Share.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "share",
			Error: err,
		})
	}
	if err := func() error {
		if s.Sp.Set {
			if err := func() error {
				if err := s.Sp.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sp",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetShare) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1AssetStructuredProduct) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.AssetType.Set {
			if err := func() error {
				if err := s.AssetType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assetType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1AssetType) Validate() error {
	switch s {
	case "ASSET_TYPE_UNSPECIFIED":
		return nil
	case "ASSET_TYPE_CURRENCY":
		return nil
	case "ASSET_TYPE_COMMODITY":
		return nil
	case "ASSET_TYPE_INDEX":
		return nil
	case "ASSET_TYPE_SECURITY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1AssetsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Assets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Bond) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if err := func() error {
		if s.RiskLevel.Set {
			if err := func() error {
				if err := s.RiskLevel.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "riskLevel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1BondResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1BondsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1CandleInterval) Validate() error {
	switch s {
	case "CANDLE_INTERVAL_UNSPECIFIED":
		return nil
	case "CANDLE_INTERVAL_1_MIN":
		return nil
	case "CANDLE_INTERVAL_5_MIN":
		return nil
	case "CANDLE_INTERVAL_15_MIN":
		return nil
	case "CANDLE_INTERVAL_HOUR":
		return nil
	case "CANDLE_INTERVAL_DAY":
		return nil
	case "CANDLE_INTERVAL_2_MIN":
		return nil
	case "CANDLE_INTERVAL_3_MIN":
		return nil
	case "CANDLE_INTERVAL_10_MIN":
		return nil
	case "CANDLE_INTERVAL_30_MIN":
		return nil
	case "CANDLE_INTERVAL_2_HOUR":
		return nil
	case "CANDLE_INTERVAL_4_HOUR":
		return nil
	case "CANDLE_INTERVAL_WEEK":
		return nil
	case "CANDLE_INTERVAL_MONTH":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1Coupon) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CouponType.Set {
			if err := func() error {
				if err := s.CouponType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "couponType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1CouponType) Validate() error {
	switch s {
	case "COUPON_TYPE_UNSPECIFIED":
		return nil
	case "COUPON_TYPE_CONSTANT":
		return nil
	case "COUPON_TYPE_FLOATING":
		return nil
	case "COUPON_TYPE_DISCOUNT":
		return nil
	case "COUPON_TYPE_MORTGAGE":
		return nil
	case "COUPON_TYPE_FIX":
		return nil
	case "COUPON_TYPE_VARIABLE":
		return nil
	case "COUPON_TYPE_OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1CurrenciesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Currency) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1CurrencyResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1EditFavoritesActionType) Validate() error {
	switch s {
	case "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED":
		return nil
	case "EDIT_FAVORITES_ACTION_TYPE_ADD":
		return nil
	case "EDIT_FAVORITES_ACTION_TYPE_DEL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1EditFavoritesRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ActionType.Set {
			if err := func() error {
				if err := s.ActionType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "actionType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1EditFavoritesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.FavoriteInstruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "favoriteInstruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Etf) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1EtfResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1EtfsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1FavoriteInstrument) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1FindInstrumentResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Future) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1FutureResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1FuturesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetAccountsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Accounts {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "accounts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetBondCouponsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Events {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetCandlesRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Interval.Set {
			if err := func() error {
				if err := s.Interval.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetFavoritesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.FavoriteInstruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "favoriteInstruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetLastTradesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Trades {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "trades",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetOperationsByCursorRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OperationTypes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operationTypes",
			Error: err,
		})
	}
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetOperationsByCursorResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetOrdersResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Orders {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orders",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetStopOrdersResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.StopOrders {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stopOrders",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetTradingStatusResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1GetTradingStatusesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.TradingStatuses {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatuses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Instrument) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1InstrumentIdType) Validate() error {
	switch s {
	case "INSTRUMENT_ID_UNSPECIFIED":
		return nil
	case "INSTRUMENT_ID_TYPE_FIGI":
		return nil
	case "INSTRUMENT_ID_TYPE_TICKER":
		return nil
	case "INSTRUMENT_ID_TYPE_UID":
		return nil
	case "INSTRUMENT_ID_TYPE_POSITION_UID":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1InstrumentRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.IdType.Set {
			if err := func() error {
				if err := s.IdType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "idType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1InstrumentResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1InstrumentShort) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1InstrumentStatus) Validate() error {
	switch s {
	case "INSTRUMENT_STATUS_UNSPECIFIED":
		return nil
	case "INSTRUMENT_STATUS_BASE":
		return nil
	case "INSTRUMENT_STATUS_ALL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1InstrumentType) Validate() error {
	switch s {
	case "INSTRUMENT_TYPE_UNSPECIFIED":
		return nil
	case "INSTRUMENT_TYPE_BOND":
		return nil
	case "INSTRUMENT_TYPE_SHARE":
		return nil
	case "INSTRUMENT_TYPE_CURRENCY":
		return nil
	case "INSTRUMENT_TYPE_ETF":
		return nil
	case "INSTRUMENT_TYPE_FUTURES":
		return nil
	case "INSTRUMENT_TYPE_SP":
		return nil
	case "INSTRUMENT_TYPE_OPTION":
		return nil
	case "INSTRUMENT_TYPE_CLEARING_CERTIFICATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1InstrumentsRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InstrumentStatus.Set {
			if err := func() error {
				if err := s.InstrumentStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentStatus",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Operation) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.OperationType.Set {
			if err := func() error {
				if err := s.OperationType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operationType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1OperationItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.InstrumentKind.Set {
			if err := func() error {
				if err := s.InstrumentKind.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrumentKind",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1OperationState) Validate() error {
	switch s {
	case "OPERATION_STATE_UNSPECIFIED":
		return nil
	case "OPERATION_STATE_EXECUTED":
		return nil
	case "OPERATION_STATE_CANCELED":
		return nil
	case "OPERATION_STATE_PROGRESS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1OperationType) Validate() error {
	switch s {
	case "OPERATION_TYPE_UNSPECIFIED":
		return nil
	case "OPERATION_TYPE_INPUT":
		return nil
	case "OPERATION_TYPE_BOND_TAX":
		return nil
	case "OPERATION_TYPE_OUTPUT_SECURITIES":
		return nil
	case "OPERATION_TYPE_OVERNIGHT":
		return nil
	case "OPERATION_TYPE_TAX":
		return nil
	case "OPERATION_TYPE_BOND_REPAYMENT_FULL":
		return nil
	case "OPERATION_TYPE_SELL_CARD":
		return nil
	case "OPERATION_TYPE_DIVIDEND_TAX":
		return nil
	case "OPERATION_TYPE_OUTPUT":
		return nil
	case "OPERATION_TYPE_BOND_REPAYMENT":
		return nil
	case "OPERATION_TYPE_TAX_CORRECTION":
		return nil
	case "OPERATION_TYPE_SERVICE_FEE":
		return nil
	case "OPERATION_TYPE_BENEFIT_TAX":
		return nil
	case "OPERATION_TYPE_MARGIN_FEE":
		return nil
	case "OPERATION_TYPE_BUY":
		return nil
	case "OPERATION_TYPE_BUY_CARD":
		return nil
	case "OPERATION_TYPE_INPUT_SECURITIES":
		return nil
	case "OPERATION_TYPE_SELL_MARGIN":
		return nil
	case "OPERATION_TYPE_BROKER_FEE":
		return nil
	case "OPERATION_TYPE_BUY_MARGIN":
		return nil
	case "OPERATION_TYPE_DIVIDEND":
		return nil
	case "OPERATION_TYPE_SELL":
		return nil
	case "OPERATION_TYPE_COUPON":
		return nil
	case "OPERATION_TYPE_SUCCESS_FEE":
		return nil
	case "OPERATION_TYPE_DIVIDEND_TRANSFER":
		return nil
	case "OPERATION_TYPE_ACCRUING_VARMARGIN":
		return nil
	case "OPERATION_TYPE_WRITING_OFF_VARMARGIN":
		return nil
	case "OPERATION_TYPE_DELIVERY_BUY":
		return nil
	case "OPERATION_TYPE_DELIVERY_SELL":
		return nil
	case "OPERATION_TYPE_TRACK_MFEE":
		return nil
	case "OPERATION_TYPE_TRACK_PFEE":
		return nil
	case "OPERATION_TYPE_TAX_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_BOND_TAX_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_TAX_REPO_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_TAX_REPO":
		return nil
	case "OPERATION_TYPE_TAX_REPO_HOLD":
		return nil
	case "OPERATION_TYPE_TAX_REPO_REFUND":
		return nil
	case "OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE":
		return nil
	case "OPERATION_TYPE_DIV_EXT":
		return nil
	case "OPERATION_TYPE_TAX_CORRECTION_COUPON":
		return nil
	case "OPERATION_TYPE_CASH_FEE":
		return nil
	case "OPERATION_TYPE_OUT_FEE":
		return nil
	case "OPERATION_TYPE_OUT_STAMP_DUTY":
		return nil
	case "OPERATION_TYPE_OUTPUT_SWIFT":
		return nil
	case "OPERATION_TYPE_INPUT_SWIFT":
		return nil
	case "OPERATION_TYPE_OUTPUT_ACQUIRING":
		return nil
	case "OPERATION_TYPE_INPUT_ACQUIRING":
		return nil
	case "OPERATION_TYPE_OUTPUT_PENALTY":
		return nil
	case "OPERATION_TYPE_ADVICE_FEE":
		return nil
	case "OPERATION_TYPE_TRANS_IIS_BS":
		return nil
	case "OPERATION_TYPE_TRANS_BS_BS":
		return nil
	case "OPERATION_TYPE_OUT_MULTI":
		return nil
	case "OPERATION_TYPE_INP_MULTI":
		return nil
	case "OPERATION_TYPE_OVER_PLACEMENT":
		return nil
	case "OPERATION_TYPE_OVER_COM":
		return nil
	case "OPERATION_TYPE_OVER_INCOME":
		return nil
	case "OPERATION_TYPE_OPTION_EXPIRATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1OperationsRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1OperationsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Operations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1Option) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.PaymentType.Set {
			if err := func() error {
				if err := s.PaymentType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paymentType",
			Error: err,
		})
	}
	if err := func() error {
		if s.Style.Set {
			if err := func() error {
				if err := s.Style.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "style",
			Error: err,
		})
	}
	if err := func() error {
		if s.SettlementType.Set {
			if err := func() error {
				if err := s.SettlementType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settlementType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1OptionDirection) Validate() error {
	switch s {
	case "OPTION_DIRECTION_UNSPECIFIED":
		return nil
	case "OPTION_DIRECTION_PUT":
		return nil
	case "OPTION_DIRECTION_CALL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1OptionPaymentType) Validate() error {
	switch s {
	case "OPTION_PAYMENT_TYPE_UNSPECIFIED":
		return nil
	case "OPTION_PAYMENT_TYPE_PREMIUM":
		return nil
	case "OPTION_PAYMENT_TYPE_MARGINAL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1OptionResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1OptionSettlementType) Validate() error {
	switch s {
	case "OPTION_EXECUTION_TYPE_UNSPECIFIED":
		return nil
	case "OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY":
		return nil
	case "OPTION_EXECUTION_TYPE_CASH_SETTLEMENT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1OptionStyle) Validate() error {
	switch s {
	case "OPTION_STYLE_UNSPECIFIED":
		return nil
	case "OPTION_STYLE_AMERICAN":
		return nil
	case "OPTION_STYLE_EUROPEAN":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1OptionsResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1OrderDirection) Validate() error {
	switch s {
	case "ORDER_DIRECTION_UNSPECIFIED":
		return nil
	case "ORDER_DIRECTION_BUY":
		return nil
	case "ORDER_DIRECTION_SELL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1OrderExecutionReportStatus) Validate() error {
	switch s {
	case "EXECUTION_REPORT_STATUS_UNSPECIFIED":
		return nil
	case "EXECUTION_REPORT_STATUS_FILL":
		return nil
	case "EXECUTION_REPORT_STATUS_REJECTED":
		return nil
	case "EXECUTION_REPORT_STATUS_CANCELLED":
		return nil
	case "EXECUTION_REPORT_STATUS_NEW":
		return nil
	case "EXECUTION_REPORT_STATUS_PARTIALLYFILL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1OrderState) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ExecutionReportStatus.Set {
			if err := func() error {
				if err := s.ExecutionReportStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "executionReportStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrderType.Set {
			if err := func() error {
				if err := s.OrderType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orderType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1OrderType) Validate() error {
	switch s {
	case "ORDER_TYPE_UNSPECIFIED":
		return nil
	case "ORDER_TYPE_LIMIT":
		return nil
	case "ORDER_TYPE_MARKET":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1PortfolioRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Currency.Set {
			if err := func() error {
				if err := s.Currency.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "currency",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1PostOrderRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrderType.Set {
			if err := func() error {
				if err := s.OrderType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orderType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1PostOrderResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ExecutionReportStatus.Set {
			if err := func() error {
				if err := s.ExecutionReportStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "executionReportStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrderType.Set {
			if err := func() error {
				if err := s.OrderType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orderType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1PostStopOrderRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpirationType.Set {
			if err := func() error {
				if err := s.ExpirationType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expirationType",
			Error: err,
		})
	}
	if err := func() error {
		if s.StopOrderType.Set {
			if err := func() error {
				if err := s.StopOrderType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stopOrderType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1PriceType) Validate() error {
	switch s {
	case "PRICE_TYPE_UNSPECIFIED":
		return nil
	case "PRICE_TYPE_POINT":
		return nil
	case "PRICE_TYPE_CURRENCY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1RealExchange) Validate() error {
	switch s {
	case "REAL_EXCHANGE_UNSPECIFIED":
		return nil
	case "REAL_EXCHANGE_MOEX":
		return nil
	case "REAL_EXCHANGE_RTS":
		return nil
	case "REAL_EXCHANGE_OTC":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1ReplaceOrderRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.PriceType.Set {
			if err := func() error {
				if err := s.PriceType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "priceType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1RiskLevel) Validate() error {
	switch s {
	case "RISK_LEVEL_UNSPECIFIED":
		return nil
	case "RISK_LEVEL_LOW":
		return nil
	case "RISK_LEVEL_MODERATE":
		return nil
	case "RISK_LEVEL_HIGH":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1SecurityTradingStatus) Validate() error {
	switch s {
	case "SECURITY_TRADING_STATUS_UNSPECIFIED":
		return nil
	case "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING":
		return nil
	case "SECURITY_TRADING_STATUS_OPENING_PERIOD":
		return nil
	case "SECURITY_TRADING_STATUS_CLOSING_PERIOD":
		return nil
	case "SECURITY_TRADING_STATUS_BREAK_IN_TRADING":
		return nil
	case "SECURITY_TRADING_STATUS_NORMAL_TRADING":
		return nil
	case "SECURITY_TRADING_STATUS_CLOSING_AUCTION":
		return nil
	case "SECURITY_TRADING_STATUS_DARK_POOL_AUCTION":
		return nil
	case "SECURITY_TRADING_STATUS_DISCRETE_AUCTION":
		return nil
	case "SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD":
		return nil
	case "SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE":
		return nil
	case "SECURITY_TRADING_STATUS_SESSION_ASSIGNED":
		return nil
	case "SECURITY_TRADING_STATUS_SESSION_CLOSE":
		return nil
	case "SECURITY_TRADING_STATUS_SESSION_OPEN":
		return nil
	case "SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING":
		return nil
	case "SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING":
		return nil
	case "SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1Share) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TradingStatus.Set {
			if err := func() error {
				if err := s.TradingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tradingStatus",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShareType.Set {
			if err := func() error {
				if err := s.ShareType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shareType",
			Error: err,
		})
	}
	if err := func() error {
		if s.RealExchange.Set {
			if err := func() error {
				if err := s.RealExchange.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "realExchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1ShareResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Instrument.Set {
			if err := func() error {
				if err := s.Instrument.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instrument",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1ShareType) Validate() error {
	switch s {
	case "SHARE_TYPE_UNSPECIFIED":
		return nil
	case "SHARE_TYPE_COMMON":
		return nil
	case "SHARE_TYPE_PREFERRED":
		return nil
	case "SHARE_TYPE_ADR":
		return nil
	case "SHARE_TYPE_GDR":
		return nil
	case "SHARE_TYPE_MLP":
		return nil
	case "SHARE_TYPE_NY_REG_SHRS":
		return nil
	case "SHARE_TYPE_CLOSED_END_FUND":
		return nil
	case "SHARE_TYPE_REIT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1SharesResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Instruments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "instruments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *V1StopOrder) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrderType.Set {
			if err := func() error {
				if err := s.OrderType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orderType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1StopOrderDirection) Validate() error {
	switch s {
	case "STOP_ORDER_DIRECTION_UNSPECIFIED":
		return nil
	case "STOP_ORDER_DIRECTION_BUY":
		return nil
	case "STOP_ORDER_DIRECTION_SELL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1StopOrderExpirationType) Validate() error {
	switch s {
	case "STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED":
		return nil
	case "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL":
		return nil
	case "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1StopOrderType) Validate() error {
	switch s {
	case "STOP_ORDER_TYPE_UNSPECIFIED":
		return nil
	case "STOP_ORDER_TYPE_TAKE_PROFIT":
		return nil
	case "STOP_ORDER_TYPE_STOP_LOSS":
		return nil
	case "STOP_ORDER_TYPE_STOP_LIMIT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s V1StructuredProductType) Validate() error {
	switch s {
	case "SP_TYPE_UNSPECIFIED":
		return nil
	case "SP_TYPE_DELIVERABLE":
		return nil
	case "SP_TYPE_NON_DELIVERABLE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *V1Trade) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Direction.Set {
			if err := func() error {
				if err := s.Direction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s V1TradeDirection) Validate() error {
	switch s {
	case "TRADE_DIRECTION_UNSPECIFIED":
		return nil
	case "TRADE_DIRECTION_BUY":
		return nil
	case "TRADE_DIRECTION_SELL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
