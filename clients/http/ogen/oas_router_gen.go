// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/tinkoff.public.invest.api.contract.v1."
			if l := len("/tinkoff.public.invest.api.contract.v1."); len(elem) >= l && elem[0:l] == "/tinkoff.public.invest.api.contract.v1." {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'I': // Prefix: "InstrumentsService/"
				if l := len("InstrumentsService/"); len(elem) >= l && elem[0:l] == "InstrumentsService/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'B': // Prefix: "Bond"
					if l := len("Bond"); len(elem) >= l && elem[0:l] == "Bond" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceBondByRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceBondsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'C': // Prefix: "Currenc"
					if l := len("Currenc"); len(elem) >= l && elem[0:l] == "Currenc" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ies"
						if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceCurrenciesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'y': // Prefix: "yBy"
						if l := len("yBy"); len(elem) >= l && elem[0:l] == "yBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceCurrencyByRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'E': // Prefix: "E"
					if l := len("E"); len(elem) >= l && elem[0:l] == "E" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "ditFavorites"
						if l := len("ditFavorites"); len(elem) >= l && elem[0:l] == "ditFavorites" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceEditFavoritesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 't': // Prefix: "tf"
						if l := len("tf"); len(elem) >= l && elem[0:l] == "tf" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'B': // Prefix: "By"
							if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceEtfByRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceEtfsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				case 'F': // Prefix: "F"
					if l := len("F"); len(elem) >= l && elem[0:l] == "F" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "indInstrument"
						if l := len("indInstrument"); len(elem) >= l && elem[0:l] == "indInstrument" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceFindInstrumentRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'u': // Prefix: "uture"
						if l := len("uture"); len(elem) >= l && elem[0:l] == "uture" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'B': // Prefix: "By"
							if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceFutureByRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceFuturesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				case 'G': // Prefix: "Get"
					if l := len("Get"); len(elem) >= l && elem[0:l] == "Get" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "A"
						if l := len("A"); len(elem) >= l && elem[0:l] == "A" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccruedInterests"
							if l := len("ccruedInterests"); len(elem) >= l && elem[0:l] == "ccruedInterests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceGetAccruedInterestsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 's': // Prefix: "sset"
							if l := len("sset"); len(elem) >= l && elem[0:l] == "sset" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'B': // Prefix: "By"
								if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleInstrumentsServiceGetAssetByRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleInstrumentsServiceGetAssetsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
						}
					case 'B': // Prefix: "B"
						if l := len("B"); len(elem) >= l && elem[0:l] == "B" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ondCoupons"
							if l := len("ondCoupons"); len(elem) >= l && elem[0:l] == "ondCoupons" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceGetBondCouponsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'r': // Prefix: "rand"
							if l := len("rand"); len(elem) >= l && elem[0:l] == "rand" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'B': // Prefix: "By"
								if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleInstrumentsServiceGetBrandByRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleInstrumentsServiceGetBrandsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
						}
					case 'C': // Prefix: "Countries"
						if l := len("Countries"); len(elem) >= l && elem[0:l] == "Countries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceGetCountriesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'D': // Prefix: "Dividends"
						if l := len("Dividends"); len(elem) >= l && elem[0:l] == "Dividends" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceGetDividendsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'F': // Prefix: "F"
						if l := len("F"); len(elem) >= l && elem[0:l] == "F" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "avorites"
							if l := len("avorites"); len(elem) >= l && elem[0:l] == "avorites" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceGetFavoritesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'u': // Prefix: "uturesMargin"
							if l := len("uturesMargin"); len(elem) >= l && elem[0:l] == "uturesMargin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleInstrumentsServiceGetFuturesMarginRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'I': // Prefix: "InstrumentBy"
						if l := len("InstrumentBy"); len(elem) >= l && elem[0:l] == "InstrumentBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceGetInstrumentByRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'O': // Prefix: "Option"
					if l := len("Option"); len(elem) >= l && elem[0:l] == "Option" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceOptionByRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceOptionsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'S': // Prefix: "Share"
					if l := len("Share"); len(elem) >= l && elem[0:l] == "Share" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceShareByRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInstrumentsServiceSharesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'T': // Prefix: "TradingSchedules"
					if l := len("TradingSchedules"); len(elem) >= l && elem[0:l] == "TradingSchedules" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleInstrumentsServiceTradingSchedulesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'M': // Prefix: "MarketDataService/Get"
				if l := len("MarketDataService/Get"); len(elem) >= l && elem[0:l] == "MarketDataService/Get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "C"
					if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "andles"
						if l := len("andles"); len(elem) >= l && elem[0:l] == "andles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMarketDataServiceGetCandlesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'l': // Prefix: "losePrices"
						if l := len("losePrices"); len(elem) >= l && elem[0:l] == "losePrices" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMarketDataServiceGetClosePricesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'L': // Prefix: "Last"
					if l := len("Last"); len(elem) >= l && elem[0:l] == "Last" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'P': // Prefix: "Prices"
						if l := len("Prices"); len(elem) >= l && elem[0:l] == "Prices" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMarketDataServiceGetLastPricesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'T': // Prefix: "Trades"
						if l := len("Trades"); len(elem) >= l && elem[0:l] == "Trades" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMarketDataServiceGetLastTradesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'O': // Prefix: "OrderBook"
					if l := len("OrderBook"); len(elem) >= l && elem[0:l] == "OrderBook" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleMarketDataServiceGetOrderBookRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'T': // Prefix: "TradingStatus"
					if l := len("TradingStatus"); len(elem) >= l && elem[0:l] == "TradingStatus" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleMarketDataServiceGetTradingStatusRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 'e': // Prefix: "es"
						if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMarketDataServiceGetTradingStatusesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			case 'O': // Prefix: "O"
				if l := len("O"); len(elem) >= l && elem[0:l] == "O" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "perationsService/Get"
					if l := len("perationsService/Get"); len(elem) >= l && elem[0:l] == "perationsService/Get" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "BrokerReport"
						if l := len("BrokerReport"); len(elem) >= l && elem[0:l] == "BrokerReport" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOperationsServiceGetBrokerReportRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'D': // Prefix: "DividendsForeignIssuer"
						if l := len("DividendsForeignIssuer"); len(elem) >= l && elem[0:l] == "DividendsForeignIssuer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOperationsServiceGetDividendsForeignIssuerRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'O': // Prefix: "Operations"
						if l := len("Operations"); len(elem) >= l && elem[0:l] == "Operations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleOperationsServiceGetOperationsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case 'B': // Prefix: "ByCursor"
							if l := len("ByCursor"); len(elem) >= l && elem[0:l] == "ByCursor" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleOperationsServiceGetOperationsByCursorRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'P': // Prefix: "Po"
						if l := len("Po"); len(elem) >= l && elem[0:l] == "Po" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "rtfolio"
							if l := len("rtfolio"); len(elem) >= l && elem[0:l] == "rtfolio" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleOperationsServiceGetPortfolioRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 's': // Prefix: "sitions"
							if l := len("sitions"); len(elem) >= l && elem[0:l] == "sitions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleOperationsServiceGetPositionsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'W': // Prefix: "WithdrawLimits"
						if l := len("WithdrawLimits"); len(elem) >= l && elem[0:l] == "WithdrawLimits" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOperationsServiceGetWithdrawLimitsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'r': // Prefix: "rdersService/"
					if l := len("rdersService/"); len(elem) >= l && elem[0:l] == "rdersService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CancelOrder"
						if l := len("CancelOrder"); len(elem) >= l && elem[0:l] == "CancelOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOrdersServiceCancelOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'G': // Prefix: "GetOrder"
						if l := len("GetOrder"); len(elem) >= l && elem[0:l] == "GetOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'S': // Prefix: "State"
							if l := len("State"); len(elem) >= l && elem[0:l] == "State" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleOrdersServiceGetOrderStateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleOrdersServiceGetOrdersRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'P': // Prefix: "PostOrder"
						if l := len("PostOrder"); len(elem) >= l && elem[0:l] == "PostOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOrdersServicePostOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'R': // Prefix: "ReplaceOrder"
						if l := len("ReplaceOrder"); len(elem) >= l && elem[0:l] == "ReplaceOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleOrdersServiceReplaceOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			case 'S': // Prefix: "S"
				if l := len("S"); len(elem) >= l && elem[0:l] == "S" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "andboxService/"
					if l := len("andboxService/"); len(elem) >= l && elem[0:l] == "andboxService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "C"
						if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ancelSandboxOrder"
							if l := len("ancelSandboxOrder"); len(elem) >= l && elem[0:l] == "ancelSandboxOrder" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSandboxServiceCancelSandboxOrderRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'l': // Prefix: "loseSandboxAccount"
							if l := len("loseSandboxAccount"); len(elem) >= l && elem[0:l] == "loseSandboxAccount" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSandboxServiceCloseSandboxAccountRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'G': // Prefix: "GetSandbox"
						if l := len("GetSandbox"); len(elem) >= l && elem[0:l] == "GetSandbox" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Accounts"
							if l := len("Accounts"); len(elem) >= l && elem[0:l] == "Accounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSandboxServiceGetSandboxAccountsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'O': // Prefix: "O"
							if l := len("O"); len(elem) >= l && elem[0:l] == "O" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "perations"
								if l := len("perations"); len(elem) >= l && elem[0:l] == "perations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleSandboxServiceGetSandboxOperationsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case 'B': // Prefix: "ByCursor"
									if l := len("ByCursor"); len(elem) >= l && elem[0:l] == "ByCursor" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSandboxServiceGetSandboxOperationsByCursorRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'r': // Prefix: "rder"
								if l := len("rder"); len(elem) >= l && elem[0:l] == "rder" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'S': // Prefix: "State"
									if l := len("State"); len(elem) >= l && elem[0:l] == "State" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSandboxServiceGetSandboxOrderStateRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSandboxServiceGetSandboxOrdersRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							}
						case 'P': // Prefix: "Po"
							if l := len("Po"); len(elem) >= l && elem[0:l] == "Po" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "rtfolio"
								if l := len("rtfolio"); len(elem) >= l && elem[0:l] == "rtfolio" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSandboxServiceGetSandboxPortfolioRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 's': // Prefix: "sitions"
								if l := len("sitions"); len(elem) >= l && elem[0:l] == "sitions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSandboxServiceGetSandboxPositionsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
						case 'W': // Prefix: "WithdrawLimits"
							if l := len("WithdrawLimits"); len(elem) >= l && elem[0:l] == "WithdrawLimits" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSandboxServiceGetSandboxWithdrawLimitsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'O': // Prefix: "OpenSandboxAccount"
						if l := len("OpenSandboxAccount"); len(elem) >= l && elem[0:l] == "OpenSandboxAccount" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSandboxServiceOpenSandboxAccountRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'P': // Prefix: "PostSandboxOrder"
						if l := len("PostSandboxOrder"); len(elem) >= l && elem[0:l] == "PostSandboxOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSandboxServicePostSandboxOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'R': // Prefix: "ReplaceSandboxOrder"
						if l := len("ReplaceSandboxOrder"); len(elem) >= l && elem[0:l] == "ReplaceSandboxOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSandboxServiceReplaceSandboxOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'S': // Prefix: "SandboxPayIn"
						if l := len("SandboxPayIn"); len(elem) >= l && elem[0:l] == "SandboxPayIn" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSandboxServiceSandboxPayInRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 't': // Prefix: "topOrdersService/"
					if l := len("topOrdersService/"); len(elem) >= l && elem[0:l] == "topOrdersService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CancelStopOrder"
						if l := len("CancelStopOrder"); len(elem) >= l && elem[0:l] == "CancelStopOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStopOrdersServiceCancelStopOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'G': // Prefix: "GetStopOrders"
						if l := len("GetStopOrders"); len(elem) >= l && elem[0:l] == "GetStopOrders" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStopOrdersServiceGetStopOrdersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'P': // Prefix: "PostStopOrder"
						if l := len("PostStopOrder"); len(elem) >= l && elem[0:l] == "PostStopOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStopOrdersServicePostStopOrderRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			case 'U': // Prefix: "UsersService/Get"
				if l := len("UsersService/Get"); len(elem) >= l && elem[0:l] == "UsersService/Get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'A': // Prefix: "Accounts"
					if l := len("Accounts"); len(elem) >= l && elem[0:l] == "Accounts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUsersServiceGetAccountsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'I': // Prefix: "Info"
					if l := len("Info"); len(elem) >= l && elem[0:l] == "Info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUsersServiceGetInfoRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'M': // Prefix: "MarginAttributes"
					if l := len("MarginAttributes"); len(elem) >= l && elem[0:l] == "MarginAttributes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUsersServiceGetMarginAttributesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'U': // Prefix: "UserTariff"
					if l := len("UserTariff"); len(elem) >= l && elem[0:l] == "UserTariff" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUsersServiceGetUserTariffRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/tinkoff.public.invest.api.contract.v1."
			if l := len("/tinkoff.public.invest.api.contract.v1."); len(elem) >= l && elem[0:l] == "/tinkoff.public.invest.api.contract.v1." {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'I': // Prefix: "InstrumentsService/"
				if l := len("InstrumentsService/"); len(elem) >= l && elem[0:l] == "InstrumentsService/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'B': // Prefix: "Bond"
					if l := len("Bond"); len(elem) >= l && elem[0:l] == "Bond" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceBondBy
								r.name = "InstrumentsServiceBondBy"
								r.operationID = "InstrumentsService_BondBy"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceBonds
								r.name = "InstrumentsServiceBonds"
								r.operationID = "InstrumentsService_Bonds"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'C': // Prefix: "Currenc"
					if l := len("Currenc"); len(elem) >= l && elem[0:l] == "Currenc" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ies"
						if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceCurrencies
								r.name = "InstrumentsServiceCurrencies"
								r.operationID = "InstrumentsService_Currencies"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'y': // Prefix: "yBy"
						if l := len("yBy"); len(elem) >= l && elem[0:l] == "yBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceCurrencyBy
								r.name = "InstrumentsServiceCurrencyBy"
								r.operationID = "InstrumentsService_CurrencyBy"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'E': // Prefix: "E"
					if l := len("E"); len(elem) >= l && elem[0:l] == "E" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "ditFavorites"
						if l := len("ditFavorites"); len(elem) >= l && elem[0:l] == "ditFavorites" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceEditFavorites
								r.name = "InstrumentsServiceEditFavorites"
								r.operationID = "InstrumentsService_EditFavorites"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 't': // Prefix: "tf"
						if l := len("tf"); len(elem) >= l && elem[0:l] == "tf" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'B': // Prefix: "By"
							if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceEtfBy
									r.name = "InstrumentsServiceEtfBy"
									r.operationID = "InstrumentsService_EtfBy"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceEtfs
									r.name = "InstrumentsServiceEtfs"
									r.operationID = "InstrumentsService_Etfs"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'F': // Prefix: "F"
					if l := len("F"); len(elem) >= l && elem[0:l] == "F" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "indInstrument"
						if l := len("indInstrument"); len(elem) >= l && elem[0:l] == "indInstrument" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceFindInstrument
								r.name = "InstrumentsServiceFindInstrument"
								r.operationID = "InstrumentsService_FindInstrument"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'u': // Prefix: "uture"
						if l := len("uture"); len(elem) >= l && elem[0:l] == "uture" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'B': // Prefix: "By"
							if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceFutureBy
									r.name = "InstrumentsServiceFutureBy"
									r.operationID = "InstrumentsService_FutureBy"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceFutures
									r.name = "InstrumentsServiceFutures"
									r.operationID = "InstrumentsService_Futures"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'G': // Prefix: "Get"
					if l := len("Get"); len(elem) >= l && elem[0:l] == "Get" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "A"
						if l := len("A"); len(elem) >= l && elem[0:l] == "A" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccruedInterests"
							if l := len("ccruedInterests"); len(elem) >= l && elem[0:l] == "ccruedInterests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceGetAccruedInterests
									r.name = "InstrumentsServiceGetAccruedInterests"
									r.operationID = "InstrumentsService_GetAccruedInterests"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "sset"
							if l := len("sset"); len(elem) >= l && elem[0:l] == "sset" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'B': // Prefix: "By"
								if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: InstrumentsServiceGetAssetBy
										r.name = "InstrumentsServiceGetAssetBy"
										r.operationID = "InstrumentsService_GetAssetBy"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: InstrumentsServiceGetAssets
										r.name = "InstrumentsServiceGetAssets"
										r.operationID = "InstrumentsService_GetAssets"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						}
					case 'B': // Prefix: "B"
						if l := len("B"); len(elem) >= l && elem[0:l] == "B" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ondCoupons"
							if l := len("ondCoupons"); len(elem) >= l && elem[0:l] == "ondCoupons" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceGetBondCoupons
									r.name = "InstrumentsServiceGetBondCoupons"
									r.operationID = "InstrumentsService_GetBondCoupons"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'r': // Prefix: "rand"
							if l := len("rand"); len(elem) >= l && elem[0:l] == "rand" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'B': // Prefix: "By"
								if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: InstrumentsServiceGetBrandBy
										r.name = "InstrumentsServiceGetBrandBy"
										r.operationID = "InstrumentsService_GetBrandBy"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: InstrumentsServiceGetBrands
										r.name = "InstrumentsServiceGetBrands"
										r.operationID = "InstrumentsService_GetBrands"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						}
					case 'C': // Prefix: "Countries"
						if l := len("Countries"); len(elem) >= l && elem[0:l] == "Countries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceGetCountries
								r.name = "InstrumentsServiceGetCountries"
								r.operationID = "InstrumentsService_GetCountries"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'D': // Prefix: "Dividends"
						if l := len("Dividends"); len(elem) >= l && elem[0:l] == "Dividends" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceGetDividends
								r.name = "InstrumentsServiceGetDividends"
								r.operationID = "InstrumentsService_GetDividends"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'F': // Prefix: "F"
						if l := len("F"); len(elem) >= l && elem[0:l] == "F" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "avorites"
							if l := len("avorites"); len(elem) >= l && elem[0:l] == "avorites" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceGetFavorites
									r.name = "InstrumentsServiceGetFavorites"
									r.operationID = "InstrumentsService_GetFavorites"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'u': // Prefix: "uturesMargin"
							if l := len("uturesMargin"); len(elem) >= l && elem[0:l] == "uturesMargin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: InstrumentsServiceGetFuturesMargin
									r.name = "InstrumentsServiceGetFuturesMargin"
									r.operationID = "InstrumentsService_GetFuturesMargin"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'I': // Prefix: "InstrumentBy"
						if l := len("InstrumentBy"); len(elem) >= l && elem[0:l] == "InstrumentBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceGetInstrumentBy
								r.name = "InstrumentsServiceGetInstrumentBy"
								r.operationID = "InstrumentsService_GetInstrumentBy"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'O': // Prefix: "Option"
					if l := len("Option"); len(elem) >= l && elem[0:l] == "Option" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceOptionBy
								r.name = "InstrumentsServiceOptionBy"
								r.operationID = "InstrumentsService_OptionBy"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceOptions
								r.name = "InstrumentsServiceOptions"
								r.operationID = "InstrumentsService_Options"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'S': // Prefix: "Share"
					if l := len("Share"); len(elem) >= l && elem[0:l] == "Share" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "By"
						if l := len("By"); len(elem) >= l && elem[0:l] == "By" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceShareBy
								r.name = "InstrumentsServiceShareBy"
								r.operationID = "InstrumentsService_ShareBy"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: InstrumentsServiceShares
								r.name = "InstrumentsServiceShares"
								r.operationID = "InstrumentsService_Shares"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'T': // Prefix: "TradingSchedules"
					if l := len("TradingSchedules"); len(elem) >= l && elem[0:l] == "TradingSchedules" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: InstrumentsServiceTradingSchedules
							r.name = "InstrumentsServiceTradingSchedules"
							r.operationID = "InstrumentsService_TradingSchedules"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'M': // Prefix: "MarketDataService/Get"
				if l := len("MarketDataService/Get"); len(elem) >= l && elem[0:l] == "MarketDataService/Get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "C"
					if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "andles"
						if l := len("andles"); len(elem) >= l && elem[0:l] == "andles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: MarketDataServiceGetCandles
								r.name = "MarketDataServiceGetCandles"
								r.operationID = "MarketDataService_GetCandles"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'l': // Prefix: "losePrices"
						if l := len("losePrices"); len(elem) >= l && elem[0:l] == "losePrices" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: MarketDataServiceGetClosePrices
								r.name = "MarketDataServiceGetClosePrices"
								r.operationID = "MarketDataService_GetClosePrices"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'L': // Prefix: "Last"
					if l := len("Last"); len(elem) >= l && elem[0:l] == "Last" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'P': // Prefix: "Prices"
						if l := len("Prices"); len(elem) >= l && elem[0:l] == "Prices" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: MarketDataServiceGetLastPrices
								r.name = "MarketDataServiceGetLastPrices"
								r.operationID = "MarketDataService_GetLastPrices"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'T': // Prefix: "Trades"
						if l := len("Trades"); len(elem) >= l && elem[0:l] == "Trades" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: MarketDataServiceGetLastTrades
								r.name = "MarketDataServiceGetLastTrades"
								r.operationID = "MarketDataService_GetLastTrades"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'O': // Prefix: "OrderBook"
					if l := len("OrderBook"); len(elem) >= l && elem[0:l] == "OrderBook" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: MarketDataServiceGetOrderBook
							r.name = "MarketDataServiceGetOrderBook"
							r.operationID = "MarketDataService_GetOrderBook"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'T': // Prefix: "TradingStatus"
					if l := len("TradingStatus"); len(elem) >= l && elem[0:l] == "TradingStatus" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "MarketDataServiceGetTradingStatus"
							r.operationID = "MarketDataService_GetTradingStatus"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 'e': // Prefix: "es"
						if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: MarketDataServiceGetTradingStatuses
								r.name = "MarketDataServiceGetTradingStatuses"
								r.operationID = "MarketDataService_GetTradingStatuses"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'O': // Prefix: "O"
				if l := len("O"); len(elem) >= l && elem[0:l] == "O" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "perationsService/Get"
					if l := len("perationsService/Get"); len(elem) >= l && elem[0:l] == "perationsService/Get" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "BrokerReport"
						if l := len("BrokerReport"); len(elem) >= l && elem[0:l] == "BrokerReport" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OperationsServiceGetBrokerReport
								r.name = "OperationsServiceGetBrokerReport"
								r.operationID = "OperationsService_GetBrokerReport"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'D': // Prefix: "DividendsForeignIssuer"
						if l := len("DividendsForeignIssuer"); len(elem) >= l && elem[0:l] == "DividendsForeignIssuer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OperationsServiceGetDividendsForeignIssuer
								r.name = "OperationsServiceGetDividendsForeignIssuer"
								r.operationID = "OperationsService_GetDividendsForeignIssuer"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'O': // Prefix: "Operations"
						if l := len("Operations"); len(elem) >= l && elem[0:l] == "Operations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "OperationsServiceGetOperations"
								r.operationID = "OperationsService_GetOperations"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'B': // Prefix: "ByCursor"
							if l := len("ByCursor"); len(elem) >= l && elem[0:l] == "ByCursor" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: OperationsServiceGetOperationsByCursor
									r.name = "OperationsServiceGetOperationsByCursor"
									r.operationID = "OperationsService_GetOperationsByCursor"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'P': // Prefix: "Po"
						if l := len("Po"); len(elem) >= l && elem[0:l] == "Po" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "rtfolio"
							if l := len("rtfolio"); len(elem) >= l && elem[0:l] == "rtfolio" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: OperationsServiceGetPortfolio
									r.name = "OperationsServiceGetPortfolio"
									r.operationID = "OperationsService_GetPortfolio"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "sitions"
							if l := len("sitions"); len(elem) >= l && elem[0:l] == "sitions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: OperationsServiceGetPositions
									r.name = "OperationsServiceGetPositions"
									r.operationID = "OperationsService_GetPositions"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'W': // Prefix: "WithdrawLimits"
						if l := len("WithdrawLimits"); len(elem) >= l && elem[0:l] == "WithdrawLimits" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OperationsServiceGetWithdrawLimits
								r.name = "OperationsServiceGetWithdrawLimits"
								r.operationID = "OperationsService_GetWithdrawLimits"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'r': // Prefix: "rdersService/"
					if l := len("rdersService/"); len(elem) >= l && elem[0:l] == "rdersService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CancelOrder"
						if l := len("CancelOrder"); len(elem) >= l && elem[0:l] == "CancelOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OrdersServiceCancelOrder
								r.name = "OrdersServiceCancelOrder"
								r.operationID = "OrdersService_CancelOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OrdersService/CancelOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'G': // Prefix: "GetOrder"
						if l := len("GetOrder"); len(elem) >= l && elem[0:l] == "GetOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'S': // Prefix: "State"
							if l := len("State"); len(elem) >= l && elem[0:l] == "State" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: OrdersServiceGetOrderState
									r.name = "OrdersServiceGetOrderState"
									r.operationID = "OrdersService_GetOrderState"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OrdersService/GetOrderState"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: OrdersServiceGetOrders
									r.name = "OrdersServiceGetOrders"
									r.operationID = "OrdersService_GetOrders"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OrdersService/GetOrders"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'P': // Prefix: "PostOrder"
						if l := len("PostOrder"); len(elem) >= l && elem[0:l] == "PostOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OrdersServicePostOrder
								r.name = "OrdersServicePostOrder"
								r.operationID = "OrdersService_PostOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OrdersService/PostOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'R': // Prefix: "ReplaceOrder"
						if l := len("ReplaceOrder"); len(elem) >= l && elem[0:l] == "ReplaceOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: OrdersServiceReplaceOrder
								r.name = "OrdersServiceReplaceOrder"
								r.operationID = "OrdersService_ReplaceOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.OrdersService/ReplaceOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'S': // Prefix: "S"
				if l := len("S"); len(elem) >= l && elem[0:l] == "S" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "andboxService/"
					if l := len("andboxService/"); len(elem) >= l && elem[0:l] == "andboxService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "C"
						if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ancelSandboxOrder"
							if l := len("ancelSandboxOrder"); len(elem) >= l && elem[0:l] == "ancelSandboxOrder" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: SandboxServiceCancelSandboxOrder
									r.name = "SandboxServiceCancelSandboxOrder"
									r.operationID = "SandboxService_CancelSandboxOrder"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'l': // Prefix: "loseSandboxAccount"
							if l := len("loseSandboxAccount"); len(elem) >= l && elem[0:l] == "loseSandboxAccount" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: SandboxServiceCloseSandboxAccount
									r.name = "SandboxServiceCloseSandboxAccount"
									r.operationID = "SandboxService_CloseSandboxAccount"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'G': // Prefix: "GetSandbox"
						if l := len("GetSandbox"); len(elem) >= l && elem[0:l] == "GetSandbox" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Accounts"
							if l := len("Accounts"); len(elem) >= l && elem[0:l] == "Accounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: SandboxServiceGetSandboxAccounts
									r.name = "SandboxServiceGetSandboxAccounts"
									r.operationID = "SandboxService_GetSandboxAccounts"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'O': // Prefix: "O"
							if l := len("O"); len(elem) >= l && elem[0:l] == "O" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "perations"
								if l := len("perations"); len(elem) >= l && elem[0:l] == "perations" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "SandboxServiceGetSandboxOperations"
										r.operationID = "SandboxService_GetSandboxOperations"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'B': // Prefix: "ByCursor"
									if l := len("ByCursor"); len(elem) >= l && elem[0:l] == "ByCursor" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: SandboxServiceGetSandboxOperationsByCursor
											r.name = "SandboxServiceGetSandboxOperationsByCursor"
											r.operationID = "SandboxService_GetSandboxOperationsByCursor"
											r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'r': // Prefix: "rder"
								if l := len("rder"); len(elem) >= l && elem[0:l] == "rder" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'S': // Prefix: "State"
									if l := len("State"); len(elem) >= l && elem[0:l] == "State" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: SandboxServiceGetSandboxOrderState
											r.name = "SandboxServiceGetSandboxOrderState"
											r.operationID = "SandboxService_GetSandboxOrderState"
											r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: SandboxServiceGetSandboxOrders
											r.name = "SandboxServiceGetSandboxOrders"
											r.operationID = "SandboxService_GetSandboxOrders"
											r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'P': // Prefix: "Po"
							if l := len("Po"); len(elem) >= l && elem[0:l] == "Po" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "rtfolio"
								if l := len("rtfolio"); len(elem) >= l && elem[0:l] == "rtfolio" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: SandboxServiceGetSandboxPortfolio
										r.name = "SandboxServiceGetSandboxPortfolio"
										r.operationID = "SandboxService_GetSandboxPortfolio"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "sitions"
								if l := len("sitions"); len(elem) >= l && elem[0:l] == "sitions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: SandboxServiceGetSandboxPositions
										r.name = "SandboxServiceGetSandboxPositions"
										r.operationID = "SandboxService_GetSandboxPositions"
										r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						case 'W': // Prefix: "WithdrawLimits"
							if l := len("WithdrawLimits"); len(elem) >= l && elem[0:l] == "WithdrawLimits" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: SandboxServiceGetSandboxWithdrawLimits
									r.name = "SandboxServiceGetSandboxWithdrawLimits"
									r.operationID = "SandboxService_GetSandboxWithdrawLimits"
									r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'O': // Prefix: "OpenSandboxAccount"
						if l := len("OpenSandboxAccount"); len(elem) >= l && elem[0:l] == "OpenSandboxAccount" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SandboxServiceOpenSandboxAccount
								r.name = "SandboxServiceOpenSandboxAccount"
								r.operationID = "SandboxService_OpenSandboxAccount"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'P': // Prefix: "PostSandboxOrder"
						if l := len("PostSandboxOrder"); len(elem) >= l && elem[0:l] == "PostSandboxOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SandboxServicePostSandboxOrder
								r.name = "SandboxServicePostSandboxOrder"
								r.operationID = "SandboxService_PostSandboxOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'R': // Prefix: "ReplaceSandboxOrder"
						if l := len("ReplaceSandboxOrder"); len(elem) >= l && elem[0:l] == "ReplaceSandboxOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SandboxServiceReplaceSandboxOrder
								r.name = "SandboxServiceReplaceSandboxOrder"
								r.operationID = "SandboxService_ReplaceSandboxOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'S': // Prefix: "SandboxPayIn"
						if l := len("SandboxPayIn"); len(elem) >= l && elem[0:l] == "SandboxPayIn" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SandboxServiceSandboxPayIn
								r.name = "SandboxServiceSandboxPayIn"
								r.operationID = "SandboxService_SandboxPayIn"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 't': // Prefix: "topOrdersService/"
					if l := len("topOrdersService/"); len(elem) >= l && elem[0:l] == "topOrdersService/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CancelStopOrder"
						if l := len("CancelStopOrder"); len(elem) >= l && elem[0:l] == "CancelStopOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: StopOrdersServiceCancelStopOrder
								r.name = "StopOrdersServiceCancelStopOrder"
								r.operationID = "StopOrdersService_CancelStopOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.StopOrdersService/CancelStopOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'G': // Prefix: "GetStopOrders"
						if l := len("GetStopOrders"); len(elem) >= l && elem[0:l] == "GetStopOrders" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: StopOrdersServiceGetStopOrders
								r.name = "StopOrdersServiceGetStopOrders"
								r.operationID = "StopOrdersService_GetStopOrders"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.StopOrdersService/GetStopOrders"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'P': // Prefix: "PostStopOrder"
						if l := len("PostStopOrder"); len(elem) >= l && elem[0:l] == "PostStopOrder" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: StopOrdersServicePostStopOrder
								r.name = "StopOrdersServicePostStopOrder"
								r.operationID = "StopOrdersService_PostStopOrder"
								r.pathPattern = "/tinkoff.public.invest.api.contract.v1.StopOrdersService/PostStopOrder"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'U': // Prefix: "UsersService/Get"
				if l := len("UsersService/Get"); len(elem) >= l && elem[0:l] == "UsersService/Get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'A': // Prefix: "Accounts"
					if l := len("Accounts"); len(elem) >= l && elem[0:l] == "Accounts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: UsersServiceGetAccounts
							r.name = "UsersServiceGetAccounts"
							r.operationID = "UsersService_GetAccounts"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'I': // Prefix: "Info"
					if l := len("Info"); len(elem) >= l && elem[0:l] == "Info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: UsersServiceGetInfo
							r.name = "UsersServiceGetInfo"
							r.operationID = "UsersService_GetInfo"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'M': // Prefix: "MarginAttributes"
					if l := len("MarginAttributes"); len(elem) >= l && elem[0:l] == "MarginAttributes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: UsersServiceGetMarginAttributes
							r.name = "UsersServiceGetMarginAttributes"
							r.operationID = "UsersService_GetMarginAttributes"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'U': // Prefix: "UserTariff"
					if l := len("UserTariff"); len(elem) >= l && elem[0:l] == "UserTariff" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: UsersServiceGetUserTariff
							r.name = "UsersServiceGetUserTariff"
							r.operationID = "UsersService_GetUserTariff"
							r.pathPattern = "/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
