// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"time"

	"github.com/go-faster/errors"
)

type Bearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortfolioRequestCurrencyRequest returns new OptPortfolioRequestCurrencyRequest with value set to v.
func NewOptPortfolioRequestCurrencyRequest(v PortfolioRequestCurrencyRequest) OptPortfolioRequestCurrencyRequest {
	return OptPortfolioRequestCurrencyRequest{
		Value: v,
		Set:   true,
	}
}

// OptPortfolioRequestCurrencyRequest is optional PortfolioRequestCurrencyRequest.
type OptPortfolioRequestCurrencyRequest struct {
	Value PortfolioRequestCurrencyRequest
	Set   bool
}

// IsSet returns true if OptPortfolioRequestCurrencyRequest was set.
func (o OptPortfolioRequestCurrencyRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortfolioRequestCurrencyRequest) Reset() {
	var v PortfolioRequestCurrencyRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortfolioRequestCurrencyRequest) SetTo(v PortfolioRequestCurrencyRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortfolioRequestCurrencyRequest) Get() (v PortfolioRequestCurrencyRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortfolioRequestCurrencyRequest) Or(d PortfolioRequestCurrencyRequest) PortfolioRequestCurrencyRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringInt64 returns new OptStringInt64 with value set to v.
func NewOptStringInt64(v int64) OptStringInt64 {
	return OptStringInt64{
		Value: v,
		Set:   true,
	}
}

// OptStringInt64 is optional int64.
type OptStringInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptStringInt64 was set.
func (o OptStringInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AccessLevel returns new OptV1AccessLevel with value set to v.
func NewOptV1AccessLevel(v V1AccessLevel) OptV1AccessLevel {
	return OptV1AccessLevel{
		Value: v,
		Set:   true,
	}
}

// OptV1AccessLevel is optional V1AccessLevel.
type OptV1AccessLevel struct {
	Value V1AccessLevel
	Set   bool
}

// IsSet returns true if OptV1AccessLevel was set.
func (o OptV1AccessLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AccessLevel) Reset() {
	var v V1AccessLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AccessLevel) SetTo(v V1AccessLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AccessLevel) Get() (v V1AccessLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AccessLevel) Or(d V1AccessLevel) V1AccessLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AccountStatus returns new OptV1AccountStatus with value set to v.
func NewOptV1AccountStatus(v V1AccountStatus) OptV1AccountStatus {
	return OptV1AccountStatus{
		Value: v,
		Set:   true,
	}
}

// OptV1AccountStatus is optional V1AccountStatus.
type OptV1AccountStatus struct {
	Value V1AccountStatus
	Set   bool
}

// IsSet returns true if OptV1AccountStatus was set.
func (o OptV1AccountStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AccountStatus) Reset() {
	var v V1AccountStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AccountStatus) SetTo(v V1AccountStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AccountStatus) Get() (v V1AccountStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AccountStatus) Or(d V1AccountStatus) V1AccountStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AccountType returns new OptV1AccountType with value set to v.
func NewOptV1AccountType(v V1AccountType) OptV1AccountType {
	return OptV1AccountType{
		Value: v,
		Set:   true,
	}
}

// OptV1AccountType is optional V1AccountType.
type OptV1AccountType struct {
	Value V1AccountType
	Set   bool
}

// IsSet returns true if OptV1AccountType was set.
func (o OptV1AccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AccountType) Reset() {
	var v V1AccountType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AccountType) SetTo(v V1AccountType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AccountType) Get() (v V1AccountType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AccountType) Or(d V1AccountType) V1AccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetBond returns new OptV1AssetBond with value set to v.
func NewOptV1AssetBond(v V1AssetBond) OptV1AssetBond {
	return OptV1AssetBond{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetBond is optional V1AssetBond.
type OptV1AssetBond struct {
	Value V1AssetBond
	Set   bool
}

// IsSet returns true if OptV1AssetBond was set.
func (o OptV1AssetBond) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetBond) Reset() {
	var v V1AssetBond
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetBond) SetTo(v V1AssetBond) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetBond) Get() (v V1AssetBond, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetBond) Or(d V1AssetBond) V1AssetBond {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetClearingCertificate returns new OptV1AssetClearingCertificate with value set to v.
func NewOptV1AssetClearingCertificate(v V1AssetClearingCertificate) OptV1AssetClearingCertificate {
	return OptV1AssetClearingCertificate{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetClearingCertificate is optional V1AssetClearingCertificate.
type OptV1AssetClearingCertificate struct {
	Value V1AssetClearingCertificate
	Set   bool
}

// IsSet returns true if OptV1AssetClearingCertificate was set.
func (o OptV1AssetClearingCertificate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetClearingCertificate) Reset() {
	var v V1AssetClearingCertificate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetClearingCertificate) SetTo(v V1AssetClearingCertificate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetClearingCertificate) Get() (v V1AssetClearingCertificate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetClearingCertificate) Or(d V1AssetClearingCertificate) V1AssetClearingCertificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetCurrency returns new OptV1AssetCurrency with value set to v.
func NewOptV1AssetCurrency(v V1AssetCurrency) OptV1AssetCurrency {
	return OptV1AssetCurrency{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetCurrency is optional V1AssetCurrency.
type OptV1AssetCurrency struct {
	Value V1AssetCurrency
	Set   bool
}

// IsSet returns true if OptV1AssetCurrency was set.
func (o OptV1AssetCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetCurrency) Reset() {
	var v V1AssetCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetCurrency) SetTo(v V1AssetCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetCurrency) Get() (v V1AssetCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetCurrency) Or(d V1AssetCurrency) V1AssetCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetEtf returns new OptV1AssetEtf with value set to v.
func NewOptV1AssetEtf(v V1AssetEtf) OptV1AssetEtf {
	return OptV1AssetEtf{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetEtf is optional V1AssetEtf.
type OptV1AssetEtf struct {
	Value V1AssetEtf
	Set   bool
}

// IsSet returns true if OptV1AssetEtf was set.
func (o OptV1AssetEtf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetEtf) Reset() {
	var v V1AssetEtf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetEtf) SetTo(v V1AssetEtf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetEtf) Get() (v V1AssetEtf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetEtf) Or(d V1AssetEtf) V1AssetEtf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetFull returns new OptV1AssetFull with value set to v.
func NewOptV1AssetFull(v V1AssetFull) OptV1AssetFull {
	return OptV1AssetFull{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetFull is optional V1AssetFull.
type OptV1AssetFull struct {
	Value V1AssetFull
	Set   bool
}

// IsSet returns true if OptV1AssetFull was set.
func (o OptV1AssetFull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetFull) Reset() {
	var v V1AssetFull
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetFull) SetTo(v V1AssetFull) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetFull) Get() (v V1AssetFull, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetFull) Or(d V1AssetFull) V1AssetFull {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetSecurity returns new OptV1AssetSecurity with value set to v.
func NewOptV1AssetSecurity(v V1AssetSecurity) OptV1AssetSecurity {
	return OptV1AssetSecurity{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetSecurity is optional V1AssetSecurity.
type OptV1AssetSecurity struct {
	Value V1AssetSecurity
	Set   bool
}

// IsSet returns true if OptV1AssetSecurity was set.
func (o OptV1AssetSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetSecurity) Reset() {
	var v V1AssetSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetSecurity) SetTo(v V1AssetSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetSecurity) Get() (v V1AssetSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetSecurity) Or(d V1AssetSecurity) V1AssetSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetShare returns new OptV1AssetShare with value set to v.
func NewOptV1AssetShare(v V1AssetShare) OptV1AssetShare {
	return OptV1AssetShare{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetShare is optional V1AssetShare.
type OptV1AssetShare struct {
	Value V1AssetShare
	Set   bool
}

// IsSet returns true if OptV1AssetShare was set.
func (o OptV1AssetShare) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetShare) Reset() {
	var v V1AssetShare
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetShare) SetTo(v V1AssetShare) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetShare) Get() (v V1AssetShare, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetShare) Or(d V1AssetShare) V1AssetShare {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetStructuredProduct returns new OptV1AssetStructuredProduct with value set to v.
func NewOptV1AssetStructuredProduct(v V1AssetStructuredProduct) OptV1AssetStructuredProduct {
	return OptV1AssetStructuredProduct{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetStructuredProduct is optional V1AssetStructuredProduct.
type OptV1AssetStructuredProduct struct {
	Value V1AssetStructuredProduct
	Set   bool
}

// IsSet returns true if OptV1AssetStructuredProduct was set.
func (o OptV1AssetStructuredProduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetStructuredProduct) Reset() {
	var v V1AssetStructuredProduct
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetStructuredProduct) SetTo(v V1AssetStructuredProduct) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetStructuredProduct) Get() (v V1AssetStructuredProduct, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetStructuredProduct) Or(d V1AssetStructuredProduct) V1AssetStructuredProduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AssetType returns new OptV1AssetType with value set to v.
func NewOptV1AssetType(v V1AssetType) OptV1AssetType {
	return OptV1AssetType{
		Value: v,
		Set:   true,
	}
}

// OptV1AssetType is optional V1AssetType.
type OptV1AssetType struct {
	Value V1AssetType
	Set   bool
}

// IsSet returns true if OptV1AssetType was set.
func (o OptV1AssetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AssetType) Reset() {
	var v V1AssetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AssetType) SetTo(v V1AssetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AssetType) Get() (v V1AssetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AssetType) Or(d V1AssetType) V1AssetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Bond returns new OptV1Bond with value set to v.
func NewOptV1Bond(v V1Bond) OptV1Bond {
	return OptV1Bond{
		Value: v,
		Set:   true,
	}
}

// OptV1Bond is optional V1Bond.
type OptV1Bond struct {
	Value V1Bond
	Set   bool
}

// IsSet returns true if OptV1Bond was set.
func (o OptV1Bond) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Bond) Reset() {
	var v V1Bond
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Bond) SetTo(v V1Bond) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Bond) Get() (v V1Bond, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Bond) Or(d V1Bond) V1Bond {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Brand returns new OptV1Brand with value set to v.
func NewOptV1Brand(v V1Brand) OptV1Brand {
	return OptV1Brand{
		Value: v,
		Set:   true,
	}
}

// OptV1Brand is optional V1Brand.
type OptV1Brand struct {
	Value V1Brand
	Set   bool
}

// IsSet returns true if OptV1Brand was set.
func (o OptV1Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Brand) Reset() {
	var v V1Brand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Brand) SetTo(v V1Brand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Brand) Get() (v V1Brand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Brand) Or(d V1Brand) V1Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1CandleInterval returns new OptV1CandleInterval with value set to v.
func NewOptV1CandleInterval(v V1CandleInterval) OptV1CandleInterval {
	return OptV1CandleInterval{
		Value: v,
		Set:   true,
	}
}

// OptV1CandleInterval is optional V1CandleInterval.
type OptV1CandleInterval struct {
	Value V1CandleInterval
	Set   bool
}

// IsSet returns true if OptV1CandleInterval was set.
func (o OptV1CandleInterval) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1CandleInterval) Reset() {
	var v V1CandleInterval
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1CandleInterval) SetTo(v V1CandleInterval) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1CandleInterval) Get() (v V1CandleInterval, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1CandleInterval) Or(d V1CandleInterval) V1CandleInterval {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1CouponType returns new OptV1CouponType with value set to v.
func NewOptV1CouponType(v V1CouponType) OptV1CouponType {
	return OptV1CouponType{
		Value: v,
		Set:   true,
	}
}

// OptV1CouponType is optional V1CouponType.
type OptV1CouponType struct {
	Value V1CouponType
	Set   bool
}

// IsSet returns true if OptV1CouponType was set.
func (o OptV1CouponType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1CouponType) Reset() {
	var v V1CouponType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1CouponType) SetTo(v V1CouponType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1CouponType) Get() (v V1CouponType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1CouponType) Or(d V1CouponType) V1CouponType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Currency returns new OptV1Currency with value set to v.
func NewOptV1Currency(v V1Currency) OptV1Currency {
	return OptV1Currency{
		Value: v,
		Set:   true,
	}
}

// OptV1Currency is optional V1Currency.
type OptV1Currency struct {
	Value V1Currency
	Set   bool
}

// IsSet returns true if OptV1Currency was set.
func (o OptV1Currency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Currency) Reset() {
	var v V1Currency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Currency) SetTo(v V1Currency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Currency) Get() (v V1Currency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Currency) Or(d V1Currency) V1Currency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1EditFavoritesActionType returns new OptV1EditFavoritesActionType with value set to v.
func NewOptV1EditFavoritesActionType(v V1EditFavoritesActionType) OptV1EditFavoritesActionType {
	return OptV1EditFavoritesActionType{
		Value: v,
		Set:   true,
	}
}

// OptV1EditFavoritesActionType is optional V1EditFavoritesActionType.
type OptV1EditFavoritesActionType struct {
	Value V1EditFavoritesActionType
	Set   bool
}

// IsSet returns true if OptV1EditFavoritesActionType was set.
func (o OptV1EditFavoritesActionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1EditFavoritesActionType) Reset() {
	var v V1EditFavoritesActionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1EditFavoritesActionType) SetTo(v V1EditFavoritesActionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1EditFavoritesActionType) Get() (v V1EditFavoritesActionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1EditFavoritesActionType) Or(d V1EditFavoritesActionType) V1EditFavoritesActionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Etf returns new OptV1Etf with value set to v.
func NewOptV1Etf(v V1Etf) OptV1Etf {
	return OptV1Etf{
		Value: v,
		Set:   true,
	}
}

// OptV1Etf is optional V1Etf.
type OptV1Etf struct {
	Value V1Etf
	Set   bool
}

// IsSet returns true if OptV1Etf was set.
func (o OptV1Etf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Etf) Reset() {
	var v V1Etf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Etf) SetTo(v V1Etf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Etf) Get() (v V1Etf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Etf) Or(d V1Etf) V1Etf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Future returns new OptV1Future with value set to v.
func NewOptV1Future(v V1Future) OptV1Future {
	return OptV1Future{
		Value: v,
		Set:   true,
	}
}

// OptV1Future is optional V1Future.
type OptV1Future struct {
	Value V1Future
	Set   bool
}

// IsSet returns true if OptV1Future was set.
func (o OptV1Future) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Future) Reset() {
	var v V1Future
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Future) SetTo(v V1Future) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Future) Get() (v V1Future, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Future) Or(d V1Future) V1Future {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GenerateBrokerReportRequest returns new OptV1GenerateBrokerReportRequest with value set to v.
func NewOptV1GenerateBrokerReportRequest(v V1GenerateBrokerReportRequest) OptV1GenerateBrokerReportRequest {
	return OptV1GenerateBrokerReportRequest{
		Value: v,
		Set:   true,
	}
}

// OptV1GenerateBrokerReportRequest is optional V1GenerateBrokerReportRequest.
type OptV1GenerateBrokerReportRequest struct {
	Value V1GenerateBrokerReportRequest
	Set   bool
}

// IsSet returns true if OptV1GenerateBrokerReportRequest was set.
func (o OptV1GenerateBrokerReportRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GenerateBrokerReportRequest) Reset() {
	var v V1GenerateBrokerReportRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GenerateBrokerReportRequest) SetTo(v V1GenerateBrokerReportRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GenerateBrokerReportRequest) Get() (v V1GenerateBrokerReportRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GenerateBrokerReportRequest) Or(d V1GenerateBrokerReportRequest) V1GenerateBrokerReportRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GenerateBrokerReportResponse returns new OptV1GenerateBrokerReportResponse with value set to v.
func NewOptV1GenerateBrokerReportResponse(v V1GenerateBrokerReportResponse) OptV1GenerateBrokerReportResponse {
	return OptV1GenerateBrokerReportResponse{
		Value: v,
		Set:   true,
	}
}

// OptV1GenerateBrokerReportResponse is optional V1GenerateBrokerReportResponse.
type OptV1GenerateBrokerReportResponse struct {
	Value V1GenerateBrokerReportResponse
	Set   bool
}

// IsSet returns true if OptV1GenerateBrokerReportResponse was set.
func (o OptV1GenerateBrokerReportResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GenerateBrokerReportResponse) Reset() {
	var v V1GenerateBrokerReportResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GenerateBrokerReportResponse) SetTo(v V1GenerateBrokerReportResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GenerateBrokerReportResponse) Get() (v V1GenerateBrokerReportResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GenerateBrokerReportResponse) Or(d V1GenerateBrokerReportResponse) V1GenerateBrokerReportResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GenerateDividendsForeignIssuerReportRequest returns new OptV1GenerateDividendsForeignIssuerReportRequest with value set to v.
func NewOptV1GenerateDividendsForeignIssuerReportRequest(v V1GenerateDividendsForeignIssuerReportRequest) OptV1GenerateDividendsForeignIssuerReportRequest {
	return OptV1GenerateDividendsForeignIssuerReportRequest{
		Value: v,
		Set:   true,
	}
}

// OptV1GenerateDividendsForeignIssuerReportRequest is optional V1GenerateDividendsForeignIssuerReportRequest.
type OptV1GenerateDividendsForeignIssuerReportRequest struct {
	Value V1GenerateDividendsForeignIssuerReportRequest
	Set   bool
}

// IsSet returns true if OptV1GenerateDividendsForeignIssuerReportRequest was set.
func (o OptV1GenerateDividendsForeignIssuerReportRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GenerateDividendsForeignIssuerReportRequest) Reset() {
	var v V1GenerateDividendsForeignIssuerReportRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GenerateDividendsForeignIssuerReportRequest) SetTo(v V1GenerateDividendsForeignIssuerReportRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GenerateDividendsForeignIssuerReportRequest) Get() (v V1GenerateDividendsForeignIssuerReportRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GenerateDividendsForeignIssuerReportRequest) Or(d V1GenerateDividendsForeignIssuerReportRequest) V1GenerateDividendsForeignIssuerReportRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GenerateDividendsForeignIssuerReportResponse returns new OptV1GenerateDividendsForeignIssuerReportResponse with value set to v.
func NewOptV1GenerateDividendsForeignIssuerReportResponse(v V1GenerateDividendsForeignIssuerReportResponse) OptV1GenerateDividendsForeignIssuerReportResponse {
	return OptV1GenerateDividendsForeignIssuerReportResponse{
		Value: v,
		Set:   true,
	}
}

// OptV1GenerateDividendsForeignIssuerReportResponse is optional V1GenerateDividendsForeignIssuerReportResponse.
type OptV1GenerateDividendsForeignIssuerReportResponse struct {
	Value V1GenerateDividendsForeignIssuerReportResponse
	Set   bool
}

// IsSet returns true if OptV1GenerateDividendsForeignIssuerReportResponse was set.
func (o OptV1GenerateDividendsForeignIssuerReportResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GenerateDividendsForeignIssuerReportResponse) Reset() {
	var v V1GenerateDividendsForeignIssuerReportResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GenerateDividendsForeignIssuerReportResponse) SetTo(v V1GenerateDividendsForeignIssuerReportResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GenerateDividendsForeignIssuerReportResponse) Get() (v V1GenerateDividendsForeignIssuerReportResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GenerateDividendsForeignIssuerReportResponse) Or(d V1GenerateDividendsForeignIssuerReportResponse) V1GenerateDividendsForeignIssuerReportResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GetBrokerReportRequest returns new OptV1GetBrokerReportRequest with value set to v.
func NewOptV1GetBrokerReportRequest(v V1GetBrokerReportRequest) OptV1GetBrokerReportRequest {
	return OptV1GetBrokerReportRequest{
		Value: v,
		Set:   true,
	}
}

// OptV1GetBrokerReportRequest is optional V1GetBrokerReportRequest.
type OptV1GetBrokerReportRequest struct {
	Value V1GetBrokerReportRequest
	Set   bool
}

// IsSet returns true if OptV1GetBrokerReportRequest was set.
func (o OptV1GetBrokerReportRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GetBrokerReportRequest) Reset() {
	var v V1GetBrokerReportRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GetBrokerReportRequest) SetTo(v V1GetBrokerReportRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GetBrokerReportRequest) Get() (v V1GetBrokerReportRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GetBrokerReportRequest) Or(d V1GetBrokerReportRequest) V1GetBrokerReportRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GetBrokerReportResponse returns new OptV1GetBrokerReportResponse with value set to v.
func NewOptV1GetBrokerReportResponse(v V1GetBrokerReportResponse) OptV1GetBrokerReportResponse {
	return OptV1GetBrokerReportResponse{
		Value: v,
		Set:   true,
	}
}

// OptV1GetBrokerReportResponse is optional V1GetBrokerReportResponse.
type OptV1GetBrokerReportResponse struct {
	Value V1GetBrokerReportResponse
	Set   bool
}

// IsSet returns true if OptV1GetBrokerReportResponse was set.
func (o OptV1GetBrokerReportResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GetBrokerReportResponse) Reset() {
	var v V1GetBrokerReportResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GetBrokerReportResponse) SetTo(v V1GetBrokerReportResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GetBrokerReportResponse) Get() (v V1GetBrokerReportResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GetBrokerReportResponse) Or(d V1GetBrokerReportResponse) V1GetBrokerReportResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GetDividendsForeignIssuerReportRequest returns new OptV1GetDividendsForeignIssuerReportRequest with value set to v.
func NewOptV1GetDividendsForeignIssuerReportRequest(v V1GetDividendsForeignIssuerReportRequest) OptV1GetDividendsForeignIssuerReportRequest {
	return OptV1GetDividendsForeignIssuerReportRequest{
		Value: v,
		Set:   true,
	}
}

// OptV1GetDividendsForeignIssuerReportRequest is optional V1GetDividendsForeignIssuerReportRequest.
type OptV1GetDividendsForeignIssuerReportRequest struct {
	Value V1GetDividendsForeignIssuerReportRequest
	Set   bool
}

// IsSet returns true if OptV1GetDividendsForeignIssuerReportRequest was set.
func (o OptV1GetDividendsForeignIssuerReportRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GetDividendsForeignIssuerReportRequest) Reset() {
	var v V1GetDividendsForeignIssuerReportRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GetDividendsForeignIssuerReportRequest) SetTo(v V1GetDividendsForeignIssuerReportRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GetDividendsForeignIssuerReportRequest) Get() (v V1GetDividendsForeignIssuerReportRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GetDividendsForeignIssuerReportRequest) Or(d V1GetDividendsForeignIssuerReportRequest) V1GetDividendsForeignIssuerReportRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1GetDividendsForeignIssuerReportResponse returns new OptV1GetDividendsForeignIssuerReportResponse with value set to v.
func NewOptV1GetDividendsForeignIssuerReportResponse(v V1GetDividendsForeignIssuerReportResponse) OptV1GetDividendsForeignIssuerReportResponse {
	return OptV1GetDividendsForeignIssuerReportResponse{
		Value: v,
		Set:   true,
	}
}

// OptV1GetDividendsForeignIssuerReportResponse is optional V1GetDividendsForeignIssuerReportResponse.
type OptV1GetDividendsForeignIssuerReportResponse struct {
	Value V1GetDividendsForeignIssuerReportResponse
	Set   bool
}

// IsSet returns true if OptV1GetDividendsForeignIssuerReportResponse was set.
func (o OptV1GetDividendsForeignIssuerReportResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1GetDividendsForeignIssuerReportResponse) Reset() {
	var v V1GetDividendsForeignIssuerReportResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1GetDividendsForeignIssuerReportResponse) SetTo(v V1GetDividendsForeignIssuerReportResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1GetDividendsForeignIssuerReportResponse) Get() (v V1GetDividendsForeignIssuerReportResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1GetDividendsForeignIssuerReportResponse) Or(d V1GetDividendsForeignIssuerReportResponse) V1GetDividendsForeignIssuerReportResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Instrument returns new OptV1Instrument with value set to v.
func NewOptV1Instrument(v V1Instrument) OptV1Instrument {
	return OptV1Instrument{
		Value: v,
		Set:   true,
	}
}

// OptV1Instrument is optional V1Instrument.
type OptV1Instrument struct {
	Value V1Instrument
	Set   bool
}

// IsSet returns true if OptV1Instrument was set.
func (o OptV1Instrument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Instrument) Reset() {
	var v V1Instrument
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Instrument) SetTo(v V1Instrument) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Instrument) Get() (v V1Instrument, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Instrument) Or(d V1Instrument) V1Instrument {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1InstrumentIdType returns new OptV1InstrumentIdType with value set to v.
func NewOptV1InstrumentIdType(v V1InstrumentIdType) OptV1InstrumentIdType {
	return OptV1InstrumentIdType{
		Value: v,
		Set:   true,
	}
}

// OptV1InstrumentIdType is optional V1InstrumentIdType.
type OptV1InstrumentIdType struct {
	Value V1InstrumentIdType
	Set   bool
}

// IsSet returns true if OptV1InstrumentIdType was set.
func (o OptV1InstrumentIdType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1InstrumentIdType) Reset() {
	var v V1InstrumentIdType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1InstrumentIdType) SetTo(v V1InstrumentIdType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1InstrumentIdType) Get() (v V1InstrumentIdType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1InstrumentIdType) Or(d V1InstrumentIdType) V1InstrumentIdType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1InstrumentStatus returns new OptV1InstrumentStatus with value set to v.
func NewOptV1InstrumentStatus(v V1InstrumentStatus) OptV1InstrumentStatus {
	return OptV1InstrumentStatus{
		Value: v,
		Set:   true,
	}
}

// OptV1InstrumentStatus is optional V1InstrumentStatus.
type OptV1InstrumentStatus struct {
	Value V1InstrumentStatus
	Set   bool
}

// IsSet returns true if OptV1InstrumentStatus was set.
func (o OptV1InstrumentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1InstrumentStatus) Reset() {
	var v V1InstrumentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1InstrumentStatus) SetTo(v V1InstrumentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1InstrumentStatus) Get() (v V1InstrumentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1InstrumentStatus) Or(d V1InstrumentStatus) V1InstrumentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1InstrumentType returns new OptV1InstrumentType with value set to v.
func NewOptV1InstrumentType(v V1InstrumentType) OptV1InstrumentType {
	return OptV1InstrumentType{
		Value: v,
		Set:   true,
	}
}

// OptV1InstrumentType is optional V1InstrumentType.
type OptV1InstrumentType struct {
	Value V1InstrumentType
	Set   bool
}

// IsSet returns true if OptV1InstrumentType was set.
func (o OptV1InstrumentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1InstrumentType) Reset() {
	var v V1InstrumentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1InstrumentType) SetTo(v V1InstrumentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1InstrumentType) Get() (v V1InstrumentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1InstrumentType) Or(d V1InstrumentType) V1InstrumentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1MoneyValue returns new OptV1MoneyValue with value set to v.
func NewOptV1MoneyValue(v V1MoneyValue) OptV1MoneyValue {
	return OptV1MoneyValue{
		Value: v,
		Set:   true,
	}
}

// OptV1MoneyValue is optional V1MoneyValue.
type OptV1MoneyValue struct {
	Value V1MoneyValue
	Set   bool
}

// IsSet returns true if OptV1MoneyValue was set.
func (o OptV1MoneyValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1MoneyValue) Reset() {
	var v V1MoneyValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1MoneyValue) SetTo(v V1MoneyValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1MoneyValue) Get() (v V1MoneyValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1MoneyValue) Or(d V1MoneyValue) V1MoneyValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OperationItemTrades returns new OptV1OperationItemTrades with value set to v.
func NewOptV1OperationItemTrades(v V1OperationItemTrades) OptV1OperationItemTrades {
	return OptV1OperationItemTrades{
		Value: v,
		Set:   true,
	}
}

// OptV1OperationItemTrades is optional V1OperationItemTrades.
type OptV1OperationItemTrades struct {
	Value V1OperationItemTrades
	Set   bool
}

// IsSet returns true if OptV1OperationItemTrades was set.
func (o OptV1OperationItemTrades) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OperationItemTrades) Reset() {
	var v V1OperationItemTrades
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OperationItemTrades) SetTo(v V1OperationItemTrades) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OperationItemTrades) Get() (v V1OperationItemTrades, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OperationItemTrades) Or(d V1OperationItemTrades) V1OperationItemTrades {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OperationState returns new OptV1OperationState with value set to v.
func NewOptV1OperationState(v V1OperationState) OptV1OperationState {
	return OptV1OperationState{
		Value: v,
		Set:   true,
	}
}

// OptV1OperationState is optional V1OperationState.
type OptV1OperationState struct {
	Value V1OperationState
	Set   bool
}

// IsSet returns true if OptV1OperationState was set.
func (o OptV1OperationState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OperationState) Reset() {
	var v V1OperationState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OperationState) SetTo(v V1OperationState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OperationState) Get() (v V1OperationState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OperationState) Or(d V1OperationState) V1OperationState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OperationType returns new OptV1OperationType with value set to v.
func NewOptV1OperationType(v V1OperationType) OptV1OperationType {
	return OptV1OperationType{
		Value: v,
		Set:   true,
	}
}

// OptV1OperationType is optional V1OperationType.
type OptV1OperationType struct {
	Value V1OperationType
	Set   bool
}

// IsSet returns true if OptV1OperationType was set.
func (o OptV1OperationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OperationType) Reset() {
	var v V1OperationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OperationType) SetTo(v V1OperationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OperationType) Get() (v V1OperationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OperationType) Or(d V1OperationType) V1OperationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Option returns new OptV1Option with value set to v.
func NewOptV1Option(v V1Option) OptV1Option {
	return OptV1Option{
		Value: v,
		Set:   true,
	}
}

// OptV1Option is optional V1Option.
type OptV1Option struct {
	Value V1Option
	Set   bool
}

// IsSet returns true if OptV1Option was set.
func (o OptV1Option) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Option) Reset() {
	var v V1Option
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Option) SetTo(v V1Option) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Option) Get() (v V1Option, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Option) Or(d V1Option) V1Option {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OptionDirection returns new OptV1OptionDirection with value set to v.
func NewOptV1OptionDirection(v V1OptionDirection) OptV1OptionDirection {
	return OptV1OptionDirection{
		Value: v,
		Set:   true,
	}
}

// OptV1OptionDirection is optional V1OptionDirection.
type OptV1OptionDirection struct {
	Value V1OptionDirection
	Set   bool
}

// IsSet returns true if OptV1OptionDirection was set.
func (o OptV1OptionDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OptionDirection) Reset() {
	var v V1OptionDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OptionDirection) SetTo(v V1OptionDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OptionDirection) Get() (v V1OptionDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OptionDirection) Or(d V1OptionDirection) V1OptionDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OptionPaymentType returns new OptV1OptionPaymentType with value set to v.
func NewOptV1OptionPaymentType(v V1OptionPaymentType) OptV1OptionPaymentType {
	return OptV1OptionPaymentType{
		Value: v,
		Set:   true,
	}
}

// OptV1OptionPaymentType is optional V1OptionPaymentType.
type OptV1OptionPaymentType struct {
	Value V1OptionPaymentType
	Set   bool
}

// IsSet returns true if OptV1OptionPaymentType was set.
func (o OptV1OptionPaymentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OptionPaymentType) Reset() {
	var v V1OptionPaymentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OptionPaymentType) SetTo(v V1OptionPaymentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OptionPaymentType) Get() (v V1OptionPaymentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OptionPaymentType) Or(d V1OptionPaymentType) V1OptionPaymentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OptionSettlementType returns new OptV1OptionSettlementType with value set to v.
func NewOptV1OptionSettlementType(v V1OptionSettlementType) OptV1OptionSettlementType {
	return OptV1OptionSettlementType{
		Value: v,
		Set:   true,
	}
}

// OptV1OptionSettlementType is optional V1OptionSettlementType.
type OptV1OptionSettlementType struct {
	Value V1OptionSettlementType
	Set   bool
}

// IsSet returns true if OptV1OptionSettlementType was set.
func (o OptV1OptionSettlementType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OptionSettlementType) Reset() {
	var v V1OptionSettlementType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OptionSettlementType) SetTo(v V1OptionSettlementType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OptionSettlementType) Get() (v V1OptionSettlementType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OptionSettlementType) Or(d V1OptionSettlementType) V1OptionSettlementType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OptionStyle returns new OptV1OptionStyle with value set to v.
func NewOptV1OptionStyle(v V1OptionStyle) OptV1OptionStyle {
	return OptV1OptionStyle{
		Value: v,
		Set:   true,
	}
}

// OptV1OptionStyle is optional V1OptionStyle.
type OptV1OptionStyle struct {
	Value V1OptionStyle
	Set   bool
}

// IsSet returns true if OptV1OptionStyle was set.
func (o OptV1OptionStyle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OptionStyle) Reset() {
	var v V1OptionStyle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OptionStyle) SetTo(v V1OptionStyle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OptionStyle) Get() (v V1OptionStyle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OptionStyle) Or(d V1OptionStyle) V1OptionStyle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OrderDirection returns new OptV1OrderDirection with value set to v.
func NewOptV1OrderDirection(v V1OrderDirection) OptV1OrderDirection {
	return OptV1OrderDirection{
		Value: v,
		Set:   true,
	}
}

// OptV1OrderDirection is optional V1OrderDirection.
type OptV1OrderDirection struct {
	Value V1OrderDirection
	Set   bool
}

// IsSet returns true if OptV1OrderDirection was set.
func (o OptV1OrderDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OrderDirection) Reset() {
	var v V1OrderDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OrderDirection) SetTo(v V1OrderDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OrderDirection) Get() (v V1OrderDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OrderDirection) Or(d V1OrderDirection) V1OrderDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OrderExecutionReportStatus returns new OptV1OrderExecutionReportStatus with value set to v.
func NewOptV1OrderExecutionReportStatus(v V1OrderExecutionReportStatus) OptV1OrderExecutionReportStatus {
	return OptV1OrderExecutionReportStatus{
		Value: v,
		Set:   true,
	}
}

// OptV1OrderExecutionReportStatus is optional V1OrderExecutionReportStatus.
type OptV1OrderExecutionReportStatus struct {
	Value V1OrderExecutionReportStatus
	Set   bool
}

// IsSet returns true if OptV1OrderExecutionReportStatus was set.
func (o OptV1OrderExecutionReportStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OrderExecutionReportStatus) Reset() {
	var v V1OrderExecutionReportStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OrderExecutionReportStatus) SetTo(v V1OrderExecutionReportStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OrderExecutionReportStatus) Get() (v V1OrderExecutionReportStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OrderExecutionReportStatus) Or(d V1OrderExecutionReportStatus) V1OrderExecutionReportStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1OrderType returns new OptV1OrderType with value set to v.
func NewOptV1OrderType(v V1OrderType) OptV1OrderType {
	return OptV1OrderType{
		Value: v,
		Set:   true,
	}
}

// OptV1OrderType is optional V1OrderType.
type OptV1OrderType struct {
	Value V1OrderType
	Set   bool
}

// IsSet returns true if OptV1OrderType was set.
func (o OptV1OrderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1OrderType) Reset() {
	var v V1OrderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1OrderType) SetTo(v V1OrderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1OrderType) Get() (v V1OrderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1OrderType) Or(d V1OrderType) V1OrderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1PriceType returns new OptV1PriceType with value set to v.
func NewOptV1PriceType(v V1PriceType) OptV1PriceType {
	return OptV1PriceType{
		Value: v,
		Set:   true,
	}
}

// OptV1PriceType is optional V1PriceType.
type OptV1PriceType struct {
	Value V1PriceType
	Set   bool
}

// IsSet returns true if OptV1PriceType was set.
func (o OptV1PriceType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1PriceType) Reset() {
	var v V1PriceType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1PriceType) SetTo(v V1PriceType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1PriceType) Get() (v V1PriceType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1PriceType) Or(d V1PriceType) V1PriceType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Quotation returns new OptV1Quotation with value set to v.
func NewOptV1Quotation(v V1Quotation) OptV1Quotation {
	return OptV1Quotation{
		Value: v,
		Set:   true,
	}
}

// OptV1Quotation is optional V1Quotation.
type OptV1Quotation struct {
	Value V1Quotation
	Set   bool
}

// IsSet returns true if OptV1Quotation was set.
func (o OptV1Quotation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Quotation) Reset() {
	var v V1Quotation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Quotation) SetTo(v V1Quotation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Quotation) Get() (v V1Quotation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Quotation) Or(d V1Quotation) V1Quotation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1RealExchange returns new OptV1RealExchange with value set to v.
func NewOptV1RealExchange(v V1RealExchange) OptV1RealExchange {
	return OptV1RealExchange{
		Value: v,
		Set:   true,
	}
}

// OptV1RealExchange is optional V1RealExchange.
type OptV1RealExchange struct {
	Value V1RealExchange
	Set   bool
}

// IsSet returns true if OptV1RealExchange was set.
func (o OptV1RealExchange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1RealExchange) Reset() {
	var v V1RealExchange
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1RealExchange) SetTo(v V1RealExchange) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1RealExchange) Get() (v V1RealExchange, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1RealExchange) Or(d V1RealExchange) V1RealExchange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1RiskLevel returns new OptV1RiskLevel with value set to v.
func NewOptV1RiskLevel(v V1RiskLevel) OptV1RiskLevel {
	return OptV1RiskLevel{
		Value: v,
		Set:   true,
	}
}

// OptV1RiskLevel is optional V1RiskLevel.
type OptV1RiskLevel struct {
	Value V1RiskLevel
	Set   bool
}

// IsSet returns true if OptV1RiskLevel was set.
func (o OptV1RiskLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1RiskLevel) Reset() {
	var v V1RiskLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1RiskLevel) SetTo(v V1RiskLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1RiskLevel) Get() (v V1RiskLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1RiskLevel) Or(d V1RiskLevel) V1RiskLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1SecurityTradingStatus returns new OptV1SecurityTradingStatus with value set to v.
func NewOptV1SecurityTradingStatus(v V1SecurityTradingStatus) OptV1SecurityTradingStatus {
	return OptV1SecurityTradingStatus{
		Value: v,
		Set:   true,
	}
}

// OptV1SecurityTradingStatus is optional V1SecurityTradingStatus.
type OptV1SecurityTradingStatus struct {
	Value V1SecurityTradingStatus
	Set   bool
}

// IsSet returns true if OptV1SecurityTradingStatus was set.
func (o OptV1SecurityTradingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1SecurityTradingStatus) Reset() {
	var v V1SecurityTradingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1SecurityTradingStatus) SetTo(v V1SecurityTradingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1SecurityTradingStatus) Get() (v V1SecurityTradingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1SecurityTradingStatus) Or(d V1SecurityTradingStatus) V1SecurityTradingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1Share returns new OptV1Share with value set to v.
func NewOptV1Share(v V1Share) OptV1Share {
	return OptV1Share{
		Value: v,
		Set:   true,
	}
}

// OptV1Share is optional V1Share.
type OptV1Share struct {
	Value V1Share
	Set   bool
}

// IsSet returns true if OptV1Share was set.
func (o OptV1Share) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1Share) Reset() {
	var v V1Share
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1Share) SetTo(v V1Share) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1Share) Get() (v V1Share, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1Share) Or(d V1Share) V1Share {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1ShareType returns new OptV1ShareType with value set to v.
func NewOptV1ShareType(v V1ShareType) OptV1ShareType {
	return OptV1ShareType{
		Value: v,
		Set:   true,
	}
}

// OptV1ShareType is optional V1ShareType.
type OptV1ShareType struct {
	Value V1ShareType
	Set   bool
}

// IsSet returns true if OptV1ShareType was set.
func (o OptV1ShareType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1ShareType) Reset() {
	var v V1ShareType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1ShareType) SetTo(v V1ShareType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1ShareType) Get() (v V1ShareType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1ShareType) Or(d V1ShareType) V1ShareType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1StopOrderDirection returns new OptV1StopOrderDirection with value set to v.
func NewOptV1StopOrderDirection(v V1StopOrderDirection) OptV1StopOrderDirection {
	return OptV1StopOrderDirection{
		Value: v,
		Set:   true,
	}
}

// OptV1StopOrderDirection is optional V1StopOrderDirection.
type OptV1StopOrderDirection struct {
	Value V1StopOrderDirection
	Set   bool
}

// IsSet returns true if OptV1StopOrderDirection was set.
func (o OptV1StopOrderDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1StopOrderDirection) Reset() {
	var v V1StopOrderDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1StopOrderDirection) SetTo(v V1StopOrderDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1StopOrderDirection) Get() (v V1StopOrderDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1StopOrderDirection) Or(d V1StopOrderDirection) V1StopOrderDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1StopOrderExpirationType returns new OptV1StopOrderExpirationType with value set to v.
func NewOptV1StopOrderExpirationType(v V1StopOrderExpirationType) OptV1StopOrderExpirationType {
	return OptV1StopOrderExpirationType{
		Value: v,
		Set:   true,
	}
}

// OptV1StopOrderExpirationType is optional V1StopOrderExpirationType.
type OptV1StopOrderExpirationType struct {
	Value V1StopOrderExpirationType
	Set   bool
}

// IsSet returns true if OptV1StopOrderExpirationType was set.
func (o OptV1StopOrderExpirationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1StopOrderExpirationType) Reset() {
	var v V1StopOrderExpirationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1StopOrderExpirationType) SetTo(v V1StopOrderExpirationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1StopOrderExpirationType) Get() (v V1StopOrderExpirationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1StopOrderExpirationType) Or(d V1StopOrderExpirationType) V1StopOrderExpirationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1StopOrderType returns new OptV1StopOrderType with value set to v.
func NewOptV1StopOrderType(v V1StopOrderType) OptV1StopOrderType {
	return OptV1StopOrderType{
		Value: v,
		Set:   true,
	}
}

// OptV1StopOrderType is optional V1StopOrderType.
type OptV1StopOrderType struct {
	Value V1StopOrderType
	Set   bool
}

// IsSet returns true if OptV1StopOrderType was set.
func (o OptV1StopOrderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1StopOrderType) Reset() {
	var v V1StopOrderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1StopOrderType) SetTo(v V1StopOrderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1StopOrderType) Get() (v V1StopOrderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1StopOrderType) Or(d V1StopOrderType) V1StopOrderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1StructuredProductType returns new OptV1StructuredProductType with value set to v.
func NewOptV1StructuredProductType(v V1StructuredProductType) OptV1StructuredProductType {
	return OptV1StructuredProductType{
		Value: v,
		Set:   true,
	}
}

// OptV1StructuredProductType is optional V1StructuredProductType.
type OptV1StructuredProductType struct {
	Value V1StructuredProductType
	Set   bool
}

// IsSet returns true if OptV1StructuredProductType was set.
func (o OptV1StructuredProductType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1StructuredProductType) Reset() {
	var v V1StructuredProductType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1StructuredProductType) SetTo(v V1StructuredProductType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1StructuredProductType) Get() (v V1StructuredProductType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1StructuredProductType) Or(d V1StructuredProductType) V1StructuredProductType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1TradeDirection returns new OptV1TradeDirection with value set to v.
func NewOptV1TradeDirection(v V1TradeDirection) OptV1TradeDirection {
	return OptV1TradeDirection{
		Value: v,
		Set:   true,
	}
}

// OptV1TradeDirection is optional V1TradeDirection.
type OptV1TradeDirection struct {
	Value V1TradeDirection
	Set   bool
}

// IsSet returns true if OptV1TradeDirection was set.
func (o OptV1TradeDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1TradeDirection) Reset() {
	var v V1TradeDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1TradeDirection) SetTo(v V1TradeDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1TradeDirection) Get() (v V1TradeDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1TradeDirection) Or(d V1TradeDirection) V1TradeDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PortfolioRequestCurrencyRequest
type PortfolioRequestCurrencyRequest string

const (
	PortfolioRequestCurrencyRequestRUB PortfolioRequestCurrencyRequest = "RUB"
	PortfolioRequestCurrencyRequestUSD PortfolioRequestCurrencyRequest = "USD"
	PortfolioRequestCurrencyRequestEUR PortfolioRequestCurrencyRequest = "EUR"
)

// MarshalText implements encoding.TextMarshaler.
func (s PortfolioRequestCurrencyRequest) MarshalText() ([]byte, error) {
	switch s {
	case PortfolioRequestCurrencyRequestRUB:
		return []byte(s), nil
	case PortfolioRequestCurrencyRequestUSD:
		return []byte(s), nil
	case PortfolioRequestCurrencyRequestEUR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortfolioRequestCurrencyRequest) UnmarshalText(data []byte) error {
	switch PortfolioRequestCurrencyRequest(data) {
	case PortfolioRequestCurrencyRequestRUB:
		*s = PortfolioRequestCurrencyRequestRUB
		return nil
	case PortfolioRequestCurrencyRequestUSD:
		*s = PortfolioRequestCurrencyRequestUSD
		return nil
	case PortfolioRequestCurrencyRequestEUR:
		*s = PortfolioRequestCurrencyRequestEUR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/protobufAny
type ProtobufAny struct {
	TypeUrl OptString `json:"typeUrl"`
	Value   []byte    `json:"value"`
}

// GetTypeUrl returns the value of TypeUrl.
func (s *ProtobufAny) GetTypeUrl() OptString {
	return s.TypeUrl
}

// GetValue returns the value of Value.
func (s *ProtobufAny) GetValue() []byte {
	return s.Value
}

// SetTypeUrl sets the value of TypeUrl.
func (s *ProtobufAny) SetTypeUrl(val OptString) {
	s.TypeUrl = val
}

// SetValue sets the value of Value.
func (s *ProtobufAny) SetValue(val []byte) {
	s.Value = val
}

// Ref: #/components/schemas/rpcStatus
type RpcStatus struct {
	Code    OptInt32      `json:"code"`
	Message OptString     `json:"message"`
	Details []ProtobufAny `json:"details"`
}

// GetCode returns the value of Code.
func (s *RpcStatus) GetCode() OptInt32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RpcStatus) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *RpcStatus) GetDetails() []ProtobufAny {
	return s.Details
}

// SetCode sets the value of Code.
func (s *RpcStatus) SetCode(val OptInt32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RpcStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *RpcStatus) SetDetails(val []ProtobufAny) {
	s.Details = val
}

// RpcStatusStatusCode wraps RpcStatus with StatusCode.
type RpcStatusStatusCode struct {
	StatusCode int
	Response   RpcStatus
}

// GetStatusCode returns the value of StatusCode.
func (s *RpcStatusStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *RpcStatusStatusCode) GetResponse() RpcStatus {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *RpcStatusStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *RpcStatusStatusCode) SetResponse(val RpcStatus) {
	s.Response = val
}

func (*RpcStatusStatusCode) instrumentsServiceBondByRes()                   {}
func (*RpcStatusStatusCode) instrumentsServiceBondsRes()                    {}
func (*RpcStatusStatusCode) instrumentsServiceCurrenciesRes()               {}
func (*RpcStatusStatusCode) instrumentsServiceCurrencyByRes()               {}
func (*RpcStatusStatusCode) instrumentsServiceEditFavoritesRes()            {}
func (*RpcStatusStatusCode) instrumentsServiceEtfByRes()                    {}
func (*RpcStatusStatusCode) instrumentsServiceEtfsRes()                     {}
func (*RpcStatusStatusCode) instrumentsServiceFindInstrumentRes()           {}
func (*RpcStatusStatusCode) instrumentsServiceFutureByRes()                 {}
func (*RpcStatusStatusCode) instrumentsServiceFuturesRes()                  {}
func (*RpcStatusStatusCode) instrumentsServiceGetAccruedInterestsRes()      {}
func (*RpcStatusStatusCode) instrumentsServiceGetAssetByRes()               {}
func (*RpcStatusStatusCode) instrumentsServiceGetAssetsRes()                {}
func (*RpcStatusStatusCode) instrumentsServiceGetBondCouponsRes()           {}
func (*RpcStatusStatusCode) instrumentsServiceGetBrandByRes()               {}
func (*RpcStatusStatusCode) instrumentsServiceGetBrandsRes()                {}
func (*RpcStatusStatusCode) instrumentsServiceGetCountriesRes()             {}
func (*RpcStatusStatusCode) instrumentsServiceGetDividendsRes()             {}
func (*RpcStatusStatusCode) instrumentsServiceGetFavoritesRes()             {}
func (*RpcStatusStatusCode) instrumentsServiceGetFuturesMarginRes()         {}
func (*RpcStatusStatusCode) instrumentsServiceGetInstrumentByRes()          {}
func (*RpcStatusStatusCode) instrumentsServiceOptionByRes()                 {}
func (*RpcStatusStatusCode) instrumentsServiceOptionsRes()                  {}
func (*RpcStatusStatusCode) instrumentsServiceShareByRes()                  {}
func (*RpcStatusStatusCode) instrumentsServiceSharesRes()                   {}
func (*RpcStatusStatusCode) instrumentsServiceTradingSchedulesRes()         {}
func (*RpcStatusStatusCode) marketDataServiceGetCandlesRes()                {}
func (*RpcStatusStatusCode) marketDataServiceGetClosePricesRes()            {}
func (*RpcStatusStatusCode) marketDataServiceGetLastPricesRes()             {}
func (*RpcStatusStatusCode) marketDataServiceGetLastTradesRes()             {}
func (*RpcStatusStatusCode) marketDataServiceGetOrderBookRes()              {}
func (*RpcStatusStatusCode) marketDataServiceGetTradingStatusRes()          {}
func (*RpcStatusStatusCode) marketDataServiceGetTradingStatusesRes()        {}
func (*RpcStatusStatusCode) operationsServiceGetBrokerReportRes()           {}
func (*RpcStatusStatusCode) operationsServiceGetDividendsForeignIssuerRes() {}
func (*RpcStatusStatusCode) operationsServiceGetOperationsByCursorRes()     {}
func (*RpcStatusStatusCode) operationsServiceGetOperationsRes()             {}
func (*RpcStatusStatusCode) operationsServiceGetPortfolioRes()              {}
func (*RpcStatusStatusCode) operationsServiceGetPositionsRes()              {}
func (*RpcStatusStatusCode) operationsServiceGetWithdrawLimitsRes()         {}
func (*RpcStatusStatusCode) ordersServiceCancelOrderRes()                   {}
func (*RpcStatusStatusCode) ordersServiceGetOrderStateRes()                 {}
func (*RpcStatusStatusCode) ordersServiceGetOrdersRes()                     {}
func (*RpcStatusStatusCode) ordersServicePostOrderRes()                     {}
func (*RpcStatusStatusCode) ordersServiceReplaceOrderRes()                  {}
func (*RpcStatusStatusCode) sandboxServiceCancelSandboxOrderRes()           {}
func (*RpcStatusStatusCode) sandboxServiceCloseSandboxAccountRes()          {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxAccountsRes()           {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxOperationsByCursorRes() {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxOperationsRes()         {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxOrderStateRes()         {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxOrdersRes()             {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxPortfolioRes()          {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxPositionsRes()          {}
func (*RpcStatusStatusCode) sandboxServiceGetSandboxWithdrawLimitsRes()     {}
func (*RpcStatusStatusCode) sandboxServiceOpenSandboxAccountRes()           {}
func (*RpcStatusStatusCode) sandboxServicePostSandboxOrderRes()             {}
func (*RpcStatusStatusCode) sandboxServiceReplaceSandboxOrderRes()          {}
func (*RpcStatusStatusCode) sandboxServiceSandboxPayInRes()                 {}
func (*RpcStatusStatusCode) stopOrdersServiceCancelStopOrderRes()           {}
func (*RpcStatusStatusCode) stopOrdersServiceGetStopOrdersRes()             {}
func (*RpcStatusStatusCode) stopOrdersServicePostStopOrderRes()             {}
func (*RpcStatusStatusCode) usersServiceGetAccountsRes()                    {}
func (*RpcStatusStatusCode) usersServiceGetInfoRes()                        {}
func (*RpcStatusStatusCode) usersServiceGetMarginAttributesRes()            {}
func (*RpcStatusStatusCode) usersServiceGetUserTariffRes()                  {}

// Уровень доступа к счёту.
// Ref: #/components/schemas/v1AccessLevel
type V1AccessLevel string

const (
	V1AccessLevelACCOUNTACCESSLEVELUNSPECIFIED V1AccessLevel = "ACCOUNT_ACCESS_LEVEL_UNSPECIFIED"
	V1AccessLevelACCOUNTACCESSLEVELFULLACCESS  V1AccessLevel = "ACCOUNT_ACCESS_LEVEL_FULL_ACCESS"
	V1AccessLevelACCOUNTACCESSLEVELREADONLY    V1AccessLevel = "ACCOUNT_ACCESS_LEVEL_READ_ONLY"
	V1AccessLevelACCOUNTACCESSLEVELNOACCESS    V1AccessLevel = "ACCOUNT_ACCESS_LEVEL_NO_ACCESS"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1AccessLevel) MarshalText() ([]byte, error) {
	switch s {
	case V1AccessLevelACCOUNTACCESSLEVELUNSPECIFIED:
		return []byte(s), nil
	case V1AccessLevelACCOUNTACCESSLEVELFULLACCESS:
		return []byte(s), nil
	case V1AccessLevelACCOUNTACCESSLEVELREADONLY:
		return []byte(s), nil
	case V1AccessLevelACCOUNTACCESSLEVELNOACCESS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1AccessLevel) UnmarshalText(data []byte) error {
	switch V1AccessLevel(data) {
	case V1AccessLevelACCOUNTACCESSLEVELUNSPECIFIED:
		*s = V1AccessLevelACCOUNTACCESSLEVELUNSPECIFIED
		return nil
	case V1AccessLevelACCOUNTACCESSLEVELFULLACCESS:
		*s = V1AccessLevelACCOUNTACCESSLEVELFULLACCESS
		return nil
	case V1AccessLevelACCOUNTACCESSLEVELREADONLY:
		*s = V1AccessLevelACCOUNTACCESSLEVELREADONLY
		return nil
	case V1AccessLevelACCOUNTACCESSLEVELNOACCESS:
		*s = V1AccessLevelACCOUNTACCESSLEVELNOACCESS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Информация о счёте.
// Ref: #/components/schemas/v1Account
type V1Account struct {
	// Идентификатор счёта.
	ID   OptString        `json:"id"`
	Type OptV1AccountType `json:"type"`
	// Название счёта.
	Name   OptString          `json:"name"`
	Status OptV1AccountStatus `json:"status"`
	// Дата открытия счёта в часовом поясе UTC.
	OpenedDate OptDateTime `json:"openedDate"`
	// Дата закрытия счёта в часовом поясе UTC.
	ClosedDate  OptDateTime      `json:"closedDate"`
	AccessLevel OptV1AccessLevel `json:"accessLevel"`
}

// GetID returns the value of ID.
func (s *V1Account) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *V1Account) GetType() OptV1AccountType {
	return s.Type
}

// GetName returns the value of Name.
func (s *V1Account) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *V1Account) GetStatus() OptV1AccountStatus {
	return s.Status
}

// GetOpenedDate returns the value of OpenedDate.
func (s *V1Account) GetOpenedDate() OptDateTime {
	return s.OpenedDate
}

// GetClosedDate returns the value of ClosedDate.
func (s *V1Account) GetClosedDate() OptDateTime {
	return s.ClosedDate
}

// GetAccessLevel returns the value of AccessLevel.
func (s *V1Account) GetAccessLevel() OptV1AccessLevel {
	return s.AccessLevel
}

// SetID sets the value of ID.
func (s *V1Account) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *V1Account) SetType(val OptV1AccountType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *V1Account) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *V1Account) SetStatus(val OptV1AccountStatus) {
	s.Status = val
}

// SetOpenedDate sets the value of OpenedDate.
func (s *V1Account) SetOpenedDate(val OptDateTime) {
	s.OpenedDate = val
}

// SetClosedDate sets the value of ClosedDate.
func (s *V1Account) SetClosedDate(val OptDateTime) {
	s.ClosedDate = val
}

// SetAccessLevel sets the value of AccessLevel.
func (s *V1Account) SetAccessLevel(val OptV1AccessLevel) {
	s.AccessLevel = val
}

// Статус счёта.
// Ref: #/components/schemas/v1AccountStatus
type V1AccountStatus string

const (
	V1AccountStatusACCOUNTSTATUSUNSPECIFIED V1AccountStatus = "ACCOUNT_STATUS_UNSPECIFIED"
	V1AccountStatusACCOUNTSTATUSNEW         V1AccountStatus = "ACCOUNT_STATUS_NEW"
	V1AccountStatusACCOUNTSTATUSOPEN        V1AccountStatus = "ACCOUNT_STATUS_OPEN"
	V1AccountStatusACCOUNTSTATUSCLOSED      V1AccountStatus = "ACCOUNT_STATUS_CLOSED"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1AccountStatus) MarshalText() ([]byte, error) {
	switch s {
	case V1AccountStatusACCOUNTSTATUSUNSPECIFIED:
		return []byte(s), nil
	case V1AccountStatusACCOUNTSTATUSNEW:
		return []byte(s), nil
	case V1AccountStatusACCOUNTSTATUSOPEN:
		return []byte(s), nil
	case V1AccountStatusACCOUNTSTATUSCLOSED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1AccountStatus) UnmarshalText(data []byte) error {
	switch V1AccountStatus(data) {
	case V1AccountStatusACCOUNTSTATUSUNSPECIFIED:
		*s = V1AccountStatusACCOUNTSTATUSUNSPECIFIED
		return nil
	case V1AccountStatusACCOUNTSTATUSNEW:
		*s = V1AccountStatusACCOUNTSTATUSNEW
		return nil
	case V1AccountStatusACCOUNTSTATUSOPEN:
		*s = V1AccountStatusACCOUNTSTATUSOPEN
		return nil
	case V1AccountStatusACCOUNTSTATUSCLOSED:
		*s = V1AccountStatusACCOUNTSTATUSCLOSED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип счёта.
// Ref: #/components/schemas/v1AccountType
type V1AccountType string

const (
	V1AccountTypeACCOUNTTYPEUNSPECIFIED V1AccountType = "ACCOUNT_TYPE_UNSPECIFIED"
	V1AccountTypeACCOUNTTYPETINKOFF     V1AccountType = "ACCOUNT_TYPE_TINKOFF"
	V1AccountTypeACCOUNTTYPETINKOFFIIS  V1AccountType = "ACCOUNT_TYPE_TINKOFF_IIS"
	V1AccountTypeACCOUNTTYPEINVESTBOX   V1AccountType = "ACCOUNT_TYPE_INVEST_BOX"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1AccountType) MarshalText() ([]byte, error) {
	switch s {
	case V1AccountTypeACCOUNTTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1AccountTypeACCOUNTTYPETINKOFF:
		return []byte(s), nil
	case V1AccountTypeACCOUNTTYPETINKOFFIIS:
		return []byte(s), nil
	case V1AccountTypeACCOUNTTYPEINVESTBOX:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1AccountType) UnmarshalText(data []byte) error {
	switch V1AccountType(data) {
	case V1AccountTypeACCOUNTTYPEUNSPECIFIED:
		*s = V1AccountTypeACCOUNTTYPEUNSPECIFIED
		return nil
	case V1AccountTypeACCOUNTTYPETINKOFF:
		*s = V1AccountTypeACCOUNTTYPETINKOFF
		return nil
	case V1AccountTypeACCOUNTTYPETINKOFFIIS:
		*s = V1AccountTypeACCOUNTTYPETINKOFFIIS
		return nil
	case V1AccountTypeACCOUNTTYPEINVESTBOX:
		*s = V1AccountTypeACCOUNTTYPEINVESTBOX
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Операция начисления купонов.
// Ref: #/components/schemas/v1AccruedInterest
type V1AccruedInterest struct {
	Date         OptDateTime    `json:"date"`
	Value        OptV1Quotation `json:"value"`
	ValuePercent OptV1Quotation `json:"valuePercent"`
	Nominal      OptV1Quotation `json:"nominal"`
}

// GetDate returns the value of Date.
func (s *V1AccruedInterest) GetDate() OptDateTime {
	return s.Date
}

// GetValue returns the value of Value.
func (s *V1AccruedInterest) GetValue() OptV1Quotation {
	return s.Value
}

// GetValuePercent returns the value of ValuePercent.
func (s *V1AccruedInterest) GetValuePercent() OptV1Quotation {
	return s.ValuePercent
}

// GetNominal returns the value of Nominal.
func (s *V1AccruedInterest) GetNominal() OptV1Quotation {
	return s.Nominal
}

// SetDate sets the value of Date.
func (s *V1AccruedInterest) SetDate(val OptDateTime) {
	s.Date = val
}

// SetValue sets the value of Value.
func (s *V1AccruedInterest) SetValue(val OptV1Quotation) {
	s.Value = val
}

// SetValuePercent sets the value of ValuePercent.
func (s *V1AccruedInterest) SetValuePercent(val OptV1Quotation) {
	s.ValuePercent = val
}

// SetNominal sets the value of Nominal.
func (s *V1AccruedInterest) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// Информация об активе.
// Ref: #/components/schemas/v1Asset
type V1Asset struct {
	UID         OptString           `json:"uid"`
	Type        OptV1AssetType      `json:"type"`
	Name        OptString           `json:"name"`
	Instruments []V1AssetInstrument `json:"instruments"`
}

// GetUID returns the value of UID.
func (s *V1Asset) GetUID() OptString {
	return s.UID
}

// GetType returns the value of Type.
func (s *V1Asset) GetType() OptV1AssetType {
	return s.Type
}

// GetName returns the value of Name.
func (s *V1Asset) GetName() OptString {
	return s.Name
}

// GetInstruments returns the value of Instruments.
func (s *V1Asset) GetInstruments() []V1AssetInstrument {
	return s.Instruments
}

// SetUID sets the value of UID.
func (s *V1Asset) SetUID(val OptString) {
	s.UID = val
}

// SetType sets the value of Type.
func (s *V1Asset) SetType(val OptV1AssetType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *V1Asset) SetName(val OptString) {
	s.Name = val
}

// SetInstruments sets the value of Instruments.
func (s *V1Asset) SetInstruments(val []V1AssetInstrument) {
	s.Instruments = val
}

// Облигация.
// Ref: #/components/schemas/v1AssetBond
type V1AssetBond struct {
	CurrentNominal        OptV1Quotation `json:"currentNominal"`
	BorrowName            OptString      `json:"borrowName"`
	IssueSize             OptV1Quotation `json:"issueSize"`
	Nominal               OptV1Quotation `json:"nominal"`
	NominalCurrency       OptString      `json:"nominalCurrency"`
	IssueKind             OptString      `json:"issueKind"`
	InterestKind          OptString      `json:"interestKind"`
	CouponQuantityPerYear OptInt32       `json:"couponQuantityPerYear"`
	IndexedNominalFlag    OptBool        `json:"indexedNominalFlag"`
	SubordinatedFlag      OptBool        `json:"subordinatedFlag"`
	CollateralFlag        OptBool        `json:"collateralFlag"`
	TaxFreeFlag           OptBool        `json:"taxFreeFlag"`
	AmortizationFlag      OptBool        `json:"amortizationFlag"`
	FloatingCouponFlag    OptBool        `json:"floatingCouponFlag"`
	PerpetualFlag         OptBool        `json:"perpetualFlag"`
	MaturityDate          OptDateTime    `json:"maturityDate"`
	ReturnCondition       OptString      `json:"returnCondition"`
	StateRegDate          OptDateTime    `json:"stateRegDate"`
	PlacementDate         OptDateTime    `json:"placementDate"`
	PlacementPrice        OptV1Quotation `json:"placementPrice"`
	IssueSizePlan         OptV1Quotation `json:"issueSizePlan"`
}

// GetCurrentNominal returns the value of CurrentNominal.
func (s *V1AssetBond) GetCurrentNominal() OptV1Quotation {
	return s.CurrentNominal
}

// GetBorrowName returns the value of BorrowName.
func (s *V1AssetBond) GetBorrowName() OptString {
	return s.BorrowName
}

// GetIssueSize returns the value of IssueSize.
func (s *V1AssetBond) GetIssueSize() OptV1Quotation {
	return s.IssueSize
}

// GetNominal returns the value of Nominal.
func (s *V1AssetBond) GetNominal() OptV1Quotation {
	return s.Nominal
}

// GetNominalCurrency returns the value of NominalCurrency.
func (s *V1AssetBond) GetNominalCurrency() OptString {
	return s.NominalCurrency
}

// GetIssueKind returns the value of IssueKind.
func (s *V1AssetBond) GetIssueKind() OptString {
	return s.IssueKind
}

// GetInterestKind returns the value of InterestKind.
func (s *V1AssetBond) GetInterestKind() OptString {
	return s.InterestKind
}

// GetCouponQuantityPerYear returns the value of CouponQuantityPerYear.
func (s *V1AssetBond) GetCouponQuantityPerYear() OptInt32 {
	return s.CouponQuantityPerYear
}

// GetIndexedNominalFlag returns the value of IndexedNominalFlag.
func (s *V1AssetBond) GetIndexedNominalFlag() OptBool {
	return s.IndexedNominalFlag
}

// GetSubordinatedFlag returns the value of SubordinatedFlag.
func (s *V1AssetBond) GetSubordinatedFlag() OptBool {
	return s.SubordinatedFlag
}

// GetCollateralFlag returns the value of CollateralFlag.
func (s *V1AssetBond) GetCollateralFlag() OptBool {
	return s.CollateralFlag
}

// GetTaxFreeFlag returns the value of TaxFreeFlag.
func (s *V1AssetBond) GetTaxFreeFlag() OptBool {
	return s.TaxFreeFlag
}

// GetAmortizationFlag returns the value of AmortizationFlag.
func (s *V1AssetBond) GetAmortizationFlag() OptBool {
	return s.AmortizationFlag
}

// GetFloatingCouponFlag returns the value of FloatingCouponFlag.
func (s *V1AssetBond) GetFloatingCouponFlag() OptBool {
	return s.FloatingCouponFlag
}

// GetPerpetualFlag returns the value of PerpetualFlag.
func (s *V1AssetBond) GetPerpetualFlag() OptBool {
	return s.PerpetualFlag
}

// GetMaturityDate returns the value of MaturityDate.
func (s *V1AssetBond) GetMaturityDate() OptDateTime {
	return s.MaturityDate
}

// GetReturnCondition returns the value of ReturnCondition.
func (s *V1AssetBond) GetReturnCondition() OptString {
	return s.ReturnCondition
}

// GetStateRegDate returns the value of StateRegDate.
func (s *V1AssetBond) GetStateRegDate() OptDateTime {
	return s.StateRegDate
}

// GetPlacementDate returns the value of PlacementDate.
func (s *V1AssetBond) GetPlacementDate() OptDateTime {
	return s.PlacementDate
}

// GetPlacementPrice returns the value of PlacementPrice.
func (s *V1AssetBond) GetPlacementPrice() OptV1Quotation {
	return s.PlacementPrice
}

// GetIssueSizePlan returns the value of IssueSizePlan.
func (s *V1AssetBond) GetIssueSizePlan() OptV1Quotation {
	return s.IssueSizePlan
}

// SetCurrentNominal sets the value of CurrentNominal.
func (s *V1AssetBond) SetCurrentNominal(val OptV1Quotation) {
	s.CurrentNominal = val
}

// SetBorrowName sets the value of BorrowName.
func (s *V1AssetBond) SetBorrowName(val OptString) {
	s.BorrowName = val
}

// SetIssueSize sets the value of IssueSize.
func (s *V1AssetBond) SetIssueSize(val OptV1Quotation) {
	s.IssueSize = val
}

// SetNominal sets the value of Nominal.
func (s *V1AssetBond) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// SetNominalCurrency sets the value of NominalCurrency.
func (s *V1AssetBond) SetNominalCurrency(val OptString) {
	s.NominalCurrency = val
}

// SetIssueKind sets the value of IssueKind.
func (s *V1AssetBond) SetIssueKind(val OptString) {
	s.IssueKind = val
}

// SetInterestKind sets the value of InterestKind.
func (s *V1AssetBond) SetInterestKind(val OptString) {
	s.InterestKind = val
}

// SetCouponQuantityPerYear sets the value of CouponQuantityPerYear.
func (s *V1AssetBond) SetCouponQuantityPerYear(val OptInt32) {
	s.CouponQuantityPerYear = val
}

// SetIndexedNominalFlag sets the value of IndexedNominalFlag.
func (s *V1AssetBond) SetIndexedNominalFlag(val OptBool) {
	s.IndexedNominalFlag = val
}

// SetSubordinatedFlag sets the value of SubordinatedFlag.
func (s *V1AssetBond) SetSubordinatedFlag(val OptBool) {
	s.SubordinatedFlag = val
}

// SetCollateralFlag sets the value of CollateralFlag.
func (s *V1AssetBond) SetCollateralFlag(val OptBool) {
	s.CollateralFlag = val
}

// SetTaxFreeFlag sets the value of TaxFreeFlag.
func (s *V1AssetBond) SetTaxFreeFlag(val OptBool) {
	s.TaxFreeFlag = val
}

// SetAmortizationFlag sets the value of AmortizationFlag.
func (s *V1AssetBond) SetAmortizationFlag(val OptBool) {
	s.AmortizationFlag = val
}

// SetFloatingCouponFlag sets the value of FloatingCouponFlag.
func (s *V1AssetBond) SetFloatingCouponFlag(val OptBool) {
	s.FloatingCouponFlag = val
}

// SetPerpetualFlag sets the value of PerpetualFlag.
func (s *V1AssetBond) SetPerpetualFlag(val OptBool) {
	s.PerpetualFlag = val
}

// SetMaturityDate sets the value of MaturityDate.
func (s *V1AssetBond) SetMaturityDate(val OptDateTime) {
	s.MaturityDate = val
}

// SetReturnCondition sets the value of ReturnCondition.
func (s *V1AssetBond) SetReturnCondition(val OptString) {
	s.ReturnCondition = val
}

// SetStateRegDate sets the value of StateRegDate.
func (s *V1AssetBond) SetStateRegDate(val OptDateTime) {
	s.StateRegDate = val
}

// SetPlacementDate sets the value of PlacementDate.
func (s *V1AssetBond) SetPlacementDate(val OptDateTime) {
	s.PlacementDate = val
}

// SetPlacementPrice sets the value of PlacementPrice.
func (s *V1AssetBond) SetPlacementPrice(val OptV1Quotation) {
	s.PlacementPrice = val
}

// SetIssueSizePlan sets the value of IssueSizePlan.
func (s *V1AssetBond) SetIssueSizePlan(val OptV1Quotation) {
	s.IssueSizePlan = val
}

// Клиринговый сертификат участия.
// Ref: #/components/schemas/v1AssetClearingCertificate
type V1AssetClearingCertificate struct {
	Nominal         OptV1Quotation `json:"nominal"`
	NominalCurrency OptString      `json:"nominalCurrency"`
}

// GetNominal returns the value of Nominal.
func (s *V1AssetClearingCertificate) GetNominal() OptV1Quotation {
	return s.Nominal
}

// GetNominalCurrency returns the value of NominalCurrency.
func (s *V1AssetClearingCertificate) GetNominalCurrency() OptString {
	return s.NominalCurrency
}

// SetNominal sets the value of Nominal.
func (s *V1AssetClearingCertificate) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// SetNominalCurrency sets the value of NominalCurrency.
func (s *V1AssetClearingCertificate) SetNominalCurrency(val OptString) {
	s.NominalCurrency = val
}

// Валюта.
// Ref: #/components/schemas/v1AssetCurrency
type V1AssetCurrency struct {
	BaseCurrency OptString `json:"baseCurrency"`
}

// GetBaseCurrency returns the value of BaseCurrency.
func (s *V1AssetCurrency) GetBaseCurrency() OptString {
	return s.BaseCurrency
}

// SetBaseCurrency sets the value of BaseCurrency.
func (s *V1AssetCurrency) SetBaseCurrency(val OptString) {
	s.BaseCurrency = val
}

// Фонд.
// Ref: #/components/schemas/v1AssetEtf
type V1AssetEtf struct {
	TotalExpense              OptV1Quotation `json:"totalExpense"`
	HurdleRate                OptV1Quotation `json:"hurdleRate"`
	PerformanceFee            OptV1Quotation `json:"performanceFee"`
	FixedCommission           OptV1Quotation `json:"fixedCommission"`
	PaymentType               OptString      `json:"paymentType"`
	WatermarkFlag             OptBool        `json:"watermarkFlag"`
	BuyPremium                OptV1Quotation `json:"buyPremium"`
	SellDiscount              OptV1Quotation `json:"sellDiscount"`
	RebalancingFlag           OptBool        `json:"rebalancingFlag"`
	RebalancingFreq           OptString      `json:"rebalancingFreq"`
	ManagementType            OptString      `json:"managementType"`
	PrimaryIndex              OptString      `json:"primaryIndex"`
	FocusType                 OptString      `json:"focusType"`
	LeveragedFlag             OptBool        `json:"leveragedFlag"`
	NumShare                  OptV1Quotation `json:"numShare"`
	UcitsFlag                 OptBool        `json:"ucitsFlag"`
	ReleasedDate              OptDateTime    `json:"releasedDate"`
	Description               OptString      `json:"description"`
	PrimaryIndexDescription   OptString      `json:"primaryIndexDescription"`
	PrimaryIndexCompany       OptString      `json:"primaryIndexCompany"`
	IndexRecoveryPeriod       OptV1Quotation `json:"indexRecoveryPeriod"`
	InavCode                  OptString      `json:"inavCode"`
	DivYieldFlag              OptBool        `json:"divYieldFlag"`
	ExpenseCommission         OptV1Quotation `json:"expenseCommission"`
	PrimaryIndexTrackingError OptV1Quotation `json:"primaryIndexTrackingError"`
	RebalancingPlan           OptString      `json:"rebalancingPlan"`
	TaxRate                   OptString      `json:"taxRate"`
	RebalancingDates          []time.Time    `json:"rebalancingDates"`
	IssueKind                 OptString      `json:"issueKind"`
	Nominal                   OptV1Quotation `json:"nominal"`
	NominalCurrency           OptString      `json:"nominalCurrency"`
}

// GetTotalExpense returns the value of TotalExpense.
func (s *V1AssetEtf) GetTotalExpense() OptV1Quotation {
	return s.TotalExpense
}

// GetHurdleRate returns the value of HurdleRate.
func (s *V1AssetEtf) GetHurdleRate() OptV1Quotation {
	return s.HurdleRate
}

// GetPerformanceFee returns the value of PerformanceFee.
func (s *V1AssetEtf) GetPerformanceFee() OptV1Quotation {
	return s.PerformanceFee
}

// GetFixedCommission returns the value of FixedCommission.
func (s *V1AssetEtf) GetFixedCommission() OptV1Quotation {
	return s.FixedCommission
}

// GetPaymentType returns the value of PaymentType.
func (s *V1AssetEtf) GetPaymentType() OptString {
	return s.PaymentType
}

// GetWatermarkFlag returns the value of WatermarkFlag.
func (s *V1AssetEtf) GetWatermarkFlag() OptBool {
	return s.WatermarkFlag
}

// GetBuyPremium returns the value of BuyPremium.
func (s *V1AssetEtf) GetBuyPremium() OptV1Quotation {
	return s.BuyPremium
}

// GetSellDiscount returns the value of SellDiscount.
func (s *V1AssetEtf) GetSellDiscount() OptV1Quotation {
	return s.SellDiscount
}

// GetRebalancingFlag returns the value of RebalancingFlag.
func (s *V1AssetEtf) GetRebalancingFlag() OptBool {
	return s.RebalancingFlag
}

// GetRebalancingFreq returns the value of RebalancingFreq.
func (s *V1AssetEtf) GetRebalancingFreq() OptString {
	return s.RebalancingFreq
}

// GetManagementType returns the value of ManagementType.
func (s *V1AssetEtf) GetManagementType() OptString {
	return s.ManagementType
}

// GetPrimaryIndex returns the value of PrimaryIndex.
func (s *V1AssetEtf) GetPrimaryIndex() OptString {
	return s.PrimaryIndex
}

// GetFocusType returns the value of FocusType.
func (s *V1AssetEtf) GetFocusType() OptString {
	return s.FocusType
}

// GetLeveragedFlag returns the value of LeveragedFlag.
func (s *V1AssetEtf) GetLeveragedFlag() OptBool {
	return s.LeveragedFlag
}

// GetNumShare returns the value of NumShare.
func (s *V1AssetEtf) GetNumShare() OptV1Quotation {
	return s.NumShare
}

// GetUcitsFlag returns the value of UcitsFlag.
func (s *V1AssetEtf) GetUcitsFlag() OptBool {
	return s.UcitsFlag
}

// GetReleasedDate returns the value of ReleasedDate.
func (s *V1AssetEtf) GetReleasedDate() OptDateTime {
	return s.ReleasedDate
}

// GetDescription returns the value of Description.
func (s *V1AssetEtf) GetDescription() OptString {
	return s.Description
}

// GetPrimaryIndexDescription returns the value of PrimaryIndexDescription.
func (s *V1AssetEtf) GetPrimaryIndexDescription() OptString {
	return s.PrimaryIndexDescription
}

// GetPrimaryIndexCompany returns the value of PrimaryIndexCompany.
func (s *V1AssetEtf) GetPrimaryIndexCompany() OptString {
	return s.PrimaryIndexCompany
}

// GetIndexRecoveryPeriod returns the value of IndexRecoveryPeriod.
func (s *V1AssetEtf) GetIndexRecoveryPeriod() OptV1Quotation {
	return s.IndexRecoveryPeriod
}

// GetInavCode returns the value of InavCode.
func (s *V1AssetEtf) GetInavCode() OptString {
	return s.InavCode
}

// GetDivYieldFlag returns the value of DivYieldFlag.
func (s *V1AssetEtf) GetDivYieldFlag() OptBool {
	return s.DivYieldFlag
}

// GetExpenseCommission returns the value of ExpenseCommission.
func (s *V1AssetEtf) GetExpenseCommission() OptV1Quotation {
	return s.ExpenseCommission
}

// GetPrimaryIndexTrackingError returns the value of PrimaryIndexTrackingError.
func (s *V1AssetEtf) GetPrimaryIndexTrackingError() OptV1Quotation {
	return s.PrimaryIndexTrackingError
}

// GetRebalancingPlan returns the value of RebalancingPlan.
func (s *V1AssetEtf) GetRebalancingPlan() OptString {
	return s.RebalancingPlan
}

// GetTaxRate returns the value of TaxRate.
func (s *V1AssetEtf) GetTaxRate() OptString {
	return s.TaxRate
}

// GetRebalancingDates returns the value of RebalancingDates.
func (s *V1AssetEtf) GetRebalancingDates() []time.Time {
	return s.RebalancingDates
}

// GetIssueKind returns the value of IssueKind.
func (s *V1AssetEtf) GetIssueKind() OptString {
	return s.IssueKind
}

// GetNominal returns the value of Nominal.
func (s *V1AssetEtf) GetNominal() OptV1Quotation {
	return s.Nominal
}

// GetNominalCurrency returns the value of NominalCurrency.
func (s *V1AssetEtf) GetNominalCurrency() OptString {
	return s.NominalCurrency
}

// SetTotalExpense sets the value of TotalExpense.
func (s *V1AssetEtf) SetTotalExpense(val OptV1Quotation) {
	s.TotalExpense = val
}

// SetHurdleRate sets the value of HurdleRate.
func (s *V1AssetEtf) SetHurdleRate(val OptV1Quotation) {
	s.HurdleRate = val
}

// SetPerformanceFee sets the value of PerformanceFee.
func (s *V1AssetEtf) SetPerformanceFee(val OptV1Quotation) {
	s.PerformanceFee = val
}

// SetFixedCommission sets the value of FixedCommission.
func (s *V1AssetEtf) SetFixedCommission(val OptV1Quotation) {
	s.FixedCommission = val
}

// SetPaymentType sets the value of PaymentType.
func (s *V1AssetEtf) SetPaymentType(val OptString) {
	s.PaymentType = val
}

// SetWatermarkFlag sets the value of WatermarkFlag.
func (s *V1AssetEtf) SetWatermarkFlag(val OptBool) {
	s.WatermarkFlag = val
}

// SetBuyPremium sets the value of BuyPremium.
func (s *V1AssetEtf) SetBuyPremium(val OptV1Quotation) {
	s.BuyPremium = val
}

// SetSellDiscount sets the value of SellDiscount.
func (s *V1AssetEtf) SetSellDiscount(val OptV1Quotation) {
	s.SellDiscount = val
}

// SetRebalancingFlag sets the value of RebalancingFlag.
func (s *V1AssetEtf) SetRebalancingFlag(val OptBool) {
	s.RebalancingFlag = val
}

// SetRebalancingFreq sets the value of RebalancingFreq.
func (s *V1AssetEtf) SetRebalancingFreq(val OptString) {
	s.RebalancingFreq = val
}

// SetManagementType sets the value of ManagementType.
func (s *V1AssetEtf) SetManagementType(val OptString) {
	s.ManagementType = val
}

// SetPrimaryIndex sets the value of PrimaryIndex.
func (s *V1AssetEtf) SetPrimaryIndex(val OptString) {
	s.PrimaryIndex = val
}

// SetFocusType sets the value of FocusType.
func (s *V1AssetEtf) SetFocusType(val OptString) {
	s.FocusType = val
}

// SetLeveragedFlag sets the value of LeveragedFlag.
func (s *V1AssetEtf) SetLeveragedFlag(val OptBool) {
	s.LeveragedFlag = val
}

// SetNumShare sets the value of NumShare.
func (s *V1AssetEtf) SetNumShare(val OptV1Quotation) {
	s.NumShare = val
}

// SetUcitsFlag sets the value of UcitsFlag.
func (s *V1AssetEtf) SetUcitsFlag(val OptBool) {
	s.UcitsFlag = val
}

// SetReleasedDate sets the value of ReleasedDate.
func (s *V1AssetEtf) SetReleasedDate(val OptDateTime) {
	s.ReleasedDate = val
}

// SetDescription sets the value of Description.
func (s *V1AssetEtf) SetDescription(val OptString) {
	s.Description = val
}

// SetPrimaryIndexDescription sets the value of PrimaryIndexDescription.
func (s *V1AssetEtf) SetPrimaryIndexDescription(val OptString) {
	s.PrimaryIndexDescription = val
}

// SetPrimaryIndexCompany sets the value of PrimaryIndexCompany.
func (s *V1AssetEtf) SetPrimaryIndexCompany(val OptString) {
	s.PrimaryIndexCompany = val
}

// SetIndexRecoveryPeriod sets the value of IndexRecoveryPeriod.
func (s *V1AssetEtf) SetIndexRecoveryPeriod(val OptV1Quotation) {
	s.IndexRecoveryPeriod = val
}

// SetInavCode sets the value of InavCode.
func (s *V1AssetEtf) SetInavCode(val OptString) {
	s.InavCode = val
}

// SetDivYieldFlag sets the value of DivYieldFlag.
func (s *V1AssetEtf) SetDivYieldFlag(val OptBool) {
	s.DivYieldFlag = val
}

// SetExpenseCommission sets the value of ExpenseCommission.
func (s *V1AssetEtf) SetExpenseCommission(val OptV1Quotation) {
	s.ExpenseCommission = val
}

// SetPrimaryIndexTrackingError sets the value of PrimaryIndexTrackingError.
func (s *V1AssetEtf) SetPrimaryIndexTrackingError(val OptV1Quotation) {
	s.PrimaryIndexTrackingError = val
}

// SetRebalancingPlan sets the value of RebalancingPlan.
func (s *V1AssetEtf) SetRebalancingPlan(val OptString) {
	s.RebalancingPlan = val
}

// SetTaxRate sets the value of TaxRate.
func (s *V1AssetEtf) SetTaxRate(val OptString) {
	s.TaxRate = val
}

// SetRebalancingDates sets the value of RebalancingDates.
func (s *V1AssetEtf) SetRebalancingDates(val []time.Time) {
	s.RebalancingDates = val
}

// SetIssueKind sets the value of IssueKind.
func (s *V1AssetEtf) SetIssueKind(val OptString) {
	s.IssueKind = val
}

// SetNominal sets the value of Nominal.
func (s *V1AssetEtf) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// SetNominalCurrency sets the value of NominalCurrency.
func (s *V1AssetEtf) SetNominalCurrency(val OptString) {
	s.NominalCurrency = val
}

// Ref: #/components/schemas/v1AssetFull
type V1AssetFull struct {
	UID           OptString           `json:"uid"`
	Type          OptV1AssetType      `json:"type"`
	Name          OptString           `json:"name"`
	NameBrief     OptString           `json:"nameBrief"`
	Description   OptString           `json:"description"`
	DeletedAt     OptDateTime         `json:"deletedAt"`
	RequiredTests []string            `json:"requiredTests"`
	Currency      OptV1AssetCurrency  `json:"currency"`
	Security      OptV1AssetSecurity  `json:"security"`
	GosRegCode    OptString           `json:"gosRegCode"`
	Cfi           OptString           `json:"cfi"`
	CodeNsd       OptString           `json:"codeNsd"`
	Status        OptString           `json:"status"`
	Brand         OptV1Brand          `json:"brand"`
	UpdatedAt     OptDateTime         `json:"updatedAt"`
	BrCode        OptString           `json:"brCode"`
	BrCodeName    OptString           `json:"brCodeName"`
	Instruments   []V1AssetInstrument `json:"instruments"`
}

// GetUID returns the value of UID.
func (s *V1AssetFull) GetUID() OptString {
	return s.UID
}

// GetType returns the value of Type.
func (s *V1AssetFull) GetType() OptV1AssetType {
	return s.Type
}

// GetName returns the value of Name.
func (s *V1AssetFull) GetName() OptString {
	return s.Name
}

// GetNameBrief returns the value of NameBrief.
func (s *V1AssetFull) GetNameBrief() OptString {
	return s.NameBrief
}

// GetDescription returns the value of Description.
func (s *V1AssetFull) GetDescription() OptString {
	return s.Description
}

// GetDeletedAt returns the value of DeletedAt.
func (s *V1AssetFull) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetRequiredTests returns the value of RequiredTests.
func (s *V1AssetFull) GetRequiredTests() []string {
	return s.RequiredTests
}

// GetCurrency returns the value of Currency.
func (s *V1AssetFull) GetCurrency() OptV1AssetCurrency {
	return s.Currency
}

// GetSecurity returns the value of Security.
func (s *V1AssetFull) GetSecurity() OptV1AssetSecurity {
	return s.Security
}

// GetGosRegCode returns the value of GosRegCode.
func (s *V1AssetFull) GetGosRegCode() OptString {
	return s.GosRegCode
}

// GetCfi returns the value of Cfi.
func (s *V1AssetFull) GetCfi() OptString {
	return s.Cfi
}

// GetCodeNsd returns the value of CodeNsd.
func (s *V1AssetFull) GetCodeNsd() OptString {
	return s.CodeNsd
}

// GetStatus returns the value of Status.
func (s *V1AssetFull) GetStatus() OptString {
	return s.Status
}

// GetBrand returns the value of Brand.
func (s *V1AssetFull) GetBrand() OptV1Brand {
	return s.Brand
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *V1AssetFull) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetBrCode returns the value of BrCode.
func (s *V1AssetFull) GetBrCode() OptString {
	return s.BrCode
}

// GetBrCodeName returns the value of BrCodeName.
func (s *V1AssetFull) GetBrCodeName() OptString {
	return s.BrCodeName
}

// GetInstruments returns the value of Instruments.
func (s *V1AssetFull) GetInstruments() []V1AssetInstrument {
	return s.Instruments
}

// SetUID sets the value of UID.
func (s *V1AssetFull) SetUID(val OptString) {
	s.UID = val
}

// SetType sets the value of Type.
func (s *V1AssetFull) SetType(val OptV1AssetType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *V1AssetFull) SetName(val OptString) {
	s.Name = val
}

// SetNameBrief sets the value of NameBrief.
func (s *V1AssetFull) SetNameBrief(val OptString) {
	s.NameBrief = val
}

// SetDescription sets the value of Description.
func (s *V1AssetFull) SetDescription(val OptString) {
	s.Description = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *V1AssetFull) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetRequiredTests sets the value of RequiredTests.
func (s *V1AssetFull) SetRequiredTests(val []string) {
	s.RequiredTests = val
}

// SetCurrency sets the value of Currency.
func (s *V1AssetFull) SetCurrency(val OptV1AssetCurrency) {
	s.Currency = val
}

// SetSecurity sets the value of Security.
func (s *V1AssetFull) SetSecurity(val OptV1AssetSecurity) {
	s.Security = val
}

// SetGosRegCode sets the value of GosRegCode.
func (s *V1AssetFull) SetGosRegCode(val OptString) {
	s.GosRegCode = val
}

// SetCfi sets the value of Cfi.
func (s *V1AssetFull) SetCfi(val OptString) {
	s.Cfi = val
}

// SetCodeNsd sets the value of CodeNsd.
func (s *V1AssetFull) SetCodeNsd(val OptString) {
	s.CodeNsd = val
}

// SetStatus sets the value of Status.
func (s *V1AssetFull) SetStatus(val OptString) {
	s.Status = val
}

// SetBrand sets the value of Brand.
func (s *V1AssetFull) SetBrand(val OptV1Brand) {
	s.Brand = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *V1AssetFull) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetBrCode sets the value of BrCode.
func (s *V1AssetFull) SetBrCode(val OptString) {
	s.BrCode = val
}

// SetBrCodeName sets the value of BrCodeName.
func (s *V1AssetFull) SetBrCodeName(val OptString) {
	s.BrCodeName = val
}

// SetInstruments sets the value of Instruments.
func (s *V1AssetFull) SetInstruments(val []V1AssetInstrument) {
	s.Instruments = val
}

// Идентификаторы инструмента.
// Ref: #/components/schemas/v1AssetInstrument
type V1AssetInstrument struct {
	UID            OptString           `json:"uid"`
	Figi           OptString           `json:"figi"`
	InstrumentType OptString           `json:"instrumentType"`
	Ticker         OptString           `json:"ticker"`
	ClassCode      OptString           `json:"classCode"`
	Links          []V1InstrumentLink  `json:"links"`
	InstrumentKind OptV1InstrumentType `json:"instrumentKind"`
}

// GetUID returns the value of UID.
func (s *V1AssetInstrument) GetUID() OptString {
	return s.UID
}

// GetFigi returns the value of Figi.
func (s *V1AssetInstrument) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1AssetInstrument) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetTicker returns the value of Ticker.
func (s *V1AssetInstrument) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1AssetInstrument) GetClassCode() OptString {
	return s.ClassCode
}

// GetLinks returns the value of Links.
func (s *V1AssetInstrument) GetLinks() []V1InstrumentLink {
	return s.Links
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1AssetInstrument) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// SetUID sets the value of UID.
func (s *V1AssetInstrument) SetUID(val OptString) {
	s.UID = val
}

// SetFigi sets the value of Figi.
func (s *V1AssetInstrument) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1AssetInstrument) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetTicker sets the value of Ticker.
func (s *V1AssetInstrument) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1AssetInstrument) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetLinks sets the value of Links.
func (s *V1AssetInstrument) SetLinks(val []V1InstrumentLink) {
	s.Links = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1AssetInstrument) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// Запрос актива по идентификатору.
// Ref: #/components/schemas/v1AssetRequest
type V1AssetRequest struct {
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *V1AssetRequest) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *V1AssetRequest) SetID(val OptString) {
	s.ID = val
}

// Данные по активу.
// Ref: #/components/schemas/v1AssetResponse
type V1AssetResponse struct {
	Asset OptV1AssetFull `json:"asset"`
}

// GetAsset returns the value of Asset.
func (s *V1AssetResponse) GetAsset() OptV1AssetFull {
	return s.Asset
}

// SetAsset sets the value of Asset.
func (s *V1AssetResponse) SetAsset(val OptV1AssetFull) {
	s.Asset = val
}

func (*V1AssetResponse) instrumentsServiceGetAssetByRes() {}

// Ценная бумага.
// Ref: #/components/schemas/v1AssetSecurity
type V1AssetSecurity struct {
	Isin                OptString                     `json:"isin"`
	Type                OptString                     `json:"type"`
	InstrumentKind      OptV1InstrumentType           `json:"instrumentKind"`
	Share               OptV1AssetShare               `json:"share"`
	Bond                OptV1AssetBond                `json:"bond"`
	Sp                  OptV1AssetStructuredProduct   `json:"sp"`
	Etf                 OptV1AssetEtf                 `json:"etf"`
	ClearingCertificate OptV1AssetClearingCertificate `json:"clearingCertificate"`
}

// GetIsin returns the value of Isin.
func (s *V1AssetSecurity) GetIsin() OptString {
	return s.Isin
}

// GetType returns the value of Type.
func (s *V1AssetSecurity) GetType() OptString {
	return s.Type
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1AssetSecurity) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// GetShare returns the value of Share.
func (s *V1AssetSecurity) GetShare() OptV1AssetShare {
	return s.Share
}

// GetBond returns the value of Bond.
func (s *V1AssetSecurity) GetBond() OptV1AssetBond {
	return s.Bond
}

// GetSp returns the value of Sp.
func (s *V1AssetSecurity) GetSp() OptV1AssetStructuredProduct {
	return s.Sp
}

// GetEtf returns the value of Etf.
func (s *V1AssetSecurity) GetEtf() OptV1AssetEtf {
	return s.Etf
}

// GetClearingCertificate returns the value of ClearingCertificate.
func (s *V1AssetSecurity) GetClearingCertificate() OptV1AssetClearingCertificate {
	return s.ClearingCertificate
}

// SetIsin sets the value of Isin.
func (s *V1AssetSecurity) SetIsin(val OptString) {
	s.Isin = val
}

// SetType sets the value of Type.
func (s *V1AssetSecurity) SetType(val OptString) {
	s.Type = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1AssetSecurity) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// SetShare sets the value of Share.
func (s *V1AssetSecurity) SetShare(val OptV1AssetShare) {
	s.Share = val
}

// SetBond sets the value of Bond.
func (s *V1AssetSecurity) SetBond(val OptV1AssetBond) {
	s.Bond = val
}

// SetSp sets the value of Sp.
func (s *V1AssetSecurity) SetSp(val OptV1AssetStructuredProduct) {
	s.Sp = val
}

// SetEtf sets the value of Etf.
func (s *V1AssetSecurity) SetEtf(val OptV1AssetEtf) {
	s.Etf = val
}

// SetClearingCertificate sets the value of ClearingCertificate.
func (s *V1AssetSecurity) SetClearingCertificate(val OptV1AssetClearingCertificate) {
	s.ClearingCertificate = val
}

// Акция.
// Ref: #/components/schemas/v1AssetShare
type V1AssetShare struct {
	Type               OptV1ShareType `json:"type"`
	IssueSize          OptV1Quotation `json:"issueSize"`
	Nominal            OptV1Quotation `json:"nominal"`
	NominalCurrency    OptString      `json:"nominalCurrency"`
	PrimaryIndex       OptString      `json:"primaryIndex"`
	DividendRate       OptV1Quotation `json:"dividendRate"`
	PreferredShareType OptString      `json:"preferredShareType"`
	IpoDate            OptDateTime    `json:"ipoDate"`
	RegistryDate       OptDateTime    `json:"registryDate"`
	DivYieldFlag       OptBool        `json:"divYieldFlag"`
	IssueKind          OptString      `json:"issueKind"`
	PlacementDate      OptDateTime    `json:"placementDate"`
	RepresIsin         OptString      `json:"represIsin"`
	IssueSizePlan      OptV1Quotation `json:"issueSizePlan"`
	TotalFloat         OptV1Quotation `json:"totalFloat"`
}

// GetType returns the value of Type.
func (s *V1AssetShare) GetType() OptV1ShareType {
	return s.Type
}

// GetIssueSize returns the value of IssueSize.
func (s *V1AssetShare) GetIssueSize() OptV1Quotation {
	return s.IssueSize
}

// GetNominal returns the value of Nominal.
func (s *V1AssetShare) GetNominal() OptV1Quotation {
	return s.Nominal
}

// GetNominalCurrency returns the value of NominalCurrency.
func (s *V1AssetShare) GetNominalCurrency() OptString {
	return s.NominalCurrency
}

// GetPrimaryIndex returns the value of PrimaryIndex.
func (s *V1AssetShare) GetPrimaryIndex() OptString {
	return s.PrimaryIndex
}

// GetDividendRate returns the value of DividendRate.
func (s *V1AssetShare) GetDividendRate() OptV1Quotation {
	return s.DividendRate
}

// GetPreferredShareType returns the value of PreferredShareType.
func (s *V1AssetShare) GetPreferredShareType() OptString {
	return s.PreferredShareType
}

// GetIpoDate returns the value of IpoDate.
func (s *V1AssetShare) GetIpoDate() OptDateTime {
	return s.IpoDate
}

// GetRegistryDate returns the value of RegistryDate.
func (s *V1AssetShare) GetRegistryDate() OptDateTime {
	return s.RegistryDate
}

// GetDivYieldFlag returns the value of DivYieldFlag.
func (s *V1AssetShare) GetDivYieldFlag() OptBool {
	return s.DivYieldFlag
}

// GetIssueKind returns the value of IssueKind.
func (s *V1AssetShare) GetIssueKind() OptString {
	return s.IssueKind
}

// GetPlacementDate returns the value of PlacementDate.
func (s *V1AssetShare) GetPlacementDate() OptDateTime {
	return s.PlacementDate
}

// GetRepresIsin returns the value of RepresIsin.
func (s *V1AssetShare) GetRepresIsin() OptString {
	return s.RepresIsin
}

// GetIssueSizePlan returns the value of IssueSizePlan.
func (s *V1AssetShare) GetIssueSizePlan() OptV1Quotation {
	return s.IssueSizePlan
}

// GetTotalFloat returns the value of TotalFloat.
func (s *V1AssetShare) GetTotalFloat() OptV1Quotation {
	return s.TotalFloat
}

// SetType sets the value of Type.
func (s *V1AssetShare) SetType(val OptV1ShareType) {
	s.Type = val
}

// SetIssueSize sets the value of IssueSize.
func (s *V1AssetShare) SetIssueSize(val OptV1Quotation) {
	s.IssueSize = val
}

// SetNominal sets the value of Nominal.
func (s *V1AssetShare) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// SetNominalCurrency sets the value of NominalCurrency.
func (s *V1AssetShare) SetNominalCurrency(val OptString) {
	s.NominalCurrency = val
}

// SetPrimaryIndex sets the value of PrimaryIndex.
func (s *V1AssetShare) SetPrimaryIndex(val OptString) {
	s.PrimaryIndex = val
}

// SetDividendRate sets the value of DividendRate.
func (s *V1AssetShare) SetDividendRate(val OptV1Quotation) {
	s.DividendRate = val
}

// SetPreferredShareType sets the value of PreferredShareType.
func (s *V1AssetShare) SetPreferredShareType(val OptString) {
	s.PreferredShareType = val
}

// SetIpoDate sets the value of IpoDate.
func (s *V1AssetShare) SetIpoDate(val OptDateTime) {
	s.IpoDate = val
}

// SetRegistryDate sets the value of RegistryDate.
func (s *V1AssetShare) SetRegistryDate(val OptDateTime) {
	s.RegistryDate = val
}

// SetDivYieldFlag sets the value of DivYieldFlag.
func (s *V1AssetShare) SetDivYieldFlag(val OptBool) {
	s.DivYieldFlag = val
}

// SetIssueKind sets the value of IssueKind.
func (s *V1AssetShare) SetIssueKind(val OptString) {
	s.IssueKind = val
}

// SetPlacementDate sets the value of PlacementDate.
func (s *V1AssetShare) SetPlacementDate(val OptDateTime) {
	s.PlacementDate = val
}

// SetRepresIsin sets the value of RepresIsin.
func (s *V1AssetShare) SetRepresIsin(val OptString) {
	s.RepresIsin = val
}

// SetIssueSizePlan sets the value of IssueSizePlan.
func (s *V1AssetShare) SetIssueSizePlan(val OptV1Quotation) {
	s.IssueSizePlan = val
}

// SetTotalFloat sets the value of TotalFloat.
func (s *V1AssetShare) SetTotalFloat(val OptV1Quotation) {
	s.TotalFloat = val
}

// Структурная нота.
// Ref: #/components/schemas/v1AssetStructuredProduct
type V1AssetStructuredProduct struct {
	BorrowName      OptString                  `json:"borrowName"`
	Nominal         OptV1Quotation             `json:"nominal"`
	NominalCurrency OptString                  `json:"nominalCurrency"`
	Type            OptV1StructuredProductType `json:"type"`
	LogicPortfolio  OptString                  `json:"logicPortfolio"`
	AssetType       OptV1AssetType             `json:"assetType"`
	BasicAsset      OptString                  `json:"basicAsset"`
	SafetyBarrier   OptV1Quotation             `json:"safetyBarrier"`
	MaturityDate    OptDateTime                `json:"maturityDate"`
	IssueSizePlan   OptV1Quotation             `json:"issueSizePlan"`
	IssueSize       OptV1Quotation             `json:"issueSize"`
	PlacementDate   OptDateTime                `json:"placementDate"`
	IssueKind       OptString                  `json:"issueKind"`
}

// GetBorrowName returns the value of BorrowName.
func (s *V1AssetStructuredProduct) GetBorrowName() OptString {
	return s.BorrowName
}

// GetNominal returns the value of Nominal.
func (s *V1AssetStructuredProduct) GetNominal() OptV1Quotation {
	return s.Nominal
}

// GetNominalCurrency returns the value of NominalCurrency.
func (s *V1AssetStructuredProduct) GetNominalCurrency() OptString {
	return s.NominalCurrency
}

// GetType returns the value of Type.
func (s *V1AssetStructuredProduct) GetType() OptV1StructuredProductType {
	return s.Type
}

// GetLogicPortfolio returns the value of LogicPortfolio.
func (s *V1AssetStructuredProduct) GetLogicPortfolio() OptString {
	return s.LogicPortfolio
}

// GetAssetType returns the value of AssetType.
func (s *V1AssetStructuredProduct) GetAssetType() OptV1AssetType {
	return s.AssetType
}

// GetBasicAsset returns the value of BasicAsset.
func (s *V1AssetStructuredProduct) GetBasicAsset() OptString {
	return s.BasicAsset
}

// GetSafetyBarrier returns the value of SafetyBarrier.
func (s *V1AssetStructuredProduct) GetSafetyBarrier() OptV1Quotation {
	return s.SafetyBarrier
}

// GetMaturityDate returns the value of MaturityDate.
func (s *V1AssetStructuredProduct) GetMaturityDate() OptDateTime {
	return s.MaturityDate
}

// GetIssueSizePlan returns the value of IssueSizePlan.
func (s *V1AssetStructuredProduct) GetIssueSizePlan() OptV1Quotation {
	return s.IssueSizePlan
}

// GetIssueSize returns the value of IssueSize.
func (s *V1AssetStructuredProduct) GetIssueSize() OptV1Quotation {
	return s.IssueSize
}

// GetPlacementDate returns the value of PlacementDate.
func (s *V1AssetStructuredProduct) GetPlacementDate() OptDateTime {
	return s.PlacementDate
}

// GetIssueKind returns the value of IssueKind.
func (s *V1AssetStructuredProduct) GetIssueKind() OptString {
	return s.IssueKind
}

// SetBorrowName sets the value of BorrowName.
func (s *V1AssetStructuredProduct) SetBorrowName(val OptString) {
	s.BorrowName = val
}

// SetNominal sets the value of Nominal.
func (s *V1AssetStructuredProduct) SetNominal(val OptV1Quotation) {
	s.Nominal = val
}

// SetNominalCurrency sets the value of NominalCurrency.
func (s *V1AssetStructuredProduct) SetNominalCurrency(val OptString) {
	s.NominalCurrency = val
}

// SetType sets the value of Type.
func (s *V1AssetStructuredProduct) SetType(val OptV1StructuredProductType) {
	s.Type = val
}

// SetLogicPortfolio sets the value of LogicPortfolio.
func (s *V1AssetStructuredProduct) SetLogicPortfolio(val OptString) {
	s.LogicPortfolio = val
}

// SetAssetType sets the value of AssetType.
func (s *V1AssetStructuredProduct) SetAssetType(val OptV1AssetType) {
	s.AssetType = val
}

// SetBasicAsset sets the value of BasicAsset.
func (s *V1AssetStructuredProduct) SetBasicAsset(val OptString) {
	s.BasicAsset = val
}

// SetSafetyBarrier sets the value of SafetyBarrier.
func (s *V1AssetStructuredProduct) SetSafetyBarrier(val OptV1Quotation) {
	s.SafetyBarrier = val
}

// SetMaturityDate sets the value of MaturityDate.
func (s *V1AssetStructuredProduct) SetMaturityDate(val OptDateTime) {
	s.MaturityDate = val
}

// SetIssueSizePlan sets the value of IssueSizePlan.
func (s *V1AssetStructuredProduct) SetIssueSizePlan(val OptV1Quotation) {
	s.IssueSizePlan = val
}

// SetIssueSize sets the value of IssueSize.
func (s *V1AssetStructuredProduct) SetIssueSize(val OptV1Quotation) {
	s.IssueSize = val
}

// SetPlacementDate sets the value of PlacementDate.
func (s *V1AssetStructuredProduct) SetPlacementDate(val OptDateTime) {
	s.PlacementDate = val
}

// SetIssueKind sets the value of IssueKind.
func (s *V1AssetStructuredProduct) SetIssueKind(val OptString) {
	s.IssueKind = val
}

// Тип актива.
// Ref: #/components/schemas/v1AssetType
type V1AssetType string

const (
	V1AssetTypeASSETTYPEUNSPECIFIED V1AssetType = "ASSET_TYPE_UNSPECIFIED"
	V1AssetTypeASSETTYPECURRENCY    V1AssetType = "ASSET_TYPE_CURRENCY"
	V1AssetTypeASSETTYPECOMMODITY   V1AssetType = "ASSET_TYPE_COMMODITY"
	V1AssetTypeASSETTYPEINDEX       V1AssetType = "ASSET_TYPE_INDEX"
	V1AssetTypeASSETTYPESECURITY    V1AssetType = "ASSET_TYPE_SECURITY"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1AssetType) MarshalText() ([]byte, error) {
	switch s {
	case V1AssetTypeASSETTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1AssetTypeASSETTYPECURRENCY:
		return []byte(s), nil
	case V1AssetTypeASSETTYPECOMMODITY:
		return []byte(s), nil
	case V1AssetTypeASSETTYPEINDEX:
		return []byte(s), nil
	case V1AssetTypeASSETTYPESECURITY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1AssetType) UnmarshalText(data []byte) error {
	switch V1AssetType(data) {
	case V1AssetTypeASSETTYPEUNSPECIFIED:
		*s = V1AssetTypeASSETTYPEUNSPECIFIED
		return nil
	case V1AssetTypeASSETTYPECURRENCY:
		*s = V1AssetTypeASSETTYPECURRENCY
		return nil
	case V1AssetTypeASSETTYPECOMMODITY:
		*s = V1AssetTypeASSETTYPECOMMODITY
		return nil
	case V1AssetTypeASSETTYPEINDEX:
		*s = V1AssetTypeASSETTYPEINDEX
		return nil
	case V1AssetTypeASSETTYPESECURITY:
		*s = V1AssetTypeASSETTYPESECURITY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос списка активов.
// Ref: #/components/schemas/v1AssetsRequest
type V1AssetsRequest struct{}

// Список активов.
// Ref: #/components/schemas/v1AssetsResponse
type V1AssetsResponse struct {
	Assets []V1Asset `json:"assets"`
}

// GetAssets returns the value of Assets.
func (s *V1AssetsResponse) GetAssets() []V1Asset {
	return s.Assets
}

// SetAssets sets the value of Assets.
func (s *V1AssetsResponse) SetAssets(val []V1Asset) {
	s.Assets = val
}

func (*V1AssetsResponse) instrumentsServiceGetAssetsRes() {}

// Объект передачи информации об облигации.
// Ref: #/components/schemas/v1Bond
type V1Bond struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Isin                  OptString                  `json:"isin"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	CouponQuantityPerYear OptInt32                   `json:"couponQuantityPerYear"`
	MaturityDate          OptDateTime                `json:"maturityDate"`
	Nominal               OptV1MoneyValue            `json:"nominal"`
	InitialNominal        OptV1MoneyValue            `json:"initialNominal"`
	StateRegDate          OptDateTime                `json:"stateRegDate"`
	PlacementDate         OptDateTime                `json:"placementDate"`
	PlacementPrice        OptV1MoneyValue            `json:"placementPrice"`
	AciValue              OptV1MoneyValue            `json:"aciValue"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	Sector                OptString                  `json:"sector"`
	IssueKind             OptString                  `json:"issueKind"`
	IssueSize             OptStringInt64             `json:"issueSize"`
	IssueSizePlan         OptStringInt64             `json:"issueSizePlan"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	FloatingCouponFlag    OptBool                    `json:"floatingCouponFlag"`
	PerpetualFlag         OptBool                    `json:"perpetualFlag"`
	AmortizationFlag      OptBool                    `json:"amortizationFlag"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	SubordinatedFlag      OptBool                    `json:"subordinatedFlag"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
	RiskLevel             OptV1RiskLevel             `json:"riskLevel"`
}

// GetFigi returns the value of Figi.
func (s *V1Bond) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Bond) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Bond) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1Bond) GetIsin() OptString {
	return s.Isin
}

// GetLot returns the value of Lot.
func (s *V1Bond) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Bond) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Bond) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Bond) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Bond) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Bond) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Bond) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Bond) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Bond) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Bond) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Bond) GetExchange() OptString {
	return s.Exchange
}

// GetCouponQuantityPerYear returns the value of CouponQuantityPerYear.
func (s *V1Bond) GetCouponQuantityPerYear() OptInt32 {
	return s.CouponQuantityPerYear
}

// GetMaturityDate returns the value of MaturityDate.
func (s *V1Bond) GetMaturityDate() OptDateTime {
	return s.MaturityDate
}

// GetNominal returns the value of Nominal.
func (s *V1Bond) GetNominal() OptV1MoneyValue {
	return s.Nominal
}

// GetInitialNominal returns the value of InitialNominal.
func (s *V1Bond) GetInitialNominal() OptV1MoneyValue {
	return s.InitialNominal
}

// GetStateRegDate returns the value of StateRegDate.
func (s *V1Bond) GetStateRegDate() OptDateTime {
	return s.StateRegDate
}

// GetPlacementDate returns the value of PlacementDate.
func (s *V1Bond) GetPlacementDate() OptDateTime {
	return s.PlacementDate
}

// GetPlacementPrice returns the value of PlacementPrice.
func (s *V1Bond) GetPlacementPrice() OptV1MoneyValue {
	return s.PlacementPrice
}

// GetAciValue returns the value of AciValue.
func (s *V1Bond) GetAciValue() OptV1MoneyValue {
	return s.AciValue
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Bond) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Bond) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetSector returns the value of Sector.
func (s *V1Bond) GetSector() OptString {
	return s.Sector
}

// GetIssueKind returns the value of IssueKind.
func (s *V1Bond) GetIssueKind() OptString {
	return s.IssueKind
}

// GetIssueSize returns the value of IssueSize.
func (s *V1Bond) GetIssueSize() OptStringInt64 {
	return s.IssueSize
}

// GetIssueSizePlan returns the value of IssueSizePlan.
func (s *V1Bond) GetIssueSizePlan() OptStringInt64 {
	return s.IssueSizePlan
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Bond) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Bond) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Bond) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Bond) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetFloatingCouponFlag returns the value of FloatingCouponFlag.
func (s *V1Bond) GetFloatingCouponFlag() OptBool {
	return s.FloatingCouponFlag
}

// GetPerpetualFlag returns the value of PerpetualFlag.
func (s *V1Bond) GetPerpetualFlag() OptBool {
	return s.PerpetualFlag
}

// GetAmortizationFlag returns the value of AmortizationFlag.
func (s *V1Bond) GetAmortizationFlag() OptBool {
	return s.AmortizationFlag
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Bond) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Bond) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Bond) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Bond) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Bond) GetPositionUid() OptString {
	return s.PositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Bond) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Bond) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Bond) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Bond) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetSubordinatedFlag returns the value of SubordinatedFlag.
func (s *V1Bond) GetSubordinatedFlag() OptBool {
	return s.SubordinatedFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Bond) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Bond) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// GetRiskLevel returns the value of RiskLevel.
func (s *V1Bond) GetRiskLevel() OptV1RiskLevel {
	return s.RiskLevel
}

// SetFigi sets the value of Figi.
func (s *V1Bond) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Bond) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Bond) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1Bond) SetIsin(val OptString) {
	s.Isin = val
}

// SetLot sets the value of Lot.
func (s *V1Bond) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Bond) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Bond) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Bond) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Bond) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Bond) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Bond) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Bond) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Bond) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Bond) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Bond) SetExchange(val OptString) {
	s.Exchange = val
}

// SetCouponQuantityPerYear sets the value of CouponQuantityPerYear.
func (s *V1Bond) SetCouponQuantityPerYear(val OptInt32) {
	s.CouponQuantityPerYear = val
}

// SetMaturityDate sets the value of MaturityDate.
func (s *V1Bond) SetMaturityDate(val OptDateTime) {
	s.MaturityDate = val
}

// SetNominal sets the value of Nominal.
func (s *V1Bond) SetNominal(val OptV1MoneyValue) {
	s.Nominal = val
}

// SetInitialNominal sets the value of InitialNominal.
func (s *V1Bond) SetInitialNominal(val OptV1MoneyValue) {
	s.InitialNominal = val
}

// SetStateRegDate sets the value of StateRegDate.
func (s *V1Bond) SetStateRegDate(val OptDateTime) {
	s.StateRegDate = val
}

// SetPlacementDate sets the value of PlacementDate.
func (s *V1Bond) SetPlacementDate(val OptDateTime) {
	s.PlacementDate = val
}

// SetPlacementPrice sets the value of PlacementPrice.
func (s *V1Bond) SetPlacementPrice(val OptV1MoneyValue) {
	s.PlacementPrice = val
}

// SetAciValue sets the value of AciValue.
func (s *V1Bond) SetAciValue(val OptV1MoneyValue) {
	s.AciValue = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Bond) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Bond) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetSector sets the value of Sector.
func (s *V1Bond) SetSector(val OptString) {
	s.Sector = val
}

// SetIssueKind sets the value of IssueKind.
func (s *V1Bond) SetIssueKind(val OptString) {
	s.IssueKind = val
}

// SetIssueSize sets the value of IssueSize.
func (s *V1Bond) SetIssueSize(val OptStringInt64) {
	s.IssueSize = val
}

// SetIssueSizePlan sets the value of IssueSizePlan.
func (s *V1Bond) SetIssueSizePlan(val OptStringInt64) {
	s.IssueSizePlan = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Bond) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Bond) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Bond) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Bond) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetFloatingCouponFlag sets the value of FloatingCouponFlag.
func (s *V1Bond) SetFloatingCouponFlag(val OptBool) {
	s.FloatingCouponFlag = val
}

// SetPerpetualFlag sets the value of PerpetualFlag.
func (s *V1Bond) SetPerpetualFlag(val OptBool) {
	s.PerpetualFlag = val
}

// SetAmortizationFlag sets the value of AmortizationFlag.
func (s *V1Bond) SetAmortizationFlag(val OptBool) {
	s.AmortizationFlag = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Bond) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Bond) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Bond) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Bond) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Bond) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Bond) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Bond) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Bond) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Bond) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetSubordinatedFlag sets the value of SubordinatedFlag.
func (s *V1Bond) SetSubordinatedFlag(val OptBool) {
	s.SubordinatedFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Bond) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Bond) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// SetRiskLevel sets the value of RiskLevel.
func (s *V1Bond) SetRiskLevel(val OptV1RiskLevel) {
	s.RiskLevel = val
}

// Информация об облигации.
// Ref: #/components/schemas/v1BondResponse
type V1BondResponse struct {
	Instrument OptV1Bond `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1BondResponse) GetInstrument() OptV1Bond {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1BondResponse) SetInstrument(val OptV1Bond) {
	s.Instrument = val
}

func (*V1BondResponse) instrumentsServiceBondByRes() {}

// Список облигаций.
// Ref: #/components/schemas/v1BondsResponse
type V1BondsResponse struct {
	Instruments []V1Bond `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1BondsResponse) GetInstruments() []V1Bond {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1BondsResponse) SetInstruments(val []V1Bond) {
	s.Instruments = val
}

func (*V1BondsResponse) instrumentsServiceBondsRes() {}

// Бренд.
// Ref: #/components/schemas/v1Brand
type V1Brand struct {
	UID               OptString `json:"uid"`
	Name              OptString `json:"name"`
	Description       OptString `json:"description"`
	Info              OptString `json:"info"`
	Company           OptString `json:"company"`
	Sector            OptString `json:"sector"`
	CountryOfRisk     OptString `json:"countryOfRisk"`
	CountryOfRiskName OptString `json:"countryOfRiskName"`
}

// GetUID returns the value of UID.
func (s *V1Brand) GetUID() OptString {
	return s.UID
}

// GetName returns the value of Name.
func (s *V1Brand) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *V1Brand) GetDescription() OptString {
	return s.Description
}

// GetInfo returns the value of Info.
func (s *V1Brand) GetInfo() OptString {
	return s.Info
}

// GetCompany returns the value of Company.
func (s *V1Brand) GetCompany() OptString {
	return s.Company
}

// GetSector returns the value of Sector.
func (s *V1Brand) GetSector() OptString {
	return s.Sector
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Brand) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Brand) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// SetUID sets the value of UID.
func (s *V1Brand) SetUID(val OptString) {
	s.UID = val
}

// SetName sets the value of Name.
func (s *V1Brand) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *V1Brand) SetDescription(val OptString) {
	s.Description = val
}

// SetInfo sets the value of Info.
func (s *V1Brand) SetInfo(val OptString) {
	s.Info = val
}

// SetCompany sets the value of Company.
func (s *V1Brand) SetCompany(val OptString) {
	s.Company = val
}

// SetSector sets the value of Sector.
func (s *V1Brand) SetSector(val OptString) {
	s.Sector = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Brand) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Brand) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

func (*V1Brand) instrumentsServiceGetBrandByRes() {}

// Ref: #/components/schemas/v1BrokerReport
type V1BrokerReport struct {
	TradeId                    OptString       `json:"tradeId"`
	OrderId                    OptString       `json:"orderId"`
	Figi                       OptString       `json:"figi"`
	ExecuteSign                OptString       `json:"executeSign"`
	TradeDatetime              OptDateTime     `json:"tradeDatetime"`
	Exchange                   OptString       `json:"exchange"`
	ClassCode                  OptString       `json:"classCode"`
	Direction                  OptString       `json:"direction"`
	Name                       OptString       `json:"name"`
	Ticker                     OptString       `json:"ticker"`
	Price                      OptV1MoneyValue `json:"price"`
	Quantity                   OptStringInt64  `json:"quantity"`
	OrderAmount                OptV1MoneyValue `json:"orderAmount"`
	AciValue                   OptV1Quotation  `json:"aciValue"`
	TotalOrderAmount           OptV1MoneyValue `json:"totalOrderAmount"`
	BrokerCommission           OptV1MoneyValue `json:"brokerCommission"`
	ExchangeCommission         OptV1MoneyValue `json:"exchangeCommission"`
	ExchangeClearingCommission OptV1MoneyValue `json:"exchangeClearingCommission"`
	RepoRate                   OptV1Quotation  `json:"repoRate"`
	Party                      OptString       `json:"party"`
	ClearValueDate             OptDateTime     `json:"clearValueDate"`
	SecValueDate               OptDateTime     `json:"secValueDate"`
	BrokerStatus               OptString       `json:"brokerStatus"`
	SeparateAgreementType      OptString       `json:"separateAgreementType"`
	SeparateAgreementNumber    OptString       `json:"separateAgreementNumber"`
	SeparateAgreementDate      OptString       `json:"separateAgreementDate"`
	DeliveryType               OptString       `json:"deliveryType"`
}

// GetTradeId returns the value of TradeId.
func (s *V1BrokerReport) GetTradeId() OptString {
	return s.TradeId
}

// GetOrderId returns the value of OrderId.
func (s *V1BrokerReport) GetOrderId() OptString {
	return s.OrderId
}

// GetFigi returns the value of Figi.
func (s *V1BrokerReport) GetFigi() OptString {
	return s.Figi
}

// GetExecuteSign returns the value of ExecuteSign.
func (s *V1BrokerReport) GetExecuteSign() OptString {
	return s.ExecuteSign
}

// GetTradeDatetime returns the value of TradeDatetime.
func (s *V1BrokerReport) GetTradeDatetime() OptDateTime {
	return s.TradeDatetime
}

// GetExchange returns the value of Exchange.
func (s *V1BrokerReport) GetExchange() OptString {
	return s.Exchange
}

// GetClassCode returns the value of ClassCode.
func (s *V1BrokerReport) GetClassCode() OptString {
	return s.ClassCode
}

// GetDirection returns the value of Direction.
func (s *V1BrokerReport) GetDirection() OptString {
	return s.Direction
}

// GetName returns the value of Name.
func (s *V1BrokerReport) GetName() OptString {
	return s.Name
}

// GetTicker returns the value of Ticker.
func (s *V1BrokerReport) GetTicker() OptString {
	return s.Ticker
}

// GetPrice returns the value of Price.
func (s *V1BrokerReport) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s *V1BrokerReport) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetOrderAmount returns the value of OrderAmount.
func (s *V1BrokerReport) GetOrderAmount() OptV1MoneyValue {
	return s.OrderAmount
}

// GetAciValue returns the value of AciValue.
func (s *V1BrokerReport) GetAciValue() OptV1Quotation {
	return s.AciValue
}

// GetTotalOrderAmount returns the value of TotalOrderAmount.
func (s *V1BrokerReport) GetTotalOrderAmount() OptV1MoneyValue {
	return s.TotalOrderAmount
}

// GetBrokerCommission returns the value of BrokerCommission.
func (s *V1BrokerReport) GetBrokerCommission() OptV1MoneyValue {
	return s.BrokerCommission
}

// GetExchangeCommission returns the value of ExchangeCommission.
func (s *V1BrokerReport) GetExchangeCommission() OptV1MoneyValue {
	return s.ExchangeCommission
}

// GetExchangeClearingCommission returns the value of ExchangeClearingCommission.
func (s *V1BrokerReport) GetExchangeClearingCommission() OptV1MoneyValue {
	return s.ExchangeClearingCommission
}

// GetRepoRate returns the value of RepoRate.
func (s *V1BrokerReport) GetRepoRate() OptV1Quotation {
	return s.RepoRate
}

// GetParty returns the value of Party.
func (s *V1BrokerReport) GetParty() OptString {
	return s.Party
}

// GetClearValueDate returns the value of ClearValueDate.
func (s *V1BrokerReport) GetClearValueDate() OptDateTime {
	return s.ClearValueDate
}

// GetSecValueDate returns the value of SecValueDate.
func (s *V1BrokerReport) GetSecValueDate() OptDateTime {
	return s.SecValueDate
}

// GetBrokerStatus returns the value of BrokerStatus.
func (s *V1BrokerReport) GetBrokerStatus() OptString {
	return s.BrokerStatus
}

// GetSeparateAgreementType returns the value of SeparateAgreementType.
func (s *V1BrokerReport) GetSeparateAgreementType() OptString {
	return s.SeparateAgreementType
}

// GetSeparateAgreementNumber returns the value of SeparateAgreementNumber.
func (s *V1BrokerReport) GetSeparateAgreementNumber() OptString {
	return s.SeparateAgreementNumber
}

// GetSeparateAgreementDate returns the value of SeparateAgreementDate.
func (s *V1BrokerReport) GetSeparateAgreementDate() OptString {
	return s.SeparateAgreementDate
}

// GetDeliveryType returns the value of DeliveryType.
func (s *V1BrokerReport) GetDeliveryType() OptString {
	return s.DeliveryType
}

// SetTradeId sets the value of TradeId.
func (s *V1BrokerReport) SetTradeId(val OptString) {
	s.TradeId = val
}

// SetOrderId sets the value of OrderId.
func (s *V1BrokerReport) SetOrderId(val OptString) {
	s.OrderId = val
}

// SetFigi sets the value of Figi.
func (s *V1BrokerReport) SetFigi(val OptString) {
	s.Figi = val
}

// SetExecuteSign sets the value of ExecuteSign.
func (s *V1BrokerReport) SetExecuteSign(val OptString) {
	s.ExecuteSign = val
}

// SetTradeDatetime sets the value of TradeDatetime.
func (s *V1BrokerReport) SetTradeDatetime(val OptDateTime) {
	s.TradeDatetime = val
}

// SetExchange sets the value of Exchange.
func (s *V1BrokerReport) SetExchange(val OptString) {
	s.Exchange = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1BrokerReport) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetDirection sets the value of Direction.
func (s *V1BrokerReport) SetDirection(val OptString) {
	s.Direction = val
}

// SetName sets the value of Name.
func (s *V1BrokerReport) SetName(val OptString) {
	s.Name = val
}

// SetTicker sets the value of Ticker.
func (s *V1BrokerReport) SetTicker(val OptString) {
	s.Ticker = val
}

// SetPrice sets the value of Price.
func (s *V1BrokerReport) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *V1BrokerReport) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetOrderAmount sets the value of OrderAmount.
func (s *V1BrokerReport) SetOrderAmount(val OptV1MoneyValue) {
	s.OrderAmount = val
}

// SetAciValue sets the value of AciValue.
func (s *V1BrokerReport) SetAciValue(val OptV1Quotation) {
	s.AciValue = val
}

// SetTotalOrderAmount sets the value of TotalOrderAmount.
func (s *V1BrokerReport) SetTotalOrderAmount(val OptV1MoneyValue) {
	s.TotalOrderAmount = val
}

// SetBrokerCommission sets the value of BrokerCommission.
func (s *V1BrokerReport) SetBrokerCommission(val OptV1MoneyValue) {
	s.BrokerCommission = val
}

// SetExchangeCommission sets the value of ExchangeCommission.
func (s *V1BrokerReport) SetExchangeCommission(val OptV1MoneyValue) {
	s.ExchangeCommission = val
}

// SetExchangeClearingCommission sets the value of ExchangeClearingCommission.
func (s *V1BrokerReport) SetExchangeClearingCommission(val OptV1MoneyValue) {
	s.ExchangeClearingCommission = val
}

// SetRepoRate sets the value of RepoRate.
func (s *V1BrokerReport) SetRepoRate(val OptV1Quotation) {
	s.RepoRate = val
}

// SetParty sets the value of Party.
func (s *V1BrokerReport) SetParty(val OptString) {
	s.Party = val
}

// SetClearValueDate sets the value of ClearValueDate.
func (s *V1BrokerReport) SetClearValueDate(val OptDateTime) {
	s.ClearValueDate = val
}

// SetSecValueDate sets the value of SecValueDate.
func (s *V1BrokerReport) SetSecValueDate(val OptDateTime) {
	s.SecValueDate = val
}

// SetBrokerStatus sets the value of BrokerStatus.
func (s *V1BrokerReport) SetBrokerStatus(val OptString) {
	s.BrokerStatus = val
}

// SetSeparateAgreementType sets the value of SeparateAgreementType.
func (s *V1BrokerReport) SetSeparateAgreementType(val OptString) {
	s.SeparateAgreementType = val
}

// SetSeparateAgreementNumber sets the value of SeparateAgreementNumber.
func (s *V1BrokerReport) SetSeparateAgreementNumber(val OptString) {
	s.SeparateAgreementNumber = val
}

// SetSeparateAgreementDate sets the value of SeparateAgreementDate.
func (s *V1BrokerReport) SetSeparateAgreementDate(val OptString) {
	s.SeparateAgreementDate = val
}

// SetDeliveryType sets the value of DeliveryType.
func (s *V1BrokerReport) SetDeliveryType(val OptString) {
	s.DeliveryType = val
}

// Ref: #/components/schemas/v1BrokerReportRequest
type V1BrokerReportRequest struct {
	GenerateBrokerReportRequest OptV1GenerateBrokerReportRequest `json:"generateBrokerReportRequest"`
	GetBrokerReportRequest      OptV1GetBrokerReportRequest      `json:"getBrokerReportRequest"`
}

// GetGenerateBrokerReportRequest returns the value of GenerateBrokerReportRequest.
func (s *V1BrokerReportRequest) GetGenerateBrokerReportRequest() OptV1GenerateBrokerReportRequest {
	return s.GenerateBrokerReportRequest
}

// GetGetBrokerReportRequest returns the value of GetBrokerReportRequest.
func (s *V1BrokerReportRequest) GetGetBrokerReportRequest() OptV1GetBrokerReportRequest {
	return s.GetBrokerReportRequest
}

// SetGenerateBrokerReportRequest sets the value of GenerateBrokerReportRequest.
func (s *V1BrokerReportRequest) SetGenerateBrokerReportRequest(val OptV1GenerateBrokerReportRequest) {
	s.GenerateBrokerReportRequest = val
}

// SetGetBrokerReportRequest sets the value of GetBrokerReportRequest.
func (s *V1BrokerReportRequest) SetGetBrokerReportRequest(val OptV1GetBrokerReportRequest) {
	s.GetBrokerReportRequest = val
}

// Ref: #/components/schemas/v1BrokerReportResponse
type V1BrokerReportResponse struct {
	GenerateBrokerReportResponse OptV1GenerateBrokerReportResponse `json:"generateBrokerReportResponse"`
	GetBrokerReportResponse      OptV1GetBrokerReportResponse      `json:"getBrokerReportResponse"`
}

// GetGenerateBrokerReportResponse returns the value of GenerateBrokerReportResponse.
func (s *V1BrokerReportResponse) GetGenerateBrokerReportResponse() OptV1GenerateBrokerReportResponse {
	return s.GenerateBrokerReportResponse
}

// GetGetBrokerReportResponse returns the value of GetBrokerReportResponse.
func (s *V1BrokerReportResponse) GetGetBrokerReportResponse() OptV1GetBrokerReportResponse {
	return s.GetBrokerReportResponse
}

// SetGenerateBrokerReportResponse sets the value of GenerateBrokerReportResponse.
func (s *V1BrokerReportResponse) SetGenerateBrokerReportResponse(val OptV1GenerateBrokerReportResponse) {
	s.GenerateBrokerReportResponse = val
}

// SetGetBrokerReportResponse sets the value of GetBrokerReportResponse.
func (s *V1BrokerReportResponse) SetGetBrokerReportResponse(val OptV1GetBrokerReportResponse) {
	s.GetBrokerReportResponse = val
}

func (*V1BrokerReportResponse) operationsServiceGetBrokerReportRes() {}

// Запрос отмены торгового поручения.
// Ref: #/components/schemas/v1CancelOrderRequest
type V1CancelOrderRequest struct {
	AccountId OptString `json:"accountId"`
	OrderId   OptString `json:"orderId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1CancelOrderRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetOrderId returns the value of OrderId.
func (s *V1CancelOrderRequest) GetOrderId() OptString {
	return s.OrderId
}

// SetAccountId sets the value of AccountId.
func (s *V1CancelOrderRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetOrderId sets the value of OrderId.
func (s *V1CancelOrderRequest) SetOrderId(val OptString) {
	s.OrderId = val
}

// Результат отмены торгового поручения.
// Ref: #/components/schemas/v1CancelOrderResponse
type V1CancelOrderResponse struct {
	Time OptDateTime `json:"time"`
}

// GetTime returns the value of Time.
func (s *V1CancelOrderResponse) GetTime() OptDateTime {
	return s.Time
}

// SetTime sets the value of Time.
func (s *V1CancelOrderResponse) SetTime(val OptDateTime) {
	s.Time = val
}

func (*V1CancelOrderResponse) ordersServiceCancelOrderRes()         {}
func (*V1CancelOrderResponse) sandboxServiceCancelSandboxOrderRes() {}

// Запрос отмены выставленной стоп-заявки.
// Ref: #/components/schemas/v1CancelStopOrderRequest
type V1CancelStopOrderRequest struct {
	AccountId   OptString `json:"accountId"`
	StopOrderId OptString `json:"stopOrderId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1CancelStopOrderRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetStopOrderId returns the value of StopOrderId.
func (s *V1CancelStopOrderRequest) GetStopOrderId() OptString {
	return s.StopOrderId
}

// SetAccountId sets the value of AccountId.
func (s *V1CancelStopOrderRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetStopOrderId sets the value of StopOrderId.
func (s *V1CancelStopOrderRequest) SetStopOrderId(val OptString) {
	s.StopOrderId = val
}

// Результат отмены выставленной стоп-заявки.
// Ref: #/components/schemas/v1CancelStopOrderResponse
type V1CancelStopOrderResponse struct {
	Time OptDateTime `json:"time"`
}

// GetTime returns the value of Time.
func (s *V1CancelStopOrderResponse) GetTime() OptDateTime {
	return s.Time
}

// SetTime sets the value of Time.
func (s *V1CancelStopOrderResponse) SetTime(val OptDateTime) {
	s.Time = val
}

func (*V1CancelStopOrderResponse) stopOrdersServiceCancelStopOrderRes() {}

// Интервал свечей.
// Ref: #/components/schemas/v1CandleInterval
type V1CandleInterval string

const (
	V1CandleIntervalCANDLEINTERVALUNSPECIFIED V1CandleInterval = "CANDLE_INTERVAL_UNSPECIFIED"
	V1CandleIntervalCANDLEINTERVAL1MIN        V1CandleInterval = "CANDLE_INTERVAL_1_MIN"
	V1CandleIntervalCANDLEINTERVAL5MIN        V1CandleInterval = "CANDLE_INTERVAL_5_MIN"
	V1CandleIntervalCANDLEINTERVAL15MIN       V1CandleInterval = "CANDLE_INTERVAL_15_MIN"
	V1CandleIntervalCANDLEINTERVALHOUR        V1CandleInterval = "CANDLE_INTERVAL_HOUR"
	V1CandleIntervalCANDLEINTERVALDAY         V1CandleInterval = "CANDLE_INTERVAL_DAY"
	V1CandleIntervalCANDLEINTERVAL2MIN        V1CandleInterval = "CANDLE_INTERVAL_2_MIN"
	V1CandleIntervalCANDLEINTERVAL3MIN        V1CandleInterval = "CANDLE_INTERVAL_3_MIN"
	V1CandleIntervalCANDLEINTERVAL10MIN       V1CandleInterval = "CANDLE_INTERVAL_10_MIN"
	V1CandleIntervalCANDLEINTERVAL30MIN       V1CandleInterval = "CANDLE_INTERVAL_30_MIN"
	V1CandleIntervalCANDLEINTERVAL2HOUR       V1CandleInterval = "CANDLE_INTERVAL_2_HOUR"
	V1CandleIntervalCANDLEINTERVAL4HOUR       V1CandleInterval = "CANDLE_INTERVAL_4_HOUR"
	V1CandleIntervalCANDLEINTERVALWEEK        V1CandleInterval = "CANDLE_INTERVAL_WEEK"
	V1CandleIntervalCANDLEINTERVALMONTH       V1CandleInterval = "CANDLE_INTERVAL_MONTH"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1CandleInterval) MarshalText() ([]byte, error) {
	switch s {
	case V1CandleIntervalCANDLEINTERVALUNSPECIFIED:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL1MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL5MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL15MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVALHOUR:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVALDAY:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL2MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL3MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL10MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL30MIN:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL2HOUR:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVAL4HOUR:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVALWEEK:
		return []byte(s), nil
	case V1CandleIntervalCANDLEINTERVALMONTH:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1CandleInterval) UnmarshalText(data []byte) error {
	switch V1CandleInterval(data) {
	case V1CandleIntervalCANDLEINTERVALUNSPECIFIED:
		*s = V1CandleIntervalCANDLEINTERVALUNSPECIFIED
		return nil
	case V1CandleIntervalCANDLEINTERVAL1MIN:
		*s = V1CandleIntervalCANDLEINTERVAL1MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL5MIN:
		*s = V1CandleIntervalCANDLEINTERVAL5MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL15MIN:
		*s = V1CandleIntervalCANDLEINTERVAL15MIN
		return nil
	case V1CandleIntervalCANDLEINTERVALHOUR:
		*s = V1CandleIntervalCANDLEINTERVALHOUR
		return nil
	case V1CandleIntervalCANDLEINTERVALDAY:
		*s = V1CandleIntervalCANDLEINTERVALDAY
		return nil
	case V1CandleIntervalCANDLEINTERVAL2MIN:
		*s = V1CandleIntervalCANDLEINTERVAL2MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL3MIN:
		*s = V1CandleIntervalCANDLEINTERVAL3MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL10MIN:
		*s = V1CandleIntervalCANDLEINTERVAL10MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL30MIN:
		*s = V1CandleIntervalCANDLEINTERVAL30MIN
		return nil
	case V1CandleIntervalCANDLEINTERVAL2HOUR:
		*s = V1CandleIntervalCANDLEINTERVAL2HOUR
		return nil
	case V1CandleIntervalCANDLEINTERVAL4HOUR:
		*s = V1CandleIntervalCANDLEINTERVAL4HOUR
		return nil
	case V1CandleIntervalCANDLEINTERVALWEEK:
		*s = V1CandleIntervalCANDLEINTERVALWEEK
		return nil
	case V1CandleIntervalCANDLEINTERVALMONTH:
		*s = V1CandleIntervalCANDLEINTERVALMONTH
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос закрытия счёта в песочнице.
// Ref: #/components/schemas/v1CloseSandboxAccountRequest
type V1CloseSandboxAccountRequest struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1CloseSandboxAccountRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1CloseSandboxAccountRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Результат закрытия счёта в песочнице.
// Ref: #/components/schemas/v1CloseSandboxAccountResponse
type V1CloseSandboxAccountResponse struct{}

func (*V1CloseSandboxAccountResponse) sandboxServiceCloseSandboxAccountRes() {}

// Данные о стране.
// Ref: #/components/schemas/v1CountryResponse
type V1CountryResponse struct {
	AlfaTwo   OptString `json:"alfaTwo"`
	AlfaThree OptString `json:"alfaThree"`
	Name      OptString `json:"name"`
	NameBrief OptString `json:"nameBrief"`
}

// GetAlfaTwo returns the value of AlfaTwo.
func (s *V1CountryResponse) GetAlfaTwo() OptString {
	return s.AlfaTwo
}

// GetAlfaThree returns the value of AlfaThree.
func (s *V1CountryResponse) GetAlfaThree() OptString {
	return s.AlfaThree
}

// GetName returns the value of Name.
func (s *V1CountryResponse) GetName() OptString {
	return s.Name
}

// GetNameBrief returns the value of NameBrief.
func (s *V1CountryResponse) GetNameBrief() OptString {
	return s.NameBrief
}

// SetAlfaTwo sets the value of AlfaTwo.
func (s *V1CountryResponse) SetAlfaTwo(val OptString) {
	s.AlfaTwo = val
}

// SetAlfaThree sets the value of AlfaThree.
func (s *V1CountryResponse) SetAlfaThree(val OptString) {
	s.AlfaThree = val
}

// SetName sets the value of Name.
func (s *V1CountryResponse) SetName(val OptString) {
	s.Name = val
}

// SetNameBrief sets the value of NameBrief.
func (s *V1CountryResponse) SetNameBrief(val OptString) {
	s.NameBrief = val
}

// Объект передачи информации о купоне облигации.
// Ref: #/components/schemas/v1Coupon
type V1Coupon struct {
	Figi            OptString       `json:"figi"`
	CouponDate      OptDateTime     `json:"couponDate"`
	CouponNumber    OptStringInt64  `json:"couponNumber"`
	FixDate         OptDateTime     `json:"fixDate"`
	PayOneBond      OptV1MoneyValue `json:"payOneBond"`
	CouponType      OptV1CouponType `json:"couponType"`
	CouponStartDate OptDateTime     `json:"couponStartDate"`
	CouponEndDate   OptDateTime     `json:"couponEndDate"`
	CouponPeriod    OptInt32        `json:"couponPeriod"`
}

// GetFigi returns the value of Figi.
func (s *V1Coupon) GetFigi() OptString {
	return s.Figi
}

// GetCouponDate returns the value of CouponDate.
func (s *V1Coupon) GetCouponDate() OptDateTime {
	return s.CouponDate
}

// GetCouponNumber returns the value of CouponNumber.
func (s *V1Coupon) GetCouponNumber() OptStringInt64 {
	return s.CouponNumber
}

// GetFixDate returns the value of FixDate.
func (s *V1Coupon) GetFixDate() OptDateTime {
	return s.FixDate
}

// GetPayOneBond returns the value of PayOneBond.
func (s *V1Coupon) GetPayOneBond() OptV1MoneyValue {
	return s.PayOneBond
}

// GetCouponType returns the value of CouponType.
func (s *V1Coupon) GetCouponType() OptV1CouponType {
	return s.CouponType
}

// GetCouponStartDate returns the value of CouponStartDate.
func (s *V1Coupon) GetCouponStartDate() OptDateTime {
	return s.CouponStartDate
}

// GetCouponEndDate returns the value of CouponEndDate.
func (s *V1Coupon) GetCouponEndDate() OptDateTime {
	return s.CouponEndDate
}

// GetCouponPeriod returns the value of CouponPeriod.
func (s *V1Coupon) GetCouponPeriod() OptInt32 {
	return s.CouponPeriod
}

// SetFigi sets the value of Figi.
func (s *V1Coupon) SetFigi(val OptString) {
	s.Figi = val
}

// SetCouponDate sets the value of CouponDate.
func (s *V1Coupon) SetCouponDate(val OptDateTime) {
	s.CouponDate = val
}

// SetCouponNumber sets the value of CouponNumber.
func (s *V1Coupon) SetCouponNumber(val OptStringInt64) {
	s.CouponNumber = val
}

// SetFixDate sets the value of FixDate.
func (s *V1Coupon) SetFixDate(val OptDateTime) {
	s.FixDate = val
}

// SetPayOneBond sets the value of PayOneBond.
func (s *V1Coupon) SetPayOneBond(val OptV1MoneyValue) {
	s.PayOneBond = val
}

// SetCouponType sets the value of CouponType.
func (s *V1Coupon) SetCouponType(val OptV1CouponType) {
	s.CouponType = val
}

// SetCouponStartDate sets the value of CouponStartDate.
func (s *V1Coupon) SetCouponStartDate(val OptDateTime) {
	s.CouponStartDate = val
}

// SetCouponEndDate sets the value of CouponEndDate.
func (s *V1Coupon) SetCouponEndDate(val OptDateTime) {
	s.CouponEndDate = val
}

// SetCouponPeriod sets the value of CouponPeriod.
func (s *V1Coupon) SetCouponPeriod(val OptInt32) {
	s.CouponPeriod = val
}

// Тип купонов.
// Ref: #/components/schemas/v1CouponType
type V1CouponType string

const (
	V1CouponTypeCOUPONTYPEUNSPECIFIED V1CouponType = "COUPON_TYPE_UNSPECIFIED"
	V1CouponTypeCOUPONTYPECONSTANT    V1CouponType = "COUPON_TYPE_CONSTANT"
	V1CouponTypeCOUPONTYPEFLOATING    V1CouponType = "COUPON_TYPE_FLOATING"
	V1CouponTypeCOUPONTYPEDISCOUNT    V1CouponType = "COUPON_TYPE_DISCOUNT"
	V1CouponTypeCOUPONTYPEMORTGAGE    V1CouponType = "COUPON_TYPE_MORTGAGE"
	V1CouponTypeCOUPONTYPEFIX         V1CouponType = "COUPON_TYPE_FIX"
	V1CouponTypeCOUPONTYPEVARIABLE    V1CouponType = "COUPON_TYPE_VARIABLE"
	V1CouponTypeCOUPONTYPEOTHER       V1CouponType = "COUPON_TYPE_OTHER"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1CouponType) MarshalText() ([]byte, error) {
	switch s {
	case V1CouponTypeCOUPONTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPECONSTANT:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEFLOATING:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEDISCOUNT:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEMORTGAGE:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEFIX:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEVARIABLE:
		return []byte(s), nil
	case V1CouponTypeCOUPONTYPEOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1CouponType) UnmarshalText(data []byte) error {
	switch V1CouponType(data) {
	case V1CouponTypeCOUPONTYPEUNSPECIFIED:
		*s = V1CouponTypeCOUPONTYPEUNSPECIFIED
		return nil
	case V1CouponTypeCOUPONTYPECONSTANT:
		*s = V1CouponTypeCOUPONTYPECONSTANT
		return nil
	case V1CouponTypeCOUPONTYPEFLOATING:
		*s = V1CouponTypeCOUPONTYPEFLOATING
		return nil
	case V1CouponTypeCOUPONTYPEDISCOUNT:
		*s = V1CouponTypeCOUPONTYPEDISCOUNT
		return nil
	case V1CouponTypeCOUPONTYPEMORTGAGE:
		*s = V1CouponTypeCOUPONTYPEMORTGAGE
		return nil
	case V1CouponTypeCOUPONTYPEFIX:
		*s = V1CouponTypeCOUPONTYPEFIX
		return nil
	case V1CouponTypeCOUPONTYPEVARIABLE:
		*s = V1CouponTypeCOUPONTYPEVARIABLE
		return nil
	case V1CouponTypeCOUPONTYPEOTHER:
		*s = V1CouponTypeCOUPONTYPEOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные по валютам.
// Ref: #/components/schemas/v1CurrenciesResponse
type V1CurrenciesResponse struct {
	Instruments []V1Currency `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1CurrenciesResponse) GetInstruments() []V1Currency {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1CurrenciesResponse) SetInstruments(val []V1Currency) {
	s.Instruments = val
}

func (*V1CurrenciesResponse) instrumentsServiceCurrenciesRes() {}

// Объект передачи информации о валюте.
// Ref: #/components/schemas/v1Currency
type V1Currency struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Isin                  OptString                  `json:"isin"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	Nominal               OptV1MoneyValue            `json:"nominal"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	IsoCurrencyName       OptString                  `json:"isoCurrencyName"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
}

// GetFigi returns the value of Figi.
func (s *V1Currency) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Currency) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Currency) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1Currency) GetIsin() OptString {
	return s.Isin
}

// GetLot returns the value of Lot.
func (s *V1Currency) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Currency) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Currency) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Currency) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Currency) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Currency) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Currency) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Currency) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Currency) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Currency) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Currency) GetExchange() OptString {
	return s.Exchange
}

// GetNominal returns the value of Nominal.
func (s *V1Currency) GetNominal() OptV1MoneyValue {
	return s.Nominal
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Currency) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Currency) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Currency) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Currency) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Currency) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Currency) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetIsoCurrencyName returns the value of IsoCurrencyName.
func (s *V1Currency) GetIsoCurrencyName() OptString {
	return s.IsoCurrencyName
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Currency) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Currency) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Currency) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Currency) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Currency) GetPositionUid() OptString {
	return s.PositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Currency) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Currency) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Currency) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Currency) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Currency) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Currency) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// SetFigi sets the value of Figi.
func (s *V1Currency) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Currency) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Currency) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1Currency) SetIsin(val OptString) {
	s.Isin = val
}

// SetLot sets the value of Lot.
func (s *V1Currency) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Currency) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Currency) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Currency) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Currency) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Currency) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Currency) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Currency) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Currency) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Currency) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Currency) SetExchange(val OptString) {
	s.Exchange = val
}

// SetNominal sets the value of Nominal.
func (s *V1Currency) SetNominal(val OptV1MoneyValue) {
	s.Nominal = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Currency) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Currency) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Currency) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Currency) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Currency) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Currency) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetIsoCurrencyName sets the value of IsoCurrencyName.
func (s *V1Currency) SetIsoCurrencyName(val OptString) {
	s.IsoCurrencyName = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Currency) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Currency) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Currency) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Currency) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Currency) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Currency) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Currency) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Currency) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Currency) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Currency) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Currency) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// Данные по валюте.
// Ref: #/components/schemas/v1CurrencyResponse
type V1CurrencyResponse struct {
	Instrument OptV1Currency `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1CurrencyResponse) GetInstrument() OptV1Currency {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1CurrencyResponse) SetInstrument(val OptV1Currency) {
	s.Instrument = val
}

func (*V1CurrencyResponse) instrumentsServiceCurrencyByRes() {}

// Информация о выплате.
// Ref: #/components/schemas/v1Dividend
type V1Dividend struct {
	DividendNet  OptV1MoneyValue `json:"dividendNet"`
	PaymentDate  OptDateTime     `json:"paymentDate"`
	DeclaredDate OptDateTime     `json:"declaredDate"`
	LastBuyDate  OptDateTime     `json:"lastBuyDate"`
	DividendType OptString       `json:"dividendType"`
	RecordDate   OptDateTime     `json:"recordDate"`
	Regularity   OptString       `json:"regularity"`
	ClosePrice   OptV1MoneyValue `json:"closePrice"`
	YieldValue   OptV1Quotation  `json:"yieldValue"`
	CreatedAt    OptDateTime     `json:"createdAt"`
}

// GetDividendNet returns the value of DividendNet.
func (s *V1Dividend) GetDividendNet() OptV1MoneyValue {
	return s.DividendNet
}

// GetPaymentDate returns the value of PaymentDate.
func (s *V1Dividend) GetPaymentDate() OptDateTime {
	return s.PaymentDate
}

// GetDeclaredDate returns the value of DeclaredDate.
func (s *V1Dividend) GetDeclaredDate() OptDateTime {
	return s.DeclaredDate
}

// GetLastBuyDate returns the value of LastBuyDate.
func (s *V1Dividend) GetLastBuyDate() OptDateTime {
	return s.LastBuyDate
}

// GetDividendType returns the value of DividendType.
func (s *V1Dividend) GetDividendType() OptString {
	return s.DividendType
}

// GetRecordDate returns the value of RecordDate.
func (s *V1Dividend) GetRecordDate() OptDateTime {
	return s.RecordDate
}

// GetRegularity returns the value of Regularity.
func (s *V1Dividend) GetRegularity() OptString {
	return s.Regularity
}

// GetClosePrice returns the value of ClosePrice.
func (s *V1Dividend) GetClosePrice() OptV1MoneyValue {
	return s.ClosePrice
}

// GetYieldValue returns the value of YieldValue.
func (s *V1Dividend) GetYieldValue() OptV1Quotation {
	return s.YieldValue
}

// GetCreatedAt returns the value of CreatedAt.
func (s *V1Dividend) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetDividendNet sets the value of DividendNet.
func (s *V1Dividend) SetDividendNet(val OptV1MoneyValue) {
	s.DividendNet = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *V1Dividend) SetPaymentDate(val OptDateTime) {
	s.PaymentDate = val
}

// SetDeclaredDate sets the value of DeclaredDate.
func (s *V1Dividend) SetDeclaredDate(val OptDateTime) {
	s.DeclaredDate = val
}

// SetLastBuyDate sets the value of LastBuyDate.
func (s *V1Dividend) SetLastBuyDate(val OptDateTime) {
	s.LastBuyDate = val
}

// SetDividendType sets the value of DividendType.
func (s *V1Dividend) SetDividendType(val OptString) {
	s.DividendType = val
}

// SetRecordDate sets the value of RecordDate.
func (s *V1Dividend) SetRecordDate(val OptDateTime) {
	s.RecordDate = val
}

// SetRegularity sets the value of Regularity.
func (s *V1Dividend) SetRegularity(val OptString) {
	s.Regularity = val
}

// SetClosePrice sets the value of ClosePrice.
func (s *V1Dividend) SetClosePrice(val OptV1MoneyValue) {
	s.ClosePrice = val
}

// SetYieldValue sets the value of YieldValue.
func (s *V1Dividend) SetYieldValue(val OptV1Quotation) {
	s.YieldValue = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *V1Dividend) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// Отчёт "Справка о доходах за пределами РФ".
// Ref: #/components/schemas/v1DividendsForeignIssuerReport
type V1DividendsForeignIssuerReport struct {
	RecordDate         OptDateTime    `json:"recordDate"`
	PaymentDate        OptDateTime    `json:"paymentDate"`
	SecurityName       OptString      `json:"securityName"`
	Isin               OptString      `json:"isin"`
	IssuerCountry      OptString      `json:"issuerCountry"`
	Quantity           OptStringInt64 `json:"quantity"`
	Dividend           OptV1Quotation `json:"dividend"`
	ExternalCommission OptV1Quotation `json:"externalCommission"`
	DividendGross      OptV1Quotation `json:"dividendGross"`
	Tax                OptV1Quotation `json:"tax"`
	DividendAmount     OptV1Quotation `json:"dividendAmount"`
	Currency           OptString      `json:"currency"`
}

// GetRecordDate returns the value of RecordDate.
func (s *V1DividendsForeignIssuerReport) GetRecordDate() OptDateTime {
	return s.RecordDate
}

// GetPaymentDate returns the value of PaymentDate.
func (s *V1DividendsForeignIssuerReport) GetPaymentDate() OptDateTime {
	return s.PaymentDate
}

// GetSecurityName returns the value of SecurityName.
func (s *V1DividendsForeignIssuerReport) GetSecurityName() OptString {
	return s.SecurityName
}

// GetIsin returns the value of Isin.
func (s *V1DividendsForeignIssuerReport) GetIsin() OptString {
	return s.Isin
}

// GetIssuerCountry returns the value of IssuerCountry.
func (s *V1DividendsForeignIssuerReport) GetIssuerCountry() OptString {
	return s.IssuerCountry
}

// GetQuantity returns the value of Quantity.
func (s *V1DividendsForeignIssuerReport) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetDividend returns the value of Dividend.
func (s *V1DividendsForeignIssuerReport) GetDividend() OptV1Quotation {
	return s.Dividend
}

// GetExternalCommission returns the value of ExternalCommission.
func (s *V1DividendsForeignIssuerReport) GetExternalCommission() OptV1Quotation {
	return s.ExternalCommission
}

// GetDividendGross returns the value of DividendGross.
func (s *V1DividendsForeignIssuerReport) GetDividendGross() OptV1Quotation {
	return s.DividendGross
}

// GetTax returns the value of Tax.
func (s *V1DividendsForeignIssuerReport) GetTax() OptV1Quotation {
	return s.Tax
}

// GetDividendAmount returns the value of DividendAmount.
func (s *V1DividendsForeignIssuerReport) GetDividendAmount() OptV1Quotation {
	return s.DividendAmount
}

// GetCurrency returns the value of Currency.
func (s *V1DividendsForeignIssuerReport) GetCurrency() OptString {
	return s.Currency
}

// SetRecordDate sets the value of RecordDate.
func (s *V1DividendsForeignIssuerReport) SetRecordDate(val OptDateTime) {
	s.RecordDate = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *V1DividendsForeignIssuerReport) SetPaymentDate(val OptDateTime) {
	s.PaymentDate = val
}

// SetSecurityName sets the value of SecurityName.
func (s *V1DividendsForeignIssuerReport) SetSecurityName(val OptString) {
	s.SecurityName = val
}

// SetIsin sets the value of Isin.
func (s *V1DividendsForeignIssuerReport) SetIsin(val OptString) {
	s.Isin = val
}

// SetIssuerCountry sets the value of IssuerCountry.
func (s *V1DividendsForeignIssuerReport) SetIssuerCountry(val OptString) {
	s.IssuerCountry = val
}

// SetQuantity sets the value of Quantity.
func (s *V1DividendsForeignIssuerReport) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetDividend sets the value of Dividend.
func (s *V1DividendsForeignIssuerReport) SetDividend(val OptV1Quotation) {
	s.Dividend = val
}

// SetExternalCommission sets the value of ExternalCommission.
func (s *V1DividendsForeignIssuerReport) SetExternalCommission(val OptV1Quotation) {
	s.ExternalCommission = val
}

// SetDividendGross sets the value of DividendGross.
func (s *V1DividendsForeignIssuerReport) SetDividendGross(val OptV1Quotation) {
	s.DividendGross = val
}

// SetTax sets the value of Tax.
func (s *V1DividendsForeignIssuerReport) SetTax(val OptV1Quotation) {
	s.Tax = val
}

// SetDividendAmount sets the value of DividendAmount.
func (s *V1DividendsForeignIssuerReport) SetDividendAmount(val OptV1Quotation) {
	s.DividendAmount = val
}

// SetCurrency sets the value of Currency.
func (s *V1DividendsForeignIssuerReport) SetCurrency(val OptString) {
	s.Currency = val
}

// Тип действия со списком избранных инструментов.
// Ref: #/components/schemas/v1EditFavoritesActionType
type V1EditFavoritesActionType string

const (
	V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEUNSPECIFIED V1EditFavoritesActionType = "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED"
	V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEADD         V1EditFavoritesActionType = "EDIT_FAVORITES_ACTION_TYPE_ADD"
	V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEDEL         V1EditFavoritesActionType = "EDIT_FAVORITES_ACTION_TYPE_DEL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1EditFavoritesActionType) MarshalText() ([]byte, error) {
	switch s {
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEADD:
		return []byte(s), nil
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEDEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1EditFavoritesActionType) UnmarshalText(data []byte) error {
	switch V1EditFavoritesActionType(data) {
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEUNSPECIFIED:
		*s = V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEUNSPECIFIED
		return nil
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEADD:
		*s = V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEADD
		return nil
	case V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEDEL:
		*s = V1EditFavoritesActionTypeEDITFAVORITESACTIONTYPEDEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос редактирования списка избранных инструментов.
// Ref: #/components/schemas/v1EditFavoritesRequest
type V1EditFavoritesRequest struct {
	Instruments []V1EditFavoritesRequestInstrument `json:"instruments"`
	ActionType  OptV1EditFavoritesActionType       `json:"actionType"`
}

// GetInstruments returns the value of Instruments.
func (s *V1EditFavoritesRequest) GetInstruments() []V1EditFavoritesRequestInstrument {
	return s.Instruments
}

// GetActionType returns the value of ActionType.
func (s *V1EditFavoritesRequest) GetActionType() OptV1EditFavoritesActionType {
	return s.ActionType
}

// SetInstruments sets the value of Instruments.
func (s *V1EditFavoritesRequest) SetInstruments(val []V1EditFavoritesRequestInstrument) {
	s.Instruments = val
}

// SetActionType sets the value of ActionType.
func (s *V1EditFavoritesRequest) SetActionType(val OptV1EditFavoritesActionType) {
	s.ActionType = val
}

// Массив инструментов для редактирования списка
// избранных инструментов.
// Ref: #/components/schemas/v1EditFavoritesRequestInstrument
type V1EditFavoritesRequestInstrument struct {
	Figi OptString `json:"figi"`
}

// GetFigi returns the value of Figi.
func (s *V1EditFavoritesRequestInstrument) GetFigi() OptString {
	return s.Figi
}

// SetFigi sets the value of Figi.
func (s *V1EditFavoritesRequestInstrument) SetFigi(val OptString) {
	s.Figi = val
}

// Результат редактирования списка избранных
// инструментов.
// Ref: #/components/schemas/v1EditFavoritesResponse
type V1EditFavoritesResponse struct {
	FavoriteInstruments []V1FavoriteInstrument `json:"favoriteInstruments"`
}

// GetFavoriteInstruments returns the value of FavoriteInstruments.
func (s *V1EditFavoritesResponse) GetFavoriteInstruments() []V1FavoriteInstrument {
	return s.FavoriteInstruments
}

// SetFavoriteInstruments sets the value of FavoriteInstruments.
func (s *V1EditFavoritesResponse) SetFavoriteInstruments(val []V1FavoriteInstrument) {
	s.FavoriteInstruments = val
}

func (*V1EditFavoritesResponse) instrumentsServiceEditFavoritesRes() {}

// Объект передачи информации об инвестиционном фонде.
// Ref: #/components/schemas/v1Etf
type V1Etf struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Isin                  OptString                  `json:"isin"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	FixedCommission       OptV1Quotation             `json:"fixedCommission"`
	FocusType             OptString                  `json:"focusType"`
	ReleasedDate          OptDateTime                `json:"releasedDate"`
	NumShares             OptV1Quotation             `json:"numShares"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	Sector                OptString                  `json:"sector"`
	RebalancingFreq       OptString                  `json:"rebalancingFreq"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
}

// GetFigi returns the value of Figi.
func (s *V1Etf) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Etf) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Etf) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1Etf) GetIsin() OptString {
	return s.Isin
}

// GetLot returns the value of Lot.
func (s *V1Etf) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Etf) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Etf) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Etf) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Etf) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Etf) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Etf) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Etf) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Etf) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Etf) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Etf) GetExchange() OptString {
	return s.Exchange
}

// GetFixedCommission returns the value of FixedCommission.
func (s *V1Etf) GetFixedCommission() OptV1Quotation {
	return s.FixedCommission
}

// GetFocusType returns the value of FocusType.
func (s *V1Etf) GetFocusType() OptString {
	return s.FocusType
}

// GetReleasedDate returns the value of ReleasedDate.
func (s *V1Etf) GetReleasedDate() OptDateTime {
	return s.ReleasedDate
}

// GetNumShares returns the value of NumShares.
func (s *V1Etf) GetNumShares() OptV1Quotation {
	return s.NumShares
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Etf) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Etf) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetSector returns the value of Sector.
func (s *V1Etf) GetSector() OptString {
	return s.Sector
}

// GetRebalancingFreq returns the value of RebalancingFreq.
func (s *V1Etf) GetRebalancingFreq() OptString {
	return s.RebalancingFreq
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Etf) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Etf) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Etf) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Etf) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Etf) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Etf) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Etf) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Etf) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Etf) GetPositionUid() OptString {
	return s.PositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Etf) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Etf) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Etf) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Etf) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Etf) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Etf) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// SetFigi sets the value of Figi.
func (s *V1Etf) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Etf) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Etf) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1Etf) SetIsin(val OptString) {
	s.Isin = val
}

// SetLot sets the value of Lot.
func (s *V1Etf) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Etf) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Etf) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Etf) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Etf) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Etf) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Etf) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Etf) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Etf) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Etf) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Etf) SetExchange(val OptString) {
	s.Exchange = val
}

// SetFixedCommission sets the value of FixedCommission.
func (s *V1Etf) SetFixedCommission(val OptV1Quotation) {
	s.FixedCommission = val
}

// SetFocusType sets the value of FocusType.
func (s *V1Etf) SetFocusType(val OptString) {
	s.FocusType = val
}

// SetReleasedDate sets the value of ReleasedDate.
func (s *V1Etf) SetReleasedDate(val OptDateTime) {
	s.ReleasedDate = val
}

// SetNumShares sets the value of NumShares.
func (s *V1Etf) SetNumShares(val OptV1Quotation) {
	s.NumShares = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Etf) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Etf) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetSector sets the value of Sector.
func (s *V1Etf) SetSector(val OptString) {
	s.Sector = val
}

// SetRebalancingFreq sets the value of RebalancingFreq.
func (s *V1Etf) SetRebalancingFreq(val OptString) {
	s.RebalancingFreq = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Etf) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Etf) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Etf) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Etf) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Etf) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Etf) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Etf) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Etf) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Etf) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Etf) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Etf) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Etf) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Etf) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Etf) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Etf) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// Данные по фонду.
// Ref: #/components/schemas/v1EtfResponse
type V1EtfResponse struct {
	Instrument OptV1Etf `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1EtfResponse) GetInstrument() OptV1Etf {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1EtfResponse) SetInstrument(val OptV1Etf) {
	s.Instrument = val
}

func (*V1EtfResponse) instrumentsServiceEtfByRes() {}

// Данные по фондам.
// Ref: #/components/schemas/v1EtfsResponse
type V1EtfsResponse struct {
	Instruments []V1Etf `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1EtfsResponse) GetInstruments() []V1Etf {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1EtfsResponse) SetInstruments(val []V1Etf) {
	s.Instruments = val
}

func (*V1EtfsResponse) instrumentsServiceEtfsRes() {}

// Массив избранных инструментов.
// Ref: #/components/schemas/v1FavoriteInstrument
type V1FavoriteInstrument struct {
	Figi                  OptString           `json:"figi"`
	Ticker                OptString           `json:"ticker"`
	ClassCode             OptString           `json:"classCode"`
	Isin                  OptString           `json:"isin"`
	InstrumentType        OptString           `json:"instrumentType"`
	OtcFlag               OptBool             `json:"otcFlag"`
	ApiTradeAvailableFlag OptBool             `json:"apiTradeAvailableFlag"`
	InstrumentKind        OptV1InstrumentType `json:"instrumentKind"`
}

// GetFigi returns the value of Figi.
func (s *V1FavoriteInstrument) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1FavoriteInstrument) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1FavoriteInstrument) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1FavoriteInstrument) GetIsin() OptString {
	return s.Isin
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1FavoriteInstrument) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1FavoriteInstrument) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1FavoriteInstrument) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1FavoriteInstrument) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// SetFigi sets the value of Figi.
func (s *V1FavoriteInstrument) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1FavoriteInstrument) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1FavoriteInstrument) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1FavoriteInstrument) SetIsin(val OptString) {
	s.Isin = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1FavoriteInstrument) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1FavoriteInstrument) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1FavoriteInstrument) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1FavoriteInstrument) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// Запрос на поиск инструментов.
// Ref: #/components/schemas/v1FindInstrumentRequest
type V1FindInstrumentRequest struct {
	Query OptString `json:"query"`
}

// GetQuery returns the value of Query.
func (s *V1FindInstrumentRequest) GetQuery() OptString {
	return s.Query
}

// SetQuery sets the value of Query.
func (s *V1FindInstrumentRequest) SetQuery(val OptString) {
	s.Query = val
}

// Результат поиска инструментов.
// Ref: #/components/schemas/v1FindInstrumentResponse
type V1FindInstrumentResponse struct {
	Instruments []V1InstrumentShort `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1FindInstrumentResponse) GetInstruments() []V1InstrumentShort {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1FindInstrumentResponse) SetInstruments(val []V1InstrumentShort) {
	s.Instruments = val
}

func (*V1FindInstrumentResponse) instrumentsServiceFindInstrumentRes() {}

// Объект передачи информации о фьючерсе.
// Ref: #/components/schemas/v1Future
type V1Future struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	FirstTradeDate        OptDateTime                `json:"firstTradeDate"`
	LastTradeDate         OptDateTime                `json:"lastTradeDate"`
	FuturesType           OptString                  `json:"futuresType"`
	AssetType             OptString                  `json:"assetType"`
	BasicAsset            OptString                  `json:"basicAsset"`
	BasicAssetSize        OptV1Quotation             `json:"basicAssetSize"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	Sector                OptString                  `json:"sector"`
	ExpirationDate        OptDateTime                `json:"expirationDate"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	BasicAssetPositionUid OptString                  `json:"basicAssetPositionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
}

// GetFigi returns the value of Figi.
func (s *V1Future) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Future) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Future) GetClassCode() OptString {
	return s.ClassCode
}

// GetLot returns the value of Lot.
func (s *V1Future) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Future) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Future) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Future) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Future) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Future) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Future) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Future) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Future) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Future) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Future) GetExchange() OptString {
	return s.Exchange
}

// GetFirstTradeDate returns the value of FirstTradeDate.
func (s *V1Future) GetFirstTradeDate() OptDateTime {
	return s.FirstTradeDate
}

// GetLastTradeDate returns the value of LastTradeDate.
func (s *V1Future) GetLastTradeDate() OptDateTime {
	return s.LastTradeDate
}

// GetFuturesType returns the value of FuturesType.
func (s *V1Future) GetFuturesType() OptString {
	return s.FuturesType
}

// GetAssetType returns the value of AssetType.
func (s *V1Future) GetAssetType() OptString {
	return s.AssetType
}

// GetBasicAsset returns the value of BasicAsset.
func (s *V1Future) GetBasicAsset() OptString {
	return s.BasicAsset
}

// GetBasicAssetSize returns the value of BasicAssetSize.
func (s *V1Future) GetBasicAssetSize() OptV1Quotation {
	return s.BasicAssetSize
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Future) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Future) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetSector returns the value of Sector.
func (s *V1Future) GetSector() OptString {
	return s.Sector
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *V1Future) GetExpirationDate() OptDateTime {
	return s.ExpirationDate
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Future) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Future) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Future) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Future) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Future) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Future) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Future) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Future) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Future) GetPositionUid() OptString {
	return s.PositionUid
}

// GetBasicAssetPositionUid returns the value of BasicAssetPositionUid.
func (s *V1Future) GetBasicAssetPositionUid() OptString {
	return s.BasicAssetPositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Future) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Future) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Future) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Future) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Future) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Future) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// SetFigi sets the value of Figi.
func (s *V1Future) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Future) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Future) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetLot sets the value of Lot.
func (s *V1Future) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Future) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Future) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Future) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Future) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Future) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Future) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Future) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Future) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Future) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Future) SetExchange(val OptString) {
	s.Exchange = val
}

// SetFirstTradeDate sets the value of FirstTradeDate.
func (s *V1Future) SetFirstTradeDate(val OptDateTime) {
	s.FirstTradeDate = val
}

// SetLastTradeDate sets the value of LastTradeDate.
func (s *V1Future) SetLastTradeDate(val OptDateTime) {
	s.LastTradeDate = val
}

// SetFuturesType sets the value of FuturesType.
func (s *V1Future) SetFuturesType(val OptString) {
	s.FuturesType = val
}

// SetAssetType sets the value of AssetType.
func (s *V1Future) SetAssetType(val OptString) {
	s.AssetType = val
}

// SetBasicAsset sets the value of BasicAsset.
func (s *V1Future) SetBasicAsset(val OptString) {
	s.BasicAsset = val
}

// SetBasicAssetSize sets the value of BasicAssetSize.
func (s *V1Future) SetBasicAssetSize(val OptV1Quotation) {
	s.BasicAssetSize = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Future) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Future) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetSector sets the value of Sector.
func (s *V1Future) SetSector(val OptString) {
	s.Sector = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *V1Future) SetExpirationDate(val OptDateTime) {
	s.ExpirationDate = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Future) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Future) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Future) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Future) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Future) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Future) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Future) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Future) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Future) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetBasicAssetPositionUid sets the value of BasicAssetPositionUid.
func (s *V1Future) SetBasicAssetPositionUid(val OptString) {
	s.BasicAssetPositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Future) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Future) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Future) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Future) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Future) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Future) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// Данные по фьючерсу.
// Ref: #/components/schemas/v1FutureResponse
type V1FutureResponse struct {
	Instrument OptV1Future `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1FutureResponse) GetInstrument() OptV1Future {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1FutureResponse) SetInstrument(val OptV1Future) {
	s.Instrument = val
}

func (*V1FutureResponse) instrumentsServiceFutureByRes() {}

// Данные по фьючерсам.
// Ref: #/components/schemas/v1FuturesResponse
type V1FuturesResponse struct {
	Instruments []V1Future `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1FuturesResponse) GetInstruments() []V1Future {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1FuturesResponse) SetInstruments(val []V1Future) {
	s.Instruments = val
}

func (*V1FuturesResponse) instrumentsServiceFuturesRes() {}

// Ref: #/components/schemas/v1GenerateBrokerReportRequest
type V1GenerateBrokerReportRequest struct {
	AccountId OptString   `json:"accountId"`
	From      OptDateTime `json:"from"`
	To        OptDateTime `json:"to"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GenerateBrokerReportRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetFrom returns the value of From.
func (s *V1GenerateBrokerReportRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GenerateBrokerReportRequest) GetTo() OptDateTime {
	return s.To
}

// SetAccountId sets the value of AccountId.
func (s *V1GenerateBrokerReportRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetFrom sets the value of From.
func (s *V1GenerateBrokerReportRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GenerateBrokerReportRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Ref: #/components/schemas/v1GenerateBrokerReportResponse
type V1GenerateBrokerReportResponse struct {
	TaskId OptString `json:"taskId"`
}

// GetTaskId returns the value of TaskId.
func (s *V1GenerateBrokerReportResponse) GetTaskId() OptString {
	return s.TaskId
}

// SetTaskId sets the value of TaskId.
func (s *V1GenerateBrokerReportResponse) SetTaskId(val OptString) {
	s.TaskId = val
}

// Объект запроса формирования отчёта "Справка о
// доходах за пределами РФ".
// Ref: #/components/schemas/v1GenerateDividendsForeignIssuerReportRequest
type V1GenerateDividendsForeignIssuerReportRequest struct {
	AccountId OptString   `json:"accountId"`
	From      OptDateTime `json:"from"`
	To        OptDateTime `json:"to"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GenerateDividendsForeignIssuerReportRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetFrom returns the value of From.
func (s *V1GenerateDividendsForeignIssuerReportRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GenerateDividendsForeignIssuerReportRequest) GetTo() OptDateTime {
	return s.To
}

// SetAccountId sets the value of AccountId.
func (s *V1GenerateDividendsForeignIssuerReportRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetFrom sets the value of From.
func (s *V1GenerateDividendsForeignIssuerReportRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GenerateDividendsForeignIssuerReportRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Объект результата задачи запуска формирования
// отчёта "Справка о доходах за пределами РФ".
// Ref: #/components/schemas/v1GenerateDividendsForeignIssuerReportResponse
type V1GenerateDividendsForeignIssuerReportResponse struct {
	TaskId OptString `json:"taskId"`
}

// GetTaskId returns the value of TaskId.
func (s *V1GenerateDividendsForeignIssuerReportResponse) GetTaskId() OptString {
	return s.TaskId
}

// SetTaskId sets the value of TaskId.
func (s *V1GenerateDividendsForeignIssuerReportResponse) SetTaskId(val OptString) {
	s.TaskId = val
}

// Запрос получения счетов пользователя.
// Ref: #/components/schemas/v1GetAccountsRequest
type V1GetAccountsRequest struct{}

// Список счетов пользователя.
// Ref: #/components/schemas/v1GetAccountsResponse
type V1GetAccountsResponse struct {
	// Массив счетов клиента.
	Accounts []V1Account `json:"accounts"`
}

// GetAccounts returns the value of Accounts.
func (s *V1GetAccountsResponse) GetAccounts() []V1Account {
	return s.Accounts
}

// SetAccounts sets the value of Accounts.
func (s *V1GetAccountsResponse) SetAccounts(val []V1Account) {
	s.Accounts = val
}

func (*V1GetAccountsResponse) sandboxServiceGetSandboxAccountsRes() {}
func (*V1GetAccountsResponse) usersServiceGetAccountsRes()          {}

// Ref: #/components/schemas/v1GetAccruedInterestsRequest
type V1GetAccruedInterestsRequest struct {
	Figi OptString   `json:"figi"`
	From OptDateTime `json:"from"`
	To   OptDateTime `json:"to"`
}

// GetFigi returns the value of Figi.
func (s *V1GetAccruedInterestsRequest) GetFigi() OptString {
	return s.Figi
}

// GetFrom returns the value of From.
func (s *V1GetAccruedInterestsRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetAccruedInterestsRequest) GetTo() OptDateTime {
	return s.To
}

// SetFigi sets the value of Figi.
func (s *V1GetAccruedInterestsRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetFrom sets the value of From.
func (s *V1GetAccruedInterestsRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetAccruedInterestsRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Ref: #/components/schemas/v1GetAccruedInterestsResponse
type V1GetAccruedInterestsResponse struct {
	AccruedInterests []V1AccruedInterest `json:"accruedInterests"`
}

// GetAccruedInterests returns the value of AccruedInterests.
func (s *V1GetAccruedInterestsResponse) GetAccruedInterests() []V1AccruedInterest {
	return s.AccruedInterests
}

// SetAccruedInterests sets the value of AccruedInterests.
func (s *V1GetAccruedInterestsResponse) SetAccruedInterests(val []V1AccruedInterest) {
	s.AccruedInterests = val
}

func (*V1GetAccruedInterestsResponse) instrumentsServiceGetAccruedInterestsRes() {}

// Запрос купонов по облигации.
// Ref: #/components/schemas/v1GetBondCouponsRequest
type V1GetBondCouponsRequest struct {
	Figi OptString   `json:"figi"`
	From OptDateTime `json:"from"`
	To   OptDateTime `json:"to"`
}

// GetFigi returns the value of Figi.
func (s *V1GetBondCouponsRequest) GetFigi() OptString {
	return s.Figi
}

// GetFrom returns the value of From.
func (s *V1GetBondCouponsRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetBondCouponsRequest) GetTo() OptDateTime {
	return s.To
}

// SetFigi sets the value of Figi.
func (s *V1GetBondCouponsRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetFrom sets the value of From.
func (s *V1GetBondCouponsRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetBondCouponsRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Купоны по облигации.
// Ref: #/components/schemas/v1GetBondCouponsResponse
type V1GetBondCouponsResponse struct {
	Events []V1Coupon `json:"events"`
}

// GetEvents returns the value of Events.
func (s *V1GetBondCouponsResponse) GetEvents() []V1Coupon {
	return s.Events
}

// SetEvents sets the value of Events.
func (s *V1GetBondCouponsResponse) SetEvents(val []V1Coupon) {
	s.Events = val
}

func (*V1GetBondCouponsResponse) instrumentsServiceGetBondCouponsRes() {}

// Запрос бренда.
// Ref: #/components/schemas/v1GetBrandRequest
type V1GetBrandRequest struct {
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *V1GetBrandRequest) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *V1GetBrandRequest) SetID(val OptString) {
	s.ID = val
}

// Запрос списка брендов.
// Ref: #/components/schemas/v1GetBrandsRequest
type V1GetBrandsRequest struct{}

// Список брендов.
// Ref: #/components/schemas/v1GetBrandsResponse
type V1GetBrandsResponse struct {
	Brands []V1Brand `json:"brands"`
}

// GetBrands returns the value of Brands.
func (s *V1GetBrandsResponse) GetBrands() []V1Brand {
	return s.Brands
}

// SetBrands sets the value of Brands.
func (s *V1GetBrandsResponse) SetBrands(val []V1Brand) {
	s.Brands = val
}

func (*V1GetBrandsResponse) instrumentsServiceGetBrandsRes() {}

// Ref: #/components/schemas/v1GetBrokerReportRequest
type V1GetBrokerReportRequest struct {
	TaskId OptString `json:"taskId"`
	Page   OptInt32  `json:"page"`
}

// GetTaskId returns the value of TaskId.
func (s *V1GetBrokerReportRequest) GetTaskId() OptString {
	return s.TaskId
}

// GetPage returns the value of Page.
func (s *V1GetBrokerReportRequest) GetPage() OptInt32 {
	return s.Page
}

// SetTaskId sets the value of TaskId.
func (s *V1GetBrokerReportRequest) SetTaskId(val OptString) {
	s.TaskId = val
}

// SetPage sets the value of Page.
func (s *V1GetBrokerReportRequest) SetPage(val OptInt32) {
	s.Page = val
}

// Ref: #/components/schemas/v1GetBrokerReportResponse
type V1GetBrokerReportResponse struct {
	BrokerReport []V1BrokerReport `json:"brokerReport"`
	ItemsCount   OptInt32         `json:"itemsCount"`
	PagesCount   OptInt32         `json:"pagesCount"`
	Page         OptInt32         `json:"page"`
}

// GetBrokerReport returns the value of BrokerReport.
func (s *V1GetBrokerReportResponse) GetBrokerReport() []V1BrokerReport {
	return s.BrokerReport
}

// GetItemsCount returns the value of ItemsCount.
func (s *V1GetBrokerReportResponse) GetItemsCount() OptInt32 {
	return s.ItemsCount
}

// GetPagesCount returns the value of PagesCount.
func (s *V1GetBrokerReportResponse) GetPagesCount() OptInt32 {
	return s.PagesCount
}

// GetPage returns the value of Page.
func (s *V1GetBrokerReportResponse) GetPage() OptInt32 {
	return s.Page
}

// SetBrokerReport sets the value of BrokerReport.
func (s *V1GetBrokerReportResponse) SetBrokerReport(val []V1BrokerReport) {
	s.BrokerReport = val
}

// SetItemsCount sets the value of ItemsCount.
func (s *V1GetBrokerReportResponse) SetItemsCount(val OptInt32) {
	s.ItemsCount = val
}

// SetPagesCount sets the value of PagesCount.
func (s *V1GetBrokerReportResponse) SetPagesCount(val OptInt32) {
	s.PagesCount = val
}

// SetPage sets the value of Page.
func (s *V1GetBrokerReportResponse) SetPage(val OptInt32) {
	s.Page = val
}

// Запрос исторических свечей.
// Ref: #/components/schemas/v1GetCandlesRequest
type V1GetCandlesRequest struct {
	Figi         OptString           `json:"figi"`
	From         OptDateTime         `json:"from"`
	To           OptDateTime         `json:"to"`
	Interval     OptV1CandleInterval `json:"interval"`
	InstrumentId OptString           `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1GetCandlesRequest) GetFigi() OptString {
	return s.Figi
}

// GetFrom returns the value of From.
func (s *V1GetCandlesRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetCandlesRequest) GetTo() OptDateTime {
	return s.To
}

// GetInterval returns the value of Interval.
func (s *V1GetCandlesRequest) GetInterval() OptV1CandleInterval {
	return s.Interval
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetCandlesRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1GetCandlesRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetFrom sets the value of From.
func (s *V1GetCandlesRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetCandlesRequest) SetTo(val OptDateTime) {
	s.To = val
}

// SetInterval sets the value of Interval.
func (s *V1GetCandlesRequest) SetInterval(val OptV1CandleInterval) {
	s.Interval = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetCandlesRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Список свечей.
// Ref: #/components/schemas/v1GetCandlesResponse
type V1GetCandlesResponse struct {
	Candles []V1HistoricCandle `json:"candles"`
}

// GetCandles returns the value of Candles.
func (s *V1GetCandlesResponse) GetCandles() []V1HistoricCandle {
	return s.Candles
}

// SetCandles sets the value of Candles.
func (s *V1GetCandlesResponse) SetCandles(val []V1HistoricCandle) {
	s.Candles = val
}

func (*V1GetCandlesResponse) marketDataServiceGetCandlesRes() {}

// Запрос цен закрытия торговой сессии по инструментам.
// Ref: #/components/schemas/v1GetClosePricesRequest
type V1GetClosePricesRequest struct {
	Instruments []V1InstrumentClosePriceRequest `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1GetClosePricesRequest) GetInstruments() []V1InstrumentClosePriceRequest {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1GetClosePricesRequest) SetInstruments(val []V1InstrumentClosePriceRequest) {
	s.Instruments = val
}

// Цены закрытия торговой сессии по инструментам.
// Ref: #/components/schemas/v1GetClosePricesResponse
type V1GetClosePricesResponse struct {
	ClosePrices []V1InstrumentClosePriceResponse `json:"closePrices"`
}

// GetClosePrices returns the value of ClosePrices.
func (s *V1GetClosePricesResponse) GetClosePrices() []V1InstrumentClosePriceResponse {
	return s.ClosePrices
}

// SetClosePrices sets the value of ClosePrices.
func (s *V1GetClosePricesResponse) SetClosePrices(val []V1InstrumentClosePriceResponse) {
	s.ClosePrices = val
}

func (*V1GetClosePricesResponse) marketDataServiceGetClosePricesRes() {}

// Запрос справочника стран.
// Ref: #/components/schemas/v1GetCountriesRequest
type V1GetCountriesRequest struct{}

// Справочник стран.
// Ref: #/components/schemas/v1GetCountriesResponse
type V1GetCountriesResponse struct {
	Countries []V1CountryResponse `json:"countries"`
}

// GetCountries returns the value of Countries.
func (s *V1GetCountriesResponse) GetCountries() []V1CountryResponse {
	return s.Countries
}

// SetCountries sets the value of Countries.
func (s *V1GetCountriesResponse) SetCountries(val []V1CountryResponse) {
	s.Countries = val
}

func (*V1GetCountriesResponse) instrumentsServiceGetCountriesRes() {}

// Объект запроса сформированного отчёта "Справка о
// доходах за пределами РФ".
// Ref: #/components/schemas/v1GetDividendsForeignIssuerReportRequest
type V1GetDividendsForeignIssuerReportRequest struct {
	TaskId OptString `json:"taskId"`
	Page   OptInt32  `json:"page"`
}

// GetTaskId returns the value of TaskId.
func (s *V1GetDividendsForeignIssuerReportRequest) GetTaskId() OptString {
	return s.TaskId
}

// GetPage returns the value of Page.
func (s *V1GetDividendsForeignIssuerReportRequest) GetPage() OptInt32 {
	return s.Page
}

// SetTaskId sets the value of TaskId.
func (s *V1GetDividendsForeignIssuerReportRequest) SetTaskId(val OptString) {
	s.TaskId = val
}

// SetPage sets the value of Page.
func (s *V1GetDividendsForeignIssuerReportRequest) SetPage(val OptInt32) {
	s.Page = val
}

// Ref: #/components/schemas/v1GetDividendsForeignIssuerReportResponse
type V1GetDividendsForeignIssuerReportResponse struct {
	DividendsForeignIssuerReport []V1DividendsForeignIssuerReport `json:"dividendsForeignIssuerReport"`
	ItemsCount                   OptInt32                         `json:"itemsCount"`
	PagesCount                   OptInt32                         `json:"pagesCount"`
	Page                         OptInt32                         `json:"page"`
}

// GetDividendsForeignIssuerReport returns the value of DividendsForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerReportResponse) GetDividendsForeignIssuerReport() []V1DividendsForeignIssuerReport {
	return s.DividendsForeignIssuerReport
}

// GetItemsCount returns the value of ItemsCount.
func (s *V1GetDividendsForeignIssuerReportResponse) GetItemsCount() OptInt32 {
	return s.ItemsCount
}

// GetPagesCount returns the value of PagesCount.
func (s *V1GetDividendsForeignIssuerReportResponse) GetPagesCount() OptInt32 {
	return s.PagesCount
}

// GetPage returns the value of Page.
func (s *V1GetDividendsForeignIssuerReportResponse) GetPage() OptInt32 {
	return s.Page
}

// SetDividendsForeignIssuerReport sets the value of DividendsForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerReportResponse) SetDividendsForeignIssuerReport(val []V1DividendsForeignIssuerReport) {
	s.DividendsForeignIssuerReport = val
}

// SetItemsCount sets the value of ItemsCount.
func (s *V1GetDividendsForeignIssuerReportResponse) SetItemsCount(val OptInt32) {
	s.ItemsCount = val
}

// SetPagesCount sets the value of PagesCount.
func (s *V1GetDividendsForeignIssuerReportResponse) SetPagesCount(val OptInt32) {
	s.PagesCount = val
}

// SetPage sets the value of Page.
func (s *V1GetDividendsForeignIssuerReportResponse) SetPage(val OptInt32) {
	s.Page = val
}

// Ref: #/components/schemas/v1GetDividendsForeignIssuerRequest
type V1GetDividendsForeignIssuerRequest struct {
	GenerateDivForeignIssuerReport OptV1GenerateDividendsForeignIssuerReportRequest `json:"generateDivForeignIssuerReport"`
	GetDivForeignIssuerReport      OptV1GetDividendsForeignIssuerReportRequest      `json:"getDivForeignIssuerReport"`
}

// GetGenerateDivForeignIssuerReport returns the value of GenerateDivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerRequest) GetGenerateDivForeignIssuerReport() OptV1GenerateDividendsForeignIssuerReportRequest {
	return s.GenerateDivForeignIssuerReport
}

// GetGetDivForeignIssuerReport returns the value of GetDivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerRequest) GetGetDivForeignIssuerReport() OptV1GetDividendsForeignIssuerReportRequest {
	return s.GetDivForeignIssuerReport
}

// SetGenerateDivForeignIssuerReport sets the value of GenerateDivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerRequest) SetGenerateDivForeignIssuerReport(val OptV1GenerateDividendsForeignIssuerReportRequest) {
	s.GenerateDivForeignIssuerReport = val
}

// SetGetDivForeignIssuerReport sets the value of GetDivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerRequest) SetGetDivForeignIssuerReport(val OptV1GetDividendsForeignIssuerReportRequest) {
	s.GetDivForeignIssuerReport = val
}

// Ref: #/components/schemas/v1GetDividendsForeignIssuerResponse
type V1GetDividendsForeignIssuerResponse struct {
	GenerateDivForeignIssuerReportResponse OptV1GenerateDividendsForeignIssuerReportResponse `json:"generateDivForeignIssuerReportResponse"`
	DivForeignIssuerReport                 OptV1GetDividendsForeignIssuerReportResponse      `json:"divForeignIssuerReport"`
}

// GetGenerateDivForeignIssuerReportResponse returns the value of GenerateDivForeignIssuerReportResponse.
func (s *V1GetDividendsForeignIssuerResponse) GetGenerateDivForeignIssuerReportResponse() OptV1GenerateDividendsForeignIssuerReportResponse {
	return s.GenerateDivForeignIssuerReportResponse
}

// GetDivForeignIssuerReport returns the value of DivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerResponse) GetDivForeignIssuerReport() OptV1GetDividendsForeignIssuerReportResponse {
	return s.DivForeignIssuerReport
}

// SetGenerateDivForeignIssuerReportResponse sets the value of GenerateDivForeignIssuerReportResponse.
func (s *V1GetDividendsForeignIssuerResponse) SetGenerateDivForeignIssuerReportResponse(val OptV1GenerateDividendsForeignIssuerReportResponse) {
	s.GenerateDivForeignIssuerReportResponse = val
}

// SetDivForeignIssuerReport sets the value of DivForeignIssuerReport.
func (s *V1GetDividendsForeignIssuerResponse) SetDivForeignIssuerReport(val OptV1GetDividendsForeignIssuerReportResponse) {
	s.DivForeignIssuerReport = val
}

func (*V1GetDividendsForeignIssuerResponse) operationsServiceGetDividendsForeignIssuerRes() {}

// Запрос дивидендов.
// Ref: #/components/schemas/v1GetDividendsRequest
type V1GetDividendsRequest struct {
	Figi OptString   `json:"figi"`
	From OptDateTime `json:"from"`
	To   OptDateTime `json:"to"`
}

// GetFigi returns the value of Figi.
func (s *V1GetDividendsRequest) GetFigi() OptString {
	return s.Figi
}

// GetFrom returns the value of From.
func (s *V1GetDividendsRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetDividendsRequest) GetTo() OptDateTime {
	return s.To
}

// SetFigi sets the value of Figi.
func (s *V1GetDividendsRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetFrom sets the value of From.
func (s *V1GetDividendsRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetDividendsRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Дивиденды.
// Ref: #/components/schemas/v1GetDividendsResponse
type V1GetDividendsResponse struct {
	Dividends []V1Dividend `json:"dividends"`
}

// GetDividends returns the value of Dividends.
func (s *V1GetDividendsResponse) GetDividends() []V1Dividend {
	return s.Dividends
}

// SetDividends sets the value of Dividends.
func (s *V1GetDividendsResponse) SetDividends(val []V1Dividend) {
	s.Dividends = val
}

func (*V1GetDividendsResponse) instrumentsServiceGetDividendsRes() {}

// Запрос списка избранных инструментов, входные
// параметры не требуются.
// Ref: #/components/schemas/v1GetFavoritesRequest
type V1GetFavoritesRequest struct{}

// В ответ передаётся список избранных инструментов в
// качестве массива.
// Ref: #/components/schemas/v1GetFavoritesResponse
type V1GetFavoritesResponse struct {
	FavoriteInstruments []V1FavoriteInstrument `json:"favoriteInstruments"`
}

// GetFavoriteInstruments returns the value of FavoriteInstruments.
func (s *V1GetFavoritesResponse) GetFavoriteInstruments() []V1FavoriteInstrument {
	return s.FavoriteInstruments
}

// SetFavoriteInstruments sets the value of FavoriteInstruments.
func (s *V1GetFavoritesResponse) SetFavoriteInstruments(val []V1FavoriteInstrument) {
	s.FavoriteInstruments = val
}

func (*V1GetFavoritesResponse) instrumentsServiceGetFavoritesRes() {}

// Ref: #/components/schemas/v1GetFuturesMarginRequest
type V1GetFuturesMarginRequest struct {
	Figi OptString `json:"figi"`
}

// GetFigi returns the value of Figi.
func (s *V1GetFuturesMarginRequest) GetFigi() OptString {
	return s.Figi
}

// SetFigi sets the value of Figi.
func (s *V1GetFuturesMarginRequest) SetFigi(val OptString) {
	s.Figi = val
}

// Ref: #/components/schemas/v1GetFuturesMarginResponse
type V1GetFuturesMarginResponse struct {
	InitialMarginOnBuy      OptV1MoneyValue `json:"initialMarginOnBuy"`
	InitialMarginOnSell     OptV1MoneyValue `json:"initialMarginOnSell"`
	MinPriceIncrement       OptV1Quotation  `json:"minPriceIncrement"`
	MinPriceIncrementAmount OptV1Quotation  `json:"minPriceIncrementAmount"`
}

// GetInitialMarginOnBuy returns the value of InitialMarginOnBuy.
func (s *V1GetFuturesMarginResponse) GetInitialMarginOnBuy() OptV1MoneyValue {
	return s.InitialMarginOnBuy
}

// GetInitialMarginOnSell returns the value of InitialMarginOnSell.
func (s *V1GetFuturesMarginResponse) GetInitialMarginOnSell() OptV1MoneyValue {
	return s.InitialMarginOnSell
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1GetFuturesMarginResponse) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetMinPriceIncrementAmount returns the value of MinPriceIncrementAmount.
func (s *V1GetFuturesMarginResponse) GetMinPriceIncrementAmount() OptV1Quotation {
	return s.MinPriceIncrementAmount
}

// SetInitialMarginOnBuy sets the value of InitialMarginOnBuy.
func (s *V1GetFuturesMarginResponse) SetInitialMarginOnBuy(val OptV1MoneyValue) {
	s.InitialMarginOnBuy = val
}

// SetInitialMarginOnSell sets the value of InitialMarginOnSell.
func (s *V1GetFuturesMarginResponse) SetInitialMarginOnSell(val OptV1MoneyValue) {
	s.InitialMarginOnSell = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1GetFuturesMarginResponse) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetMinPriceIncrementAmount sets the value of MinPriceIncrementAmount.
func (s *V1GetFuturesMarginResponse) SetMinPriceIncrementAmount(val OptV1Quotation) {
	s.MinPriceIncrementAmount = val
}

func (*V1GetFuturesMarginResponse) instrumentsServiceGetFuturesMarginRes() {}

// Запрос информации о пользователе.
// Ref: #/components/schemas/v1GetInfoRequest
type V1GetInfoRequest struct{}

// Информация о пользователе.
// Ref: #/components/schemas/v1GetInfoResponse
type V1GetInfoResponse struct {
	PremStatus           OptBool   `json:"premStatus"`
	QualStatus           OptBool   `json:"qualStatus"`
	QualifiedForWorkWith []string  `json:"qualifiedForWorkWith"`
	Tariff               OptString `json:"tariff"`
}

// GetPremStatus returns the value of PremStatus.
func (s *V1GetInfoResponse) GetPremStatus() OptBool {
	return s.PremStatus
}

// GetQualStatus returns the value of QualStatus.
func (s *V1GetInfoResponse) GetQualStatus() OptBool {
	return s.QualStatus
}

// GetQualifiedForWorkWith returns the value of QualifiedForWorkWith.
func (s *V1GetInfoResponse) GetQualifiedForWorkWith() []string {
	return s.QualifiedForWorkWith
}

// GetTariff returns the value of Tariff.
func (s *V1GetInfoResponse) GetTariff() OptString {
	return s.Tariff
}

// SetPremStatus sets the value of PremStatus.
func (s *V1GetInfoResponse) SetPremStatus(val OptBool) {
	s.PremStatus = val
}

// SetQualStatus sets the value of QualStatus.
func (s *V1GetInfoResponse) SetQualStatus(val OptBool) {
	s.QualStatus = val
}

// SetQualifiedForWorkWith sets the value of QualifiedForWorkWith.
func (s *V1GetInfoResponse) SetQualifiedForWorkWith(val []string) {
	s.QualifiedForWorkWith = val
}

// SetTariff sets the value of Tariff.
func (s *V1GetInfoResponse) SetTariff(val OptString) {
	s.Tariff = val
}

func (*V1GetInfoResponse) usersServiceGetInfoRes() {}

// Запрос получения цен последних сделок.
// Ref: #/components/schemas/v1GetLastPricesRequest
type V1GetLastPricesRequest struct {
	Figi         []string `json:"figi"`
	InstrumentId []string `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1GetLastPricesRequest) GetFigi() []string {
	return s.Figi
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetLastPricesRequest) GetInstrumentId() []string {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1GetLastPricesRequest) SetFigi(val []string) {
	s.Figi = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetLastPricesRequest) SetInstrumentId(val []string) {
	s.InstrumentId = val
}

// Список цен последних сделок.
// Ref: #/components/schemas/v1GetLastPricesResponse
type V1GetLastPricesResponse struct {
	LastPrices []V1LastPrice `json:"lastPrices"`
}

// GetLastPrices returns the value of LastPrices.
func (s *V1GetLastPricesResponse) GetLastPrices() []V1LastPrice {
	return s.LastPrices
}

// SetLastPrices sets the value of LastPrices.
func (s *V1GetLastPricesResponse) SetLastPrices(val []V1LastPrice) {
	s.LastPrices = val
}

func (*V1GetLastPricesResponse) marketDataServiceGetLastPricesRes() {}

// Запрос обезличенных сделок за последний час.
// Ref: #/components/schemas/v1GetLastTradesRequest
type V1GetLastTradesRequest struct {
	Figi         OptString   `json:"figi"`
	From         OptDateTime `json:"from"`
	To           OptDateTime `json:"to"`
	InstrumentId OptString   `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1GetLastTradesRequest) GetFigi() OptString {
	return s.Figi
}

// GetFrom returns the value of From.
func (s *V1GetLastTradesRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetLastTradesRequest) GetTo() OptDateTime {
	return s.To
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetLastTradesRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1GetLastTradesRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetFrom sets the value of From.
func (s *V1GetLastTradesRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetLastTradesRequest) SetTo(val OptDateTime) {
	s.To = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetLastTradesRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Обезличенных сделок за последний час.
// Ref: #/components/schemas/v1GetLastTradesResponse
type V1GetLastTradesResponse struct {
	Trades []V1Trade `json:"trades"`
}

// GetTrades returns the value of Trades.
func (s *V1GetLastTradesResponse) GetTrades() []V1Trade {
	return s.Trades
}

// SetTrades sets the value of Trades.
func (s *V1GetLastTradesResponse) SetTrades(val []V1Trade) {
	s.Trades = val
}

func (*V1GetLastTradesResponse) marketDataServiceGetLastTradesRes() {}

// Ref: #/components/schemas/v1GetMarginAttributesRequest
type V1GetMarginAttributesRequest struct {
	// Идентификатор счёта пользователя.
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GetMarginAttributesRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1GetMarginAttributesRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Маржинальные показатели по счёту.
// Ref: #/components/schemas/v1GetMarginAttributesResponse
type V1GetMarginAttributesResponse struct {
	LiquidPortfolio       OptV1MoneyValue `json:"liquidPortfolio"`
	StartingMargin        OptV1MoneyValue `json:"startingMargin"`
	MinimalMargin         OptV1MoneyValue `json:"minimalMargin"`
	FundsSufficiencyLevel OptV1Quotation  `json:"fundsSufficiencyLevel"`
	AmountOfMissingFunds  OptV1MoneyValue `json:"amountOfMissingFunds"`
	CorrectedMargin       OptV1MoneyValue `json:"correctedMargin"`
}

// GetLiquidPortfolio returns the value of LiquidPortfolio.
func (s *V1GetMarginAttributesResponse) GetLiquidPortfolio() OptV1MoneyValue {
	return s.LiquidPortfolio
}

// GetStartingMargin returns the value of StartingMargin.
func (s *V1GetMarginAttributesResponse) GetStartingMargin() OptV1MoneyValue {
	return s.StartingMargin
}

// GetMinimalMargin returns the value of MinimalMargin.
func (s *V1GetMarginAttributesResponse) GetMinimalMargin() OptV1MoneyValue {
	return s.MinimalMargin
}

// GetFundsSufficiencyLevel returns the value of FundsSufficiencyLevel.
func (s *V1GetMarginAttributesResponse) GetFundsSufficiencyLevel() OptV1Quotation {
	return s.FundsSufficiencyLevel
}

// GetAmountOfMissingFunds returns the value of AmountOfMissingFunds.
func (s *V1GetMarginAttributesResponse) GetAmountOfMissingFunds() OptV1MoneyValue {
	return s.AmountOfMissingFunds
}

// GetCorrectedMargin returns the value of CorrectedMargin.
func (s *V1GetMarginAttributesResponse) GetCorrectedMargin() OptV1MoneyValue {
	return s.CorrectedMargin
}

// SetLiquidPortfolio sets the value of LiquidPortfolio.
func (s *V1GetMarginAttributesResponse) SetLiquidPortfolio(val OptV1MoneyValue) {
	s.LiquidPortfolio = val
}

// SetStartingMargin sets the value of StartingMargin.
func (s *V1GetMarginAttributesResponse) SetStartingMargin(val OptV1MoneyValue) {
	s.StartingMargin = val
}

// SetMinimalMargin sets the value of MinimalMargin.
func (s *V1GetMarginAttributesResponse) SetMinimalMargin(val OptV1MoneyValue) {
	s.MinimalMargin = val
}

// SetFundsSufficiencyLevel sets the value of FundsSufficiencyLevel.
func (s *V1GetMarginAttributesResponse) SetFundsSufficiencyLevel(val OptV1Quotation) {
	s.FundsSufficiencyLevel = val
}

// SetAmountOfMissingFunds sets the value of AmountOfMissingFunds.
func (s *V1GetMarginAttributesResponse) SetAmountOfMissingFunds(val OptV1MoneyValue) {
	s.AmountOfMissingFunds = val
}

// SetCorrectedMargin sets the value of CorrectedMargin.
func (s *V1GetMarginAttributesResponse) SetCorrectedMargin(val OptV1MoneyValue) {
	s.CorrectedMargin = val
}

func (*V1GetMarginAttributesResponse) usersServiceGetMarginAttributesRes() {}

// Запрос списка операций по счёту с пагинацией.
// Ref: #/components/schemas/v1GetOperationsByCursorRequest
type V1GetOperationsByCursorRequest struct {
	AccountId          OptString           `json:"accountId"`
	InstrumentId       OptString           `json:"instrumentId"`
	From               OptDateTime         `json:"from"`
	To                 OptDateTime         `json:"to"`
	Cursor             OptString           `json:"cursor"`
	Limit              OptInt32            `json:"limit"`
	OperationTypes     []V1OperationType   `json:"operationTypes"`
	State              OptV1OperationState `json:"state"`
	WithoutCommissions OptBool             `json:"withoutCommissions"`
	WithoutTrades      OptBool             `json:"withoutTrades"`
	WithoutOvernights  OptBool             `json:"withoutOvernights"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GetOperationsByCursorRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetOperationsByCursorRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// GetFrom returns the value of From.
func (s *V1GetOperationsByCursorRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1GetOperationsByCursorRequest) GetTo() OptDateTime {
	return s.To
}

// GetCursor returns the value of Cursor.
func (s *V1GetOperationsByCursorRequest) GetCursor() OptString {
	return s.Cursor
}

// GetLimit returns the value of Limit.
func (s *V1GetOperationsByCursorRequest) GetLimit() OptInt32 {
	return s.Limit
}

// GetOperationTypes returns the value of OperationTypes.
func (s *V1GetOperationsByCursorRequest) GetOperationTypes() []V1OperationType {
	return s.OperationTypes
}

// GetState returns the value of State.
func (s *V1GetOperationsByCursorRequest) GetState() OptV1OperationState {
	return s.State
}

// GetWithoutCommissions returns the value of WithoutCommissions.
func (s *V1GetOperationsByCursorRequest) GetWithoutCommissions() OptBool {
	return s.WithoutCommissions
}

// GetWithoutTrades returns the value of WithoutTrades.
func (s *V1GetOperationsByCursorRequest) GetWithoutTrades() OptBool {
	return s.WithoutTrades
}

// GetWithoutOvernights returns the value of WithoutOvernights.
func (s *V1GetOperationsByCursorRequest) GetWithoutOvernights() OptBool {
	return s.WithoutOvernights
}

// SetAccountId sets the value of AccountId.
func (s *V1GetOperationsByCursorRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetOperationsByCursorRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// SetFrom sets the value of From.
func (s *V1GetOperationsByCursorRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1GetOperationsByCursorRequest) SetTo(val OptDateTime) {
	s.To = val
}

// SetCursor sets the value of Cursor.
func (s *V1GetOperationsByCursorRequest) SetCursor(val OptString) {
	s.Cursor = val
}

// SetLimit sets the value of Limit.
func (s *V1GetOperationsByCursorRequest) SetLimit(val OptInt32) {
	s.Limit = val
}

// SetOperationTypes sets the value of OperationTypes.
func (s *V1GetOperationsByCursorRequest) SetOperationTypes(val []V1OperationType) {
	s.OperationTypes = val
}

// SetState sets the value of State.
func (s *V1GetOperationsByCursorRequest) SetState(val OptV1OperationState) {
	s.State = val
}

// SetWithoutCommissions sets the value of WithoutCommissions.
func (s *V1GetOperationsByCursorRequest) SetWithoutCommissions(val OptBool) {
	s.WithoutCommissions = val
}

// SetWithoutTrades sets the value of WithoutTrades.
func (s *V1GetOperationsByCursorRequest) SetWithoutTrades(val OptBool) {
	s.WithoutTrades = val
}

// SetWithoutOvernights sets the value of WithoutOvernights.
func (s *V1GetOperationsByCursorRequest) SetWithoutOvernights(val OptBool) {
	s.WithoutOvernights = val
}

// Список операций по счёту с пагинацией.
// Ref: #/components/schemas/v1GetOperationsByCursorResponse
type V1GetOperationsByCursorResponse struct {
	HasNext    OptBool           `json:"hasNext"`
	NextCursor OptString         `json:"nextCursor"`
	Items      []V1OperationItem `json:"items"`
}

// GetHasNext returns the value of HasNext.
func (s *V1GetOperationsByCursorResponse) GetHasNext() OptBool {
	return s.HasNext
}

// GetNextCursor returns the value of NextCursor.
func (s *V1GetOperationsByCursorResponse) GetNextCursor() OptString {
	return s.NextCursor
}

// GetItems returns the value of Items.
func (s *V1GetOperationsByCursorResponse) GetItems() []V1OperationItem {
	return s.Items
}

// SetHasNext sets the value of HasNext.
func (s *V1GetOperationsByCursorResponse) SetHasNext(val OptBool) {
	s.HasNext = val
}

// SetNextCursor sets the value of NextCursor.
func (s *V1GetOperationsByCursorResponse) SetNextCursor(val OptString) {
	s.NextCursor = val
}

// SetItems sets the value of Items.
func (s *V1GetOperationsByCursorResponse) SetItems(val []V1OperationItem) {
	s.Items = val
}

func (*V1GetOperationsByCursorResponse) operationsServiceGetOperationsByCursorRes()     {}
func (*V1GetOperationsByCursorResponse) sandboxServiceGetSandboxOperationsByCursorRes() {}

// Запрос стакана.
// Ref: #/components/schemas/v1GetOrderBookRequest
type V1GetOrderBookRequest struct {
	Figi         OptString `json:"figi"`
	Depth        OptInt32  `json:"depth"`
	InstrumentId OptString `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1GetOrderBookRequest) GetFigi() OptString {
	return s.Figi
}

// GetDepth returns the value of Depth.
func (s *V1GetOrderBookRequest) GetDepth() OptInt32 {
	return s.Depth
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetOrderBookRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1GetOrderBookRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetDepth sets the value of Depth.
func (s *V1GetOrderBookRequest) SetDepth(val OptInt32) {
	s.Depth = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetOrderBookRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Информация о стакане.
// Ref: #/components/schemas/v1GetOrderBookResponse
type V1GetOrderBookResponse struct {
	Figi          OptString      `json:"figi"`
	Depth         OptInt32       `json:"depth"`
	Bids          []V1Order      `json:"bids"`
	Asks          []V1Order      `json:"asks"`
	LastPrice     OptV1Quotation `json:"lastPrice"`
	ClosePrice    OptV1Quotation `json:"closePrice"`
	LimitUp       OptV1Quotation `json:"limitUp"`
	LimitDown     OptV1Quotation `json:"limitDown"`
	LastPriceTs   OptDateTime    `json:"lastPriceTs"`
	ClosePriceTs  OptDateTime    `json:"closePriceTs"`
	OrderbookTs   OptDateTime    `json:"orderbookTs"`
	InstrumentUid OptString      `json:"instrumentUid"`
}

// GetFigi returns the value of Figi.
func (s *V1GetOrderBookResponse) GetFigi() OptString {
	return s.Figi
}

// GetDepth returns the value of Depth.
func (s *V1GetOrderBookResponse) GetDepth() OptInt32 {
	return s.Depth
}

// GetBids returns the value of Bids.
func (s *V1GetOrderBookResponse) GetBids() []V1Order {
	return s.Bids
}

// GetAsks returns the value of Asks.
func (s *V1GetOrderBookResponse) GetAsks() []V1Order {
	return s.Asks
}

// GetLastPrice returns the value of LastPrice.
func (s *V1GetOrderBookResponse) GetLastPrice() OptV1Quotation {
	return s.LastPrice
}

// GetClosePrice returns the value of ClosePrice.
func (s *V1GetOrderBookResponse) GetClosePrice() OptV1Quotation {
	return s.ClosePrice
}

// GetLimitUp returns the value of LimitUp.
func (s *V1GetOrderBookResponse) GetLimitUp() OptV1Quotation {
	return s.LimitUp
}

// GetLimitDown returns the value of LimitDown.
func (s *V1GetOrderBookResponse) GetLimitDown() OptV1Quotation {
	return s.LimitDown
}

// GetLastPriceTs returns the value of LastPriceTs.
func (s *V1GetOrderBookResponse) GetLastPriceTs() OptDateTime {
	return s.LastPriceTs
}

// GetClosePriceTs returns the value of ClosePriceTs.
func (s *V1GetOrderBookResponse) GetClosePriceTs() OptDateTime {
	return s.ClosePriceTs
}

// GetOrderbookTs returns the value of OrderbookTs.
func (s *V1GetOrderBookResponse) GetOrderbookTs() OptDateTime {
	return s.OrderbookTs
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1GetOrderBookResponse) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetFigi sets the value of Figi.
func (s *V1GetOrderBookResponse) SetFigi(val OptString) {
	s.Figi = val
}

// SetDepth sets the value of Depth.
func (s *V1GetOrderBookResponse) SetDepth(val OptInt32) {
	s.Depth = val
}

// SetBids sets the value of Bids.
func (s *V1GetOrderBookResponse) SetBids(val []V1Order) {
	s.Bids = val
}

// SetAsks sets the value of Asks.
func (s *V1GetOrderBookResponse) SetAsks(val []V1Order) {
	s.Asks = val
}

// SetLastPrice sets the value of LastPrice.
func (s *V1GetOrderBookResponse) SetLastPrice(val OptV1Quotation) {
	s.LastPrice = val
}

// SetClosePrice sets the value of ClosePrice.
func (s *V1GetOrderBookResponse) SetClosePrice(val OptV1Quotation) {
	s.ClosePrice = val
}

// SetLimitUp sets the value of LimitUp.
func (s *V1GetOrderBookResponse) SetLimitUp(val OptV1Quotation) {
	s.LimitUp = val
}

// SetLimitDown sets the value of LimitDown.
func (s *V1GetOrderBookResponse) SetLimitDown(val OptV1Quotation) {
	s.LimitDown = val
}

// SetLastPriceTs sets the value of LastPriceTs.
func (s *V1GetOrderBookResponse) SetLastPriceTs(val OptDateTime) {
	s.LastPriceTs = val
}

// SetClosePriceTs sets the value of ClosePriceTs.
func (s *V1GetOrderBookResponse) SetClosePriceTs(val OptDateTime) {
	s.ClosePriceTs = val
}

// SetOrderbookTs sets the value of OrderbookTs.
func (s *V1GetOrderBookResponse) SetOrderbookTs(val OptDateTime) {
	s.OrderbookTs = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1GetOrderBookResponse) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

func (*V1GetOrderBookResponse) marketDataServiceGetOrderBookRes() {}

// Запрос получения статуса торгового поручения.
// Ref: #/components/schemas/v1GetOrderStateRequest
type V1GetOrderStateRequest struct {
	AccountId OptString `json:"accountId"`
	OrderId   OptString `json:"orderId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GetOrderStateRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetOrderId returns the value of OrderId.
func (s *V1GetOrderStateRequest) GetOrderId() OptString {
	return s.OrderId
}

// SetAccountId sets the value of AccountId.
func (s *V1GetOrderStateRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetOrderId sets the value of OrderId.
func (s *V1GetOrderStateRequest) SetOrderId(val OptString) {
	s.OrderId = val
}

// Запрос получения списка активных торговых поручений.
// Ref: #/components/schemas/v1GetOrdersRequest
type V1GetOrdersRequest struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GetOrdersRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1GetOrdersRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Список активных торговых поручений.
// Ref: #/components/schemas/v1GetOrdersResponse
type V1GetOrdersResponse struct {
	Orders []V1OrderState `json:"orders"`
}

// GetOrders returns the value of Orders.
func (s *V1GetOrdersResponse) GetOrders() []V1OrderState {
	return s.Orders
}

// SetOrders sets the value of Orders.
func (s *V1GetOrdersResponse) SetOrders(val []V1OrderState) {
	s.Orders = val
}

func (*V1GetOrdersResponse) ordersServiceGetOrdersRes()         {}
func (*V1GetOrdersResponse) sandboxServiceGetSandboxOrdersRes() {}

// Запрос получения списка активных стоп-заявок.
// Ref: #/components/schemas/v1GetStopOrdersRequest
type V1GetStopOrdersRequest struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1GetStopOrdersRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1GetStopOrdersRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Список активных стоп-заявок.
// Ref: #/components/schemas/v1GetStopOrdersResponse
type V1GetStopOrdersResponse struct {
	StopOrders []V1StopOrder `json:"stopOrders"`
}

// GetStopOrders returns the value of StopOrders.
func (s *V1GetStopOrdersResponse) GetStopOrders() []V1StopOrder {
	return s.StopOrders
}

// SetStopOrders sets the value of StopOrders.
func (s *V1GetStopOrdersResponse) SetStopOrders(val []V1StopOrder) {
	s.StopOrders = val
}

func (*V1GetStopOrdersResponse) stopOrdersServiceGetStopOrdersRes() {}

// Запрос получения торгового статуса.
// Ref: #/components/schemas/v1GetTradingStatusRequest
type V1GetTradingStatusRequest struct {
	Figi         OptString `json:"figi"`
	InstrumentId OptString `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1GetTradingStatusRequest) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetTradingStatusRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1GetTradingStatusRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetTradingStatusRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Информация о торговом статусе.
// Ref: #/components/schemas/v1GetTradingStatusResponse
type V1GetTradingStatusResponse struct {
	Figi                     OptString                  `json:"figi"`
	TradingStatus            OptV1SecurityTradingStatus `json:"tradingStatus"`
	LimitOrderAvailableFlag  OptBool                    `json:"limitOrderAvailableFlag"`
	MarketOrderAvailableFlag OptBool                    `json:"marketOrderAvailableFlag"`
	ApiTradeAvailableFlag    OptBool                    `json:"apiTradeAvailableFlag"`
	InstrumentUid            OptString                  `json:"instrumentUid"`
}

// GetFigi returns the value of Figi.
func (s *V1GetTradingStatusResponse) GetFigi() OptString {
	return s.Figi
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1GetTradingStatusResponse) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetLimitOrderAvailableFlag returns the value of LimitOrderAvailableFlag.
func (s *V1GetTradingStatusResponse) GetLimitOrderAvailableFlag() OptBool {
	return s.LimitOrderAvailableFlag
}

// GetMarketOrderAvailableFlag returns the value of MarketOrderAvailableFlag.
func (s *V1GetTradingStatusResponse) GetMarketOrderAvailableFlag() OptBool {
	return s.MarketOrderAvailableFlag
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1GetTradingStatusResponse) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1GetTradingStatusResponse) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetFigi sets the value of Figi.
func (s *V1GetTradingStatusResponse) SetFigi(val OptString) {
	s.Figi = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1GetTradingStatusResponse) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetLimitOrderAvailableFlag sets the value of LimitOrderAvailableFlag.
func (s *V1GetTradingStatusResponse) SetLimitOrderAvailableFlag(val OptBool) {
	s.LimitOrderAvailableFlag = val
}

// SetMarketOrderAvailableFlag sets the value of MarketOrderAvailableFlag.
func (s *V1GetTradingStatusResponse) SetMarketOrderAvailableFlag(val OptBool) {
	s.MarketOrderAvailableFlag = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1GetTradingStatusResponse) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1GetTradingStatusResponse) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

func (*V1GetTradingStatusResponse) marketDataServiceGetTradingStatusRes() {}

// Запрос получения торгового статуса.
// Ref: #/components/schemas/v1GetTradingStatusesRequest
type V1GetTradingStatusesRequest struct {
	InstrumentId []string `json:"instrumentId"`
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1GetTradingStatusesRequest) GetInstrumentId() []string {
	return s.InstrumentId
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1GetTradingStatusesRequest) SetInstrumentId(val []string) {
	s.InstrumentId = val
}

// Информация о торговом статусе.
// Ref: #/components/schemas/v1GetTradingStatusesResponse
type V1GetTradingStatusesResponse struct {
	TradingStatuses []V1GetTradingStatusResponse `json:"tradingStatuses"`
}

// GetTradingStatuses returns the value of TradingStatuses.
func (s *V1GetTradingStatusesResponse) GetTradingStatuses() []V1GetTradingStatusResponse {
	return s.TradingStatuses
}

// SetTradingStatuses sets the value of TradingStatuses.
func (s *V1GetTradingStatusesResponse) SetTradingStatuses(val []V1GetTradingStatusResponse) {
	s.TradingStatuses = val
}

func (*V1GetTradingStatusesResponse) marketDataServiceGetTradingStatusesRes() {}

// Запрос текущих лимитов пользователя.
// Ref: #/components/schemas/v1GetUserTariffRequest
type V1GetUserTariffRequest struct{}

// Текущие лимиты пользователя.
// Ref: #/components/schemas/v1GetUserTariffResponse
type V1GetUserTariffResponse struct {
	UnaryLimits  []V1UnaryLimit  `json:"unaryLimits"`
	StreamLimits []V1StreamLimit `json:"streamLimits"`
}

// GetUnaryLimits returns the value of UnaryLimits.
func (s *V1GetUserTariffResponse) GetUnaryLimits() []V1UnaryLimit {
	return s.UnaryLimits
}

// GetStreamLimits returns the value of StreamLimits.
func (s *V1GetUserTariffResponse) GetStreamLimits() []V1StreamLimit {
	return s.StreamLimits
}

// SetUnaryLimits sets the value of UnaryLimits.
func (s *V1GetUserTariffResponse) SetUnaryLimits(val []V1UnaryLimit) {
	s.UnaryLimits = val
}

// SetStreamLimits sets the value of StreamLimits.
func (s *V1GetUserTariffResponse) SetStreamLimits(val []V1StreamLimit) {
	s.StreamLimits = val
}

func (*V1GetUserTariffResponse) usersServiceGetUserTariffRes() {}

// Информация о свече.
// Ref: #/components/schemas/v1HistoricCandle
type V1HistoricCandle struct {
	Open       OptV1Quotation `json:"open"`
	High       OptV1Quotation `json:"high"`
	Low        OptV1Quotation `json:"low"`
	Close      OptV1Quotation `json:"close"`
	Volume     OptStringInt64 `json:"volume"`
	Time       OptDateTime    `json:"time"`
	IsComplete OptBool        `json:"isComplete"`
}

// GetOpen returns the value of Open.
func (s *V1HistoricCandle) GetOpen() OptV1Quotation {
	return s.Open
}

// GetHigh returns the value of High.
func (s *V1HistoricCandle) GetHigh() OptV1Quotation {
	return s.High
}

// GetLow returns the value of Low.
func (s *V1HistoricCandle) GetLow() OptV1Quotation {
	return s.Low
}

// GetClose returns the value of Close.
func (s *V1HistoricCandle) GetClose() OptV1Quotation {
	return s.Close
}

// GetVolume returns the value of Volume.
func (s *V1HistoricCandle) GetVolume() OptStringInt64 {
	return s.Volume
}

// GetTime returns the value of Time.
func (s *V1HistoricCandle) GetTime() OptDateTime {
	return s.Time
}

// GetIsComplete returns the value of IsComplete.
func (s *V1HistoricCandle) GetIsComplete() OptBool {
	return s.IsComplete
}

// SetOpen sets the value of Open.
func (s *V1HistoricCandle) SetOpen(val OptV1Quotation) {
	s.Open = val
}

// SetHigh sets the value of High.
func (s *V1HistoricCandle) SetHigh(val OptV1Quotation) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *V1HistoricCandle) SetLow(val OptV1Quotation) {
	s.Low = val
}

// SetClose sets the value of Close.
func (s *V1HistoricCandle) SetClose(val OptV1Quotation) {
	s.Close = val
}

// SetVolume sets the value of Volume.
func (s *V1HistoricCandle) SetVolume(val OptStringInt64) {
	s.Volume = val
}

// SetTime sets the value of Time.
func (s *V1HistoricCandle) SetTime(val OptDateTime) {
	s.Time = val
}

// SetIsComplete sets the value of IsComplete.
func (s *V1HistoricCandle) SetIsComplete(val OptBool) {
	s.IsComplete = val
}

// Объект передачи основной информации об инструменте.
// Ref: #/components/schemas/v1Instrument
type V1Instrument struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Isin                  OptString                  `json:"isin"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	InstrumentType        OptString                  `json:"instrumentType"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	InstrumentKind        OptV1InstrumentType        `json:"instrumentKind"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
}

// GetFigi returns the value of Figi.
func (s *V1Instrument) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Instrument) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Instrument) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1Instrument) GetIsin() OptString {
	return s.Isin
}

// GetLot returns the value of Lot.
func (s *V1Instrument) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Instrument) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Instrument) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Instrument) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Instrument) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Instrument) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Instrument) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Instrument) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Instrument) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Instrument) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Instrument) GetExchange() OptString {
	return s.Exchange
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Instrument) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Instrument) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1Instrument) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Instrument) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Instrument) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Instrument) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Instrument) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Instrument) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Instrument) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Instrument) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Instrument) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Instrument) GetPositionUid() OptString {
	return s.PositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Instrument) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Instrument) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Instrument) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Instrument) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1Instrument) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Instrument) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Instrument) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// SetFigi sets the value of Figi.
func (s *V1Instrument) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Instrument) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Instrument) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1Instrument) SetIsin(val OptString) {
	s.Isin = val
}

// SetLot sets the value of Lot.
func (s *V1Instrument) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Instrument) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Instrument) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Instrument) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Instrument) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Instrument) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Instrument) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Instrument) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Instrument) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Instrument) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Instrument) SetExchange(val OptString) {
	s.Exchange = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Instrument) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Instrument) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1Instrument) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Instrument) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Instrument) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Instrument) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Instrument) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Instrument) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Instrument) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Instrument) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Instrument) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Instrument) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Instrument) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Instrument) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Instrument) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Instrument) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1Instrument) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Instrument) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Instrument) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// Запрос цен закрытия торговой сессии по инструменту.
// Ref: #/components/schemas/v1InstrumentClosePriceRequest
type V1InstrumentClosePriceRequest struct {
	InstrumentId OptString `json:"instrumentId"`
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1InstrumentClosePriceRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1InstrumentClosePriceRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Цена закрытия торговой сессии по инструменту.
// Ref: #/components/schemas/v1InstrumentClosePriceResponse
type V1InstrumentClosePriceResponse struct {
	Figi          OptString      `json:"figi"`
	InstrumentUid OptString      `json:"instrumentUid"`
	Price         OptV1Quotation `json:"price"`
	Time          OptDateTime    `json:"time"`
}

// GetFigi returns the value of Figi.
func (s *V1InstrumentClosePriceResponse) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1InstrumentClosePriceResponse) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetPrice returns the value of Price.
func (s *V1InstrumentClosePriceResponse) GetPrice() OptV1Quotation {
	return s.Price
}

// GetTime returns the value of Time.
func (s *V1InstrumentClosePriceResponse) GetTime() OptDateTime {
	return s.Time
}

// SetFigi sets the value of Figi.
func (s *V1InstrumentClosePriceResponse) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1InstrumentClosePriceResponse) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetPrice sets the value of Price.
func (s *V1InstrumentClosePriceResponse) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetTime sets the value of Time.
func (s *V1InstrumentClosePriceResponse) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/v1InstrumentIdType
type V1InstrumentIdType string

const (
	V1InstrumentIdTypeINSTRUMENTIDUNSPECIFIED     V1InstrumentIdType = "INSTRUMENT_ID_UNSPECIFIED"
	V1InstrumentIdTypeINSTRUMENTIDTYPEFIGI        V1InstrumentIdType = "INSTRUMENT_ID_TYPE_FIGI"
	V1InstrumentIdTypeINSTRUMENTIDTYPETICKER      V1InstrumentIdType = "INSTRUMENT_ID_TYPE_TICKER"
	V1InstrumentIdTypeINSTRUMENTIDTYPEUID         V1InstrumentIdType = "INSTRUMENT_ID_TYPE_UID"
	V1InstrumentIdTypeINSTRUMENTIDTYPEPOSITIONUID V1InstrumentIdType = "INSTRUMENT_ID_TYPE_POSITION_UID"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1InstrumentIdType) MarshalText() ([]byte, error) {
	switch s {
	case V1InstrumentIdTypeINSTRUMENTIDUNSPECIFIED:
		return []byte(s), nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEFIGI:
		return []byte(s), nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPETICKER:
		return []byte(s), nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEUID:
		return []byte(s), nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEPOSITIONUID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1InstrumentIdType) UnmarshalText(data []byte) error {
	switch V1InstrumentIdType(data) {
	case V1InstrumentIdTypeINSTRUMENTIDUNSPECIFIED:
		*s = V1InstrumentIdTypeINSTRUMENTIDUNSPECIFIED
		return nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEFIGI:
		*s = V1InstrumentIdTypeINSTRUMENTIDTYPEFIGI
		return nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPETICKER:
		*s = V1InstrumentIdTypeINSTRUMENTIDTYPETICKER
		return nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEUID:
		*s = V1InstrumentIdTypeINSTRUMENTIDTYPEUID
		return nil
	case V1InstrumentIdTypeINSTRUMENTIDTYPEPOSITIONUID:
		*s = V1InstrumentIdTypeINSTRUMENTIDTYPEPOSITIONUID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Связь с другим инструментом.
// Ref: #/components/schemas/v1InstrumentLink
type V1InstrumentLink struct {
	Type          OptString `json:"type"`
	InstrumentUid OptString `json:"instrumentUid"`
}

// GetType returns the value of Type.
func (s *V1InstrumentLink) GetType() OptString {
	return s.Type
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1InstrumentLink) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetType sets the value of Type.
func (s *V1InstrumentLink) SetType(val OptString) {
	s.Type = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1InstrumentLink) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Запрос получения инструмента по идентификатору.
// Ref: #/components/schemas/v1InstrumentRequest
type V1InstrumentRequest struct {
	IdType    OptV1InstrumentIdType `json:"idType"`
	ClassCode OptString             `json:"classCode"`
	ID        OptString             `json:"id"`
}

// GetIdType returns the value of IdType.
func (s *V1InstrumentRequest) GetIdType() OptV1InstrumentIdType {
	return s.IdType
}

// GetClassCode returns the value of ClassCode.
func (s *V1InstrumentRequest) GetClassCode() OptString {
	return s.ClassCode
}

// GetID returns the value of ID.
func (s *V1InstrumentRequest) GetID() OptString {
	return s.ID
}

// SetIdType sets the value of IdType.
func (s *V1InstrumentRequest) SetIdType(val OptV1InstrumentIdType) {
	s.IdType = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1InstrumentRequest) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetID sets the value of ID.
func (s *V1InstrumentRequest) SetID(val OptString) {
	s.ID = val
}

// Данные по инструменту.
// Ref: #/components/schemas/v1InstrumentResponse
type V1InstrumentResponse struct {
	Instrument OptV1Instrument `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1InstrumentResponse) GetInstrument() OptV1Instrument {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1InstrumentResponse) SetInstrument(val OptV1Instrument) {
	s.Instrument = val
}

func (*V1InstrumentResponse) instrumentsServiceGetInstrumentByRes() {}

// Краткая информация об инструменте.
// Ref: #/components/schemas/v1InstrumentShort
type V1InstrumentShort struct {
	Isin                  OptString           `json:"isin"`
	Figi                  OptString           `json:"figi"`
	Ticker                OptString           `json:"ticker"`
	ClassCode             OptString           `json:"classCode"`
	InstrumentType        OptString           `json:"instrumentType"`
	Name                  OptString           `json:"name"`
	UID                   OptString           `json:"uid"`
	PositionUid           OptString           `json:"positionUid"`
	InstrumentKind        OptV1InstrumentType `json:"instrumentKind"`
	ApiTradeAvailableFlag OptBool             `json:"apiTradeAvailableFlag"`
	ForIisFlag            OptBool             `json:"forIisFlag"`
	First1minCandleDate   OptDateTime         `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime         `json:"first1dayCandleDate"`
	ForQualInvestorFlag   OptBool             `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool             `json:"weekendFlag"`
	BlockedTcaFlag        OptBool             `json:"blockedTcaFlag"`
}

// GetIsin returns the value of Isin.
func (s *V1InstrumentShort) GetIsin() OptString {
	return s.Isin
}

// GetFigi returns the value of Figi.
func (s *V1InstrumentShort) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1InstrumentShort) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1InstrumentShort) GetClassCode() OptString {
	return s.ClassCode
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1InstrumentShort) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetName returns the value of Name.
func (s *V1InstrumentShort) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *V1InstrumentShort) GetUID() OptString {
	return s.UID
}

// GetPositionUid returns the value of PositionUid.
func (s *V1InstrumentShort) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1InstrumentShort) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1InstrumentShort) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1InstrumentShort) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1InstrumentShort) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1InstrumentShort) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1InstrumentShort) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1InstrumentShort) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1InstrumentShort) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// SetIsin sets the value of Isin.
func (s *V1InstrumentShort) SetIsin(val OptString) {
	s.Isin = val
}

// SetFigi sets the value of Figi.
func (s *V1InstrumentShort) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1InstrumentShort) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1InstrumentShort) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1InstrumentShort) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetName sets the value of Name.
func (s *V1InstrumentShort) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *V1InstrumentShort) SetUID(val OptString) {
	s.UID = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1InstrumentShort) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1InstrumentShort) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1InstrumentShort) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1InstrumentShort) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1InstrumentShort) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1InstrumentShort) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1InstrumentShort) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1InstrumentShort) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1InstrumentShort) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// Статус запрашиваемых инструментов.
// Ref: #/components/schemas/v1InstrumentStatus
type V1InstrumentStatus string

const (
	V1InstrumentStatusINSTRUMENTSTATUSUNSPECIFIED V1InstrumentStatus = "INSTRUMENT_STATUS_UNSPECIFIED"
	V1InstrumentStatusINSTRUMENTSTATUSBASE        V1InstrumentStatus = "INSTRUMENT_STATUS_BASE"
	V1InstrumentStatusINSTRUMENTSTATUSALL         V1InstrumentStatus = "INSTRUMENT_STATUS_ALL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1InstrumentStatus) MarshalText() ([]byte, error) {
	switch s {
	case V1InstrumentStatusINSTRUMENTSTATUSUNSPECIFIED:
		return []byte(s), nil
	case V1InstrumentStatusINSTRUMENTSTATUSBASE:
		return []byte(s), nil
	case V1InstrumentStatusINSTRUMENTSTATUSALL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1InstrumentStatus) UnmarshalText(data []byte) error {
	switch V1InstrumentStatus(data) {
	case V1InstrumentStatusINSTRUMENTSTATUSUNSPECIFIED:
		*s = V1InstrumentStatusINSTRUMENTSTATUSUNSPECIFIED
		return nil
	case V1InstrumentStatusINSTRUMENTSTATUSBASE:
		*s = V1InstrumentStatusINSTRUMENTSTATUSBASE
		return nil
	case V1InstrumentStatusINSTRUMENTSTATUSALL:
		*s = V1InstrumentStatusINSTRUMENTSTATUSALL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип инструмента.
// Ref: #/components/schemas/v1InstrumentType
type V1InstrumentType string

const (
	V1InstrumentTypeINSTRUMENTTYPEUNSPECIFIED         V1InstrumentType = "INSTRUMENT_TYPE_UNSPECIFIED"
	V1InstrumentTypeINSTRUMENTTYPEBOND                V1InstrumentType = "INSTRUMENT_TYPE_BOND"
	V1InstrumentTypeINSTRUMENTTYPESHARE               V1InstrumentType = "INSTRUMENT_TYPE_SHARE"
	V1InstrumentTypeINSTRUMENTTYPECURRENCY            V1InstrumentType = "INSTRUMENT_TYPE_CURRENCY"
	V1InstrumentTypeINSTRUMENTTYPEETF                 V1InstrumentType = "INSTRUMENT_TYPE_ETF"
	V1InstrumentTypeINSTRUMENTTYPEFUTURES             V1InstrumentType = "INSTRUMENT_TYPE_FUTURES"
	V1InstrumentTypeINSTRUMENTTYPESP                  V1InstrumentType = "INSTRUMENT_TYPE_SP"
	V1InstrumentTypeINSTRUMENTTYPEOPTION              V1InstrumentType = "INSTRUMENT_TYPE_OPTION"
	V1InstrumentTypeINSTRUMENTTYPECLEARINGCERTIFICATE V1InstrumentType = "INSTRUMENT_TYPE_CLEARING_CERTIFICATE"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1InstrumentType) MarshalText() ([]byte, error) {
	switch s {
	case V1InstrumentTypeINSTRUMENTTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPEBOND:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPESHARE:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPECURRENCY:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPEETF:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPEFUTURES:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPESP:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPEOPTION:
		return []byte(s), nil
	case V1InstrumentTypeINSTRUMENTTYPECLEARINGCERTIFICATE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1InstrumentType) UnmarshalText(data []byte) error {
	switch V1InstrumentType(data) {
	case V1InstrumentTypeINSTRUMENTTYPEUNSPECIFIED:
		*s = V1InstrumentTypeINSTRUMENTTYPEUNSPECIFIED
		return nil
	case V1InstrumentTypeINSTRUMENTTYPEBOND:
		*s = V1InstrumentTypeINSTRUMENTTYPEBOND
		return nil
	case V1InstrumentTypeINSTRUMENTTYPESHARE:
		*s = V1InstrumentTypeINSTRUMENTTYPESHARE
		return nil
	case V1InstrumentTypeINSTRUMENTTYPECURRENCY:
		*s = V1InstrumentTypeINSTRUMENTTYPECURRENCY
		return nil
	case V1InstrumentTypeINSTRUMENTTYPEETF:
		*s = V1InstrumentTypeINSTRUMENTTYPEETF
		return nil
	case V1InstrumentTypeINSTRUMENTTYPEFUTURES:
		*s = V1InstrumentTypeINSTRUMENTTYPEFUTURES
		return nil
	case V1InstrumentTypeINSTRUMENTTYPESP:
		*s = V1InstrumentTypeINSTRUMENTTYPESP
		return nil
	case V1InstrumentTypeINSTRUMENTTYPEOPTION:
		*s = V1InstrumentTypeINSTRUMENTTYPEOPTION
		return nil
	case V1InstrumentTypeINSTRUMENTTYPECLEARINGCERTIFICATE:
		*s = V1InstrumentTypeINSTRUMENTTYPECLEARINGCERTIFICATE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос получения инструментов.
// Ref: #/components/schemas/v1InstrumentsRequest
type V1InstrumentsRequest struct {
	InstrumentStatus OptV1InstrumentStatus `json:"instrumentStatus"`
}

// GetInstrumentStatus returns the value of InstrumentStatus.
func (s *V1InstrumentsRequest) GetInstrumentStatus() OptV1InstrumentStatus {
	return s.InstrumentStatus
}

// SetInstrumentStatus sets the value of InstrumentStatus.
func (s *V1InstrumentsRequest) SetInstrumentStatus(val OptV1InstrumentStatus) {
	s.InstrumentStatus = val
}

// Информация о цене последней сделки.
// Ref: #/components/schemas/v1LastPrice
type V1LastPrice struct {
	Figi          OptString      `json:"figi"`
	Price         OptV1Quotation `json:"price"`
	Time          OptDateTime    `json:"time"`
	InstrumentUid OptString      `json:"instrumentUid"`
}

// GetFigi returns the value of Figi.
func (s *V1LastPrice) GetFigi() OptString {
	return s.Figi
}

// GetPrice returns the value of Price.
func (s *V1LastPrice) GetPrice() OptV1Quotation {
	return s.Price
}

// GetTime returns the value of Time.
func (s *V1LastPrice) GetTime() OptDateTime {
	return s.Time
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1LastPrice) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetFigi sets the value of Figi.
func (s *V1LastPrice) SetFigi(val OptString) {
	s.Figi = val
}

// SetPrice sets the value of Price.
func (s *V1LastPrice) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetTime sets the value of Time.
func (s *V1LastPrice) SetTime(val OptDateTime) {
	s.Time = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1LastPrice) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Ref: #/components/schemas/v1MoneyValue
type V1MoneyValue struct {
	Currency OptString      `json:"currency"`
	Units    OptStringInt64 `json:"units"`
	Nano     OptInt32       `json:"nano"`
}

// GetCurrency returns the value of Currency.
func (s *V1MoneyValue) GetCurrency() OptString {
	return s.Currency
}

// GetUnits returns the value of Units.
func (s *V1MoneyValue) GetUnits() OptStringInt64 {
	return s.Units
}

// GetNano returns the value of Nano.
func (s *V1MoneyValue) GetNano() OptInt32 {
	return s.Nano
}

// SetCurrency sets the value of Currency.
func (s *V1MoneyValue) SetCurrency(val OptString) {
	s.Currency = val
}

// SetUnits sets the value of Units.
func (s *V1MoneyValue) SetUnits(val OptStringInt64) {
	s.Units = val
}

// SetNano sets the value of Nano.
func (s *V1MoneyValue) SetNano(val OptInt32) {
	s.Nano = val
}

// Запрос открытия счёта в песочнице.
// Ref: #/components/schemas/v1OpenSandboxAccountRequest
type V1OpenSandboxAccountRequest struct{}

// Номер открытого счёта в песочнице.
// Ref: #/components/schemas/v1OpenSandboxAccountResponse
type V1OpenSandboxAccountResponse struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1OpenSandboxAccountResponse) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1OpenSandboxAccountResponse) SetAccountId(val OptString) {
	s.AccountId = val
}

func (*V1OpenSandboxAccountResponse) sandboxServiceOpenSandboxAccountRes() {}

// Данные по операции.
// Ref: #/components/schemas/v1Operation
type V1Operation struct {
	ID                OptString           `json:"id"`
	ParentOperationId OptString           `json:"parentOperationId"`
	Currency          OptString           `json:"currency"`
	Payment           OptV1MoneyValue     `json:"payment"`
	Price             OptV1MoneyValue     `json:"price"`
	State             OptV1OperationState `json:"state"`
	Quantity          OptStringInt64      `json:"quantity"`
	QuantityRest      OptStringInt64      `json:"quantityRest"`
	Figi              OptString           `json:"figi"`
	InstrumentType    OptString           `json:"instrumentType"`
	Date              OptDateTime         `json:"date"`
	Type              OptString           `json:"type"`
	OperationType     OptV1OperationType  `json:"operationType"`
	Trades            []V1OperationTrade  `json:"trades"`
	AssetUid          OptString           `json:"assetUid"`
	PositionUid       OptString           `json:"positionUid"`
	InstrumentUid     OptString           `json:"instrumentUid"`
}

// GetID returns the value of ID.
func (s *V1Operation) GetID() OptString {
	return s.ID
}

// GetParentOperationId returns the value of ParentOperationId.
func (s *V1Operation) GetParentOperationId() OptString {
	return s.ParentOperationId
}

// GetCurrency returns the value of Currency.
func (s *V1Operation) GetCurrency() OptString {
	return s.Currency
}

// GetPayment returns the value of Payment.
func (s *V1Operation) GetPayment() OptV1MoneyValue {
	return s.Payment
}

// GetPrice returns the value of Price.
func (s *V1Operation) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetState returns the value of State.
func (s *V1Operation) GetState() OptV1OperationState {
	return s.State
}

// GetQuantity returns the value of Quantity.
func (s *V1Operation) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetQuantityRest returns the value of QuantityRest.
func (s *V1Operation) GetQuantityRest() OptStringInt64 {
	return s.QuantityRest
}

// GetFigi returns the value of Figi.
func (s *V1Operation) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1Operation) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetDate returns the value of Date.
func (s *V1Operation) GetDate() OptDateTime {
	return s.Date
}

// GetType returns the value of Type.
func (s *V1Operation) GetType() OptString {
	return s.Type
}

// GetOperationType returns the value of OperationType.
func (s *V1Operation) GetOperationType() OptV1OperationType {
	return s.OperationType
}

// GetTrades returns the value of Trades.
func (s *V1Operation) GetTrades() []V1OperationTrade {
	return s.Trades
}

// GetAssetUid returns the value of AssetUid.
func (s *V1Operation) GetAssetUid() OptString {
	return s.AssetUid
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Operation) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1Operation) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetID sets the value of ID.
func (s *V1Operation) SetID(val OptString) {
	s.ID = val
}

// SetParentOperationId sets the value of ParentOperationId.
func (s *V1Operation) SetParentOperationId(val OptString) {
	s.ParentOperationId = val
}

// SetCurrency sets the value of Currency.
func (s *V1Operation) SetCurrency(val OptString) {
	s.Currency = val
}

// SetPayment sets the value of Payment.
func (s *V1Operation) SetPayment(val OptV1MoneyValue) {
	s.Payment = val
}

// SetPrice sets the value of Price.
func (s *V1Operation) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetState sets the value of State.
func (s *V1Operation) SetState(val OptV1OperationState) {
	s.State = val
}

// SetQuantity sets the value of Quantity.
func (s *V1Operation) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetQuantityRest sets the value of QuantityRest.
func (s *V1Operation) SetQuantityRest(val OptStringInt64) {
	s.QuantityRest = val
}

// SetFigi sets the value of Figi.
func (s *V1Operation) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1Operation) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetDate sets the value of Date.
func (s *V1Operation) SetDate(val OptDateTime) {
	s.Date = val
}

// SetType sets the value of Type.
func (s *V1Operation) SetType(val OptString) {
	s.Type = val
}

// SetOperationType sets the value of OperationType.
func (s *V1Operation) SetOperationType(val OptV1OperationType) {
	s.OperationType = val
}

// SetTrades sets the value of Trades.
func (s *V1Operation) SetTrades(val []V1OperationTrade) {
	s.Trades = val
}

// SetAssetUid sets the value of AssetUid.
func (s *V1Operation) SetAssetUid(val OptString) {
	s.AssetUid = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Operation) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1Operation) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Данные об операции.
// Ref: #/components/schemas/v1OperationItem
type V1OperationItem struct {
	Cursor            OptString                `json:"cursor"`
	BrokerAccountId   OptString                `json:"brokerAccountId"`
	ID                OptString                `json:"id"`
	ParentOperationId OptString                `json:"parentOperationId"`
	Name              OptString                `json:"name"`
	Date              OptDateTime              `json:"date"`
	Type              OptV1OperationType       `json:"type"`
	Description       OptString                `json:"description"`
	State             OptV1OperationState      `json:"state"`
	InstrumentUid     OptString                `json:"instrumentUid"`
	Figi              OptString                `json:"figi"`
	InstrumentType    OptString                `json:"instrumentType"`
	InstrumentKind    OptV1InstrumentType      `json:"instrumentKind"`
	PositionUid       OptString                `json:"positionUid"`
	Payment           OptV1MoneyValue          `json:"payment"`
	Price             OptV1MoneyValue          `json:"price"`
	Commission        OptV1MoneyValue          `json:"commission"`
	Yield             OptV1MoneyValue          `json:"yield"`
	YieldRelative     OptV1Quotation           `json:"yieldRelative"`
	AccruedInt        OptV1MoneyValue          `json:"accruedInt"`
	Quantity          OptStringInt64           `json:"quantity"`
	QuantityRest      OptStringInt64           `json:"quantityRest"`
	QuantityDone      OptStringInt64           `json:"quantityDone"`
	CancelDateTime    OptDateTime              `json:"cancelDateTime"`
	CancelReason      OptString                `json:"cancelReason"`
	TradesInfo        OptV1OperationItemTrades `json:"tradesInfo"`
	AssetUid          OptString                `json:"assetUid"`
}

// GetCursor returns the value of Cursor.
func (s *V1OperationItem) GetCursor() OptString {
	return s.Cursor
}

// GetBrokerAccountId returns the value of BrokerAccountId.
func (s *V1OperationItem) GetBrokerAccountId() OptString {
	return s.BrokerAccountId
}

// GetID returns the value of ID.
func (s *V1OperationItem) GetID() OptString {
	return s.ID
}

// GetParentOperationId returns the value of ParentOperationId.
func (s *V1OperationItem) GetParentOperationId() OptString {
	return s.ParentOperationId
}

// GetName returns the value of Name.
func (s *V1OperationItem) GetName() OptString {
	return s.Name
}

// GetDate returns the value of Date.
func (s *V1OperationItem) GetDate() OptDateTime {
	return s.Date
}

// GetType returns the value of Type.
func (s *V1OperationItem) GetType() OptV1OperationType {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *V1OperationItem) GetDescription() OptString {
	return s.Description
}

// GetState returns the value of State.
func (s *V1OperationItem) GetState() OptV1OperationState {
	return s.State
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1OperationItem) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetFigi returns the value of Figi.
func (s *V1OperationItem) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1OperationItem) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetInstrumentKind returns the value of InstrumentKind.
func (s *V1OperationItem) GetInstrumentKind() OptV1InstrumentType {
	return s.InstrumentKind
}

// GetPositionUid returns the value of PositionUid.
func (s *V1OperationItem) GetPositionUid() OptString {
	return s.PositionUid
}

// GetPayment returns the value of Payment.
func (s *V1OperationItem) GetPayment() OptV1MoneyValue {
	return s.Payment
}

// GetPrice returns the value of Price.
func (s *V1OperationItem) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetCommission returns the value of Commission.
func (s *V1OperationItem) GetCommission() OptV1MoneyValue {
	return s.Commission
}

// GetYield returns the value of Yield.
func (s *V1OperationItem) GetYield() OptV1MoneyValue {
	return s.Yield
}

// GetYieldRelative returns the value of YieldRelative.
func (s *V1OperationItem) GetYieldRelative() OptV1Quotation {
	return s.YieldRelative
}

// GetAccruedInt returns the value of AccruedInt.
func (s *V1OperationItem) GetAccruedInt() OptV1MoneyValue {
	return s.AccruedInt
}

// GetQuantity returns the value of Quantity.
func (s *V1OperationItem) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetQuantityRest returns the value of QuantityRest.
func (s *V1OperationItem) GetQuantityRest() OptStringInt64 {
	return s.QuantityRest
}

// GetQuantityDone returns the value of QuantityDone.
func (s *V1OperationItem) GetQuantityDone() OptStringInt64 {
	return s.QuantityDone
}

// GetCancelDateTime returns the value of CancelDateTime.
func (s *V1OperationItem) GetCancelDateTime() OptDateTime {
	return s.CancelDateTime
}

// GetCancelReason returns the value of CancelReason.
func (s *V1OperationItem) GetCancelReason() OptString {
	return s.CancelReason
}

// GetTradesInfo returns the value of TradesInfo.
func (s *V1OperationItem) GetTradesInfo() OptV1OperationItemTrades {
	return s.TradesInfo
}

// GetAssetUid returns the value of AssetUid.
func (s *V1OperationItem) GetAssetUid() OptString {
	return s.AssetUid
}

// SetCursor sets the value of Cursor.
func (s *V1OperationItem) SetCursor(val OptString) {
	s.Cursor = val
}

// SetBrokerAccountId sets the value of BrokerAccountId.
func (s *V1OperationItem) SetBrokerAccountId(val OptString) {
	s.BrokerAccountId = val
}

// SetID sets the value of ID.
func (s *V1OperationItem) SetID(val OptString) {
	s.ID = val
}

// SetParentOperationId sets the value of ParentOperationId.
func (s *V1OperationItem) SetParentOperationId(val OptString) {
	s.ParentOperationId = val
}

// SetName sets the value of Name.
func (s *V1OperationItem) SetName(val OptString) {
	s.Name = val
}

// SetDate sets the value of Date.
func (s *V1OperationItem) SetDate(val OptDateTime) {
	s.Date = val
}

// SetType sets the value of Type.
func (s *V1OperationItem) SetType(val OptV1OperationType) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *V1OperationItem) SetDescription(val OptString) {
	s.Description = val
}

// SetState sets the value of State.
func (s *V1OperationItem) SetState(val OptV1OperationState) {
	s.State = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1OperationItem) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetFigi sets the value of Figi.
func (s *V1OperationItem) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1OperationItem) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetInstrumentKind sets the value of InstrumentKind.
func (s *V1OperationItem) SetInstrumentKind(val OptV1InstrumentType) {
	s.InstrumentKind = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1OperationItem) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetPayment sets the value of Payment.
func (s *V1OperationItem) SetPayment(val OptV1MoneyValue) {
	s.Payment = val
}

// SetPrice sets the value of Price.
func (s *V1OperationItem) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetCommission sets the value of Commission.
func (s *V1OperationItem) SetCommission(val OptV1MoneyValue) {
	s.Commission = val
}

// SetYield sets the value of Yield.
func (s *V1OperationItem) SetYield(val OptV1MoneyValue) {
	s.Yield = val
}

// SetYieldRelative sets the value of YieldRelative.
func (s *V1OperationItem) SetYieldRelative(val OptV1Quotation) {
	s.YieldRelative = val
}

// SetAccruedInt sets the value of AccruedInt.
func (s *V1OperationItem) SetAccruedInt(val OptV1MoneyValue) {
	s.AccruedInt = val
}

// SetQuantity sets the value of Quantity.
func (s *V1OperationItem) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetQuantityRest sets the value of QuantityRest.
func (s *V1OperationItem) SetQuantityRest(val OptStringInt64) {
	s.QuantityRest = val
}

// SetQuantityDone sets the value of QuantityDone.
func (s *V1OperationItem) SetQuantityDone(val OptStringInt64) {
	s.QuantityDone = val
}

// SetCancelDateTime sets the value of CancelDateTime.
func (s *V1OperationItem) SetCancelDateTime(val OptDateTime) {
	s.CancelDateTime = val
}

// SetCancelReason sets the value of CancelReason.
func (s *V1OperationItem) SetCancelReason(val OptString) {
	s.CancelReason = val
}

// SetTradesInfo sets the value of TradesInfo.
func (s *V1OperationItem) SetTradesInfo(val OptV1OperationItemTrades) {
	s.TradesInfo = val
}

// SetAssetUid sets the value of AssetUid.
func (s *V1OperationItem) SetAssetUid(val OptString) {
	s.AssetUid = val
}

// Сделка по операции.
// Ref: #/components/schemas/v1OperationItemTrade
type V1OperationItemTrade struct {
	Num           OptString       `json:"num"`
	Date          OptDateTime     `json:"date"`
	Quantity      OptStringInt64  `json:"quantity"`
	Price         OptV1MoneyValue `json:"price"`
	Yield         OptV1MoneyValue `json:"yield"`
	YieldRelative OptV1Quotation  `json:"yieldRelative"`
}

// GetNum returns the value of Num.
func (s *V1OperationItemTrade) GetNum() OptString {
	return s.Num
}

// GetDate returns the value of Date.
func (s *V1OperationItemTrade) GetDate() OptDateTime {
	return s.Date
}

// GetQuantity returns the value of Quantity.
func (s *V1OperationItemTrade) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *V1OperationItemTrade) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetYield returns the value of Yield.
func (s *V1OperationItemTrade) GetYield() OptV1MoneyValue {
	return s.Yield
}

// GetYieldRelative returns the value of YieldRelative.
func (s *V1OperationItemTrade) GetYieldRelative() OptV1Quotation {
	return s.YieldRelative
}

// SetNum sets the value of Num.
func (s *V1OperationItemTrade) SetNum(val OptString) {
	s.Num = val
}

// SetDate sets the value of Date.
func (s *V1OperationItemTrade) SetDate(val OptDateTime) {
	s.Date = val
}

// SetQuantity sets the value of Quantity.
func (s *V1OperationItemTrade) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *V1OperationItemTrade) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetYield sets the value of Yield.
func (s *V1OperationItemTrade) SetYield(val OptV1MoneyValue) {
	s.Yield = val
}

// SetYieldRelative sets the value of YieldRelative.
func (s *V1OperationItemTrade) SetYieldRelative(val OptV1Quotation) {
	s.YieldRelative = val
}

// Массив с информацией о сделках.
// Ref: #/components/schemas/v1OperationItemTrades
type V1OperationItemTrades struct {
	Trades []V1OperationItemTrade `json:"trades"`
}

// GetTrades returns the value of Trades.
func (s *V1OperationItemTrades) GetTrades() []V1OperationItemTrade {
	return s.Trades
}

// SetTrades sets the value of Trades.
func (s *V1OperationItemTrades) SetTrades(val []V1OperationItemTrade) {
	s.Trades = val
}

// Статус запрашиваемых операций.
// Ref: #/components/schemas/v1OperationState
type V1OperationState string

const (
	V1OperationStateOPERATIONSTATEUNSPECIFIED V1OperationState = "OPERATION_STATE_UNSPECIFIED"
	V1OperationStateOPERATIONSTATEEXECUTED    V1OperationState = "OPERATION_STATE_EXECUTED"
	V1OperationStateOPERATIONSTATECANCELED    V1OperationState = "OPERATION_STATE_CANCELED"
	V1OperationStateOPERATIONSTATEPROGRESS    V1OperationState = "OPERATION_STATE_PROGRESS"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OperationState) MarshalText() ([]byte, error) {
	switch s {
	case V1OperationStateOPERATIONSTATEUNSPECIFIED:
		return []byte(s), nil
	case V1OperationStateOPERATIONSTATEEXECUTED:
		return []byte(s), nil
	case V1OperationStateOPERATIONSTATECANCELED:
		return []byte(s), nil
	case V1OperationStateOPERATIONSTATEPROGRESS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OperationState) UnmarshalText(data []byte) error {
	switch V1OperationState(data) {
	case V1OperationStateOPERATIONSTATEUNSPECIFIED:
		*s = V1OperationStateOPERATIONSTATEUNSPECIFIED
		return nil
	case V1OperationStateOPERATIONSTATEEXECUTED:
		*s = V1OperationStateOPERATIONSTATEEXECUTED
		return nil
	case V1OperationStateOPERATIONSTATECANCELED:
		*s = V1OperationStateOPERATIONSTATECANCELED
		return nil
	case V1OperationStateOPERATIONSTATEPROGRESS:
		*s = V1OperationStateOPERATIONSTATEPROGRESS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Сделка по операции.
// Ref: #/components/schemas/v1OperationTrade
type V1OperationTrade struct {
	TradeId  OptString       `json:"tradeId"`
	DateTime OptDateTime     `json:"dateTime"`
	Quantity OptStringInt64  `json:"quantity"`
	Price    OptV1MoneyValue `json:"price"`
}

// GetTradeId returns the value of TradeId.
func (s *V1OperationTrade) GetTradeId() OptString {
	return s.TradeId
}

// GetDateTime returns the value of DateTime.
func (s *V1OperationTrade) GetDateTime() OptDateTime {
	return s.DateTime
}

// GetQuantity returns the value of Quantity.
func (s *V1OperationTrade) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *V1OperationTrade) GetPrice() OptV1MoneyValue {
	return s.Price
}

// SetTradeId sets the value of TradeId.
func (s *V1OperationTrade) SetTradeId(val OptString) {
	s.TradeId = val
}

// SetDateTime sets the value of DateTime.
func (s *V1OperationTrade) SetDateTime(val OptDateTime) {
	s.DateTime = val
}

// SetQuantity sets the value of Quantity.
func (s *V1OperationTrade) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *V1OperationTrade) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// Тип операции.
// Ref: #/components/schemas/v1OperationType
type V1OperationType string

const (
	V1OperationTypeOPERATIONTYPEUNSPECIFIED              V1OperationType = "OPERATION_TYPE_UNSPECIFIED"
	V1OperationTypeOPERATIONTYPEINPUT                    V1OperationType = "OPERATION_TYPE_INPUT"
	V1OperationTypeOPERATIONTYPEBONDTAX                  V1OperationType = "OPERATION_TYPE_BOND_TAX"
	V1OperationTypeOPERATIONTYPEOUTPUTSECURITIES         V1OperationType = "OPERATION_TYPE_OUTPUT_SECURITIES"
	V1OperationTypeOPERATIONTYPEOVERNIGHT                V1OperationType = "OPERATION_TYPE_OVERNIGHT"
	V1OperationTypeOPERATIONTYPETAX                      V1OperationType = "OPERATION_TYPE_TAX"
	V1OperationTypeOPERATIONTYPEBONDREPAYMENTFULL        V1OperationType = "OPERATION_TYPE_BOND_REPAYMENT_FULL"
	V1OperationTypeOPERATIONTYPESELLCARD                 V1OperationType = "OPERATION_TYPE_SELL_CARD"
	V1OperationTypeOPERATIONTYPEDIVIDENDTAX              V1OperationType = "OPERATION_TYPE_DIVIDEND_TAX"
	V1OperationTypeOPERATIONTYPEOUTPUT                   V1OperationType = "OPERATION_TYPE_OUTPUT"
	V1OperationTypeOPERATIONTYPEBONDREPAYMENT            V1OperationType = "OPERATION_TYPE_BOND_REPAYMENT"
	V1OperationTypeOPERATIONTYPETAXCORRECTION            V1OperationType = "OPERATION_TYPE_TAX_CORRECTION"
	V1OperationTypeOPERATIONTYPESERVICEFEE               V1OperationType = "OPERATION_TYPE_SERVICE_FEE"
	V1OperationTypeOPERATIONTYPEBENEFITTAX               V1OperationType = "OPERATION_TYPE_BENEFIT_TAX"
	V1OperationTypeOPERATIONTYPEMARGINFEE                V1OperationType = "OPERATION_TYPE_MARGIN_FEE"
	V1OperationTypeOPERATIONTYPEBUY                      V1OperationType = "OPERATION_TYPE_BUY"
	V1OperationTypeOPERATIONTYPEBUYCARD                  V1OperationType = "OPERATION_TYPE_BUY_CARD"
	V1OperationTypeOPERATIONTYPEINPUTSECURITIES          V1OperationType = "OPERATION_TYPE_INPUT_SECURITIES"
	V1OperationTypeOPERATIONTYPESELLMARGIN               V1OperationType = "OPERATION_TYPE_SELL_MARGIN"
	V1OperationTypeOPERATIONTYPEBROKERFEE                V1OperationType = "OPERATION_TYPE_BROKER_FEE"
	V1OperationTypeOPERATIONTYPEBUYMARGIN                V1OperationType = "OPERATION_TYPE_BUY_MARGIN"
	V1OperationTypeOPERATIONTYPEDIVIDEND                 V1OperationType = "OPERATION_TYPE_DIVIDEND"
	V1OperationTypeOPERATIONTYPESELL                     V1OperationType = "OPERATION_TYPE_SELL"
	V1OperationTypeOPERATIONTYPECOUPON                   V1OperationType = "OPERATION_TYPE_COUPON"
	V1OperationTypeOPERATIONTYPESUCCESSFEE               V1OperationType = "OPERATION_TYPE_SUCCESS_FEE"
	V1OperationTypeOPERATIONTYPEDIVIDENDTRANSFER         V1OperationType = "OPERATION_TYPE_DIVIDEND_TRANSFER"
	V1OperationTypeOPERATIONTYPEACCRUINGVARMARGIN        V1OperationType = "OPERATION_TYPE_ACCRUING_VARMARGIN"
	V1OperationTypeOPERATIONTYPEWRITINGOFFVARMARGIN      V1OperationType = "OPERATION_TYPE_WRITING_OFF_VARMARGIN"
	V1OperationTypeOPERATIONTYPEDELIVERYBUY              V1OperationType = "OPERATION_TYPE_DELIVERY_BUY"
	V1OperationTypeOPERATIONTYPEDELIVERYSELL             V1OperationType = "OPERATION_TYPE_DELIVERY_SELL"
	V1OperationTypeOPERATIONTYPETRACKMFEE                V1OperationType = "OPERATION_TYPE_TRACK_MFEE"
	V1OperationTypeOPERATIONTYPETRACKPFEE                V1OperationType = "OPERATION_TYPE_TRACK_PFEE"
	V1OperationTypeOPERATIONTYPETAXPROGRESSIVE           V1OperationType = "OPERATION_TYPE_TAX_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPEBONDTAXPROGRESSIVE       V1OperationType = "OPERATION_TYPE_BOND_TAX_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPEDIVIDENDTAXPROGRESSIVE   V1OperationType = "OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPEBENEFITTAXPROGRESSIVE    V1OperationType = "OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPETAXCORRECTIONPROGRESSIVE V1OperationType = "OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPETAXREPOPROGRESSIVE       V1OperationType = "OPERATION_TYPE_TAX_REPO_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPETAXREPO                  V1OperationType = "OPERATION_TYPE_TAX_REPO"
	V1OperationTypeOPERATIONTYPETAXREPOHOLD              V1OperationType = "OPERATION_TYPE_TAX_REPO_HOLD"
	V1OperationTypeOPERATIONTYPETAXREPOREFUND            V1OperationType = "OPERATION_TYPE_TAX_REPO_REFUND"
	V1OperationTypeOPERATIONTYPETAXREPOHOLDPROGRESSIVE   V1OperationType = "OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPETAXREPOREFUNDPROGRESSIVE V1OperationType = "OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE"
	V1OperationTypeOPERATIONTYPEDIVEXT                   V1OperationType = "OPERATION_TYPE_DIV_EXT"
	V1OperationTypeOPERATIONTYPETAXCORRECTIONCOUPON      V1OperationType = "OPERATION_TYPE_TAX_CORRECTION_COUPON"
	V1OperationTypeOPERATIONTYPECASHFEE                  V1OperationType = "OPERATION_TYPE_CASH_FEE"
	V1OperationTypeOPERATIONTYPEOUTFEE                   V1OperationType = "OPERATION_TYPE_OUT_FEE"
	V1OperationTypeOPERATIONTYPEOUTSTAMPDUTY             V1OperationType = "OPERATION_TYPE_OUT_STAMP_DUTY"
	V1OperationTypeOPERATIONTYPEOUTPUTSWIFT              V1OperationType = "OPERATION_TYPE_OUTPUT_SWIFT"
	V1OperationTypeOPERATIONTYPEINPUTSWIFT               V1OperationType = "OPERATION_TYPE_INPUT_SWIFT"
	V1OperationTypeOPERATIONTYPEOUTPUTACQUIRING          V1OperationType = "OPERATION_TYPE_OUTPUT_ACQUIRING"
	V1OperationTypeOPERATIONTYPEINPUTACQUIRING           V1OperationType = "OPERATION_TYPE_INPUT_ACQUIRING"
	V1OperationTypeOPERATIONTYPEOUTPUTPENALTY            V1OperationType = "OPERATION_TYPE_OUTPUT_PENALTY"
	V1OperationTypeOPERATIONTYPEADVICEFEE                V1OperationType = "OPERATION_TYPE_ADVICE_FEE"
	V1OperationTypeOPERATIONTYPETRANSIISBS               V1OperationType = "OPERATION_TYPE_TRANS_IIS_BS"
	V1OperationTypeOPERATIONTYPETRANSBSBS                V1OperationType = "OPERATION_TYPE_TRANS_BS_BS"
	V1OperationTypeOPERATIONTYPEOUTMULTI                 V1OperationType = "OPERATION_TYPE_OUT_MULTI"
	V1OperationTypeOPERATIONTYPEINPMULTI                 V1OperationType = "OPERATION_TYPE_INP_MULTI"
	V1OperationTypeOPERATIONTYPEOVERPLACEMENT            V1OperationType = "OPERATION_TYPE_OVER_PLACEMENT"
	V1OperationTypeOPERATIONTYPEOVERCOM                  V1OperationType = "OPERATION_TYPE_OVER_COM"
	V1OperationTypeOPERATIONTYPEOVERINCOME               V1OperationType = "OPERATION_TYPE_OVER_INCOME"
	V1OperationTypeOPERATIONTYPEOPTIONEXPIRATION         V1OperationType = "OPERATION_TYPE_OPTION_EXPIRATION"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OperationType) MarshalText() ([]byte, error) {
	switch s {
	case V1OperationTypeOPERATIONTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEINPUT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBONDTAX:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTPUTSECURITIES:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOVERNIGHT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAX:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBONDREPAYMENTFULL:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPESELLCARD:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTAX:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTPUT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBONDREPAYMENT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTION:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPESERVICEFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBENEFITTAX:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEMARGINFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBUY:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBUYCARD:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEINPUTSECURITIES:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPESELLMARGIN:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBROKERFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBUYMARGIN:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDIVIDEND:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPESELL:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPECOUPON:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPESUCCESSFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTRANSFER:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEACCRUINGVARMARGIN:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEWRITINGOFFVARMARGIN:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDELIVERYBUY:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDELIVERYSELL:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETRACKMFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETRACKPFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBONDTAXPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTAXPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEBENEFITTAXPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTIONPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPOPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPO:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPOHOLD:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPOREFUND:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPOHOLDPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXREPOREFUNDPROGRESSIVE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEDIVEXT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTIONCOUPON:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPECASHFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTSTAMPDUTY:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTPUTSWIFT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEINPUTSWIFT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTPUTACQUIRING:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEINPUTACQUIRING:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTPUTPENALTY:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEADVICEFEE:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETRANSIISBS:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPETRANSBSBS:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOUTMULTI:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEINPMULTI:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOVERPLACEMENT:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOVERCOM:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOVERINCOME:
		return []byte(s), nil
	case V1OperationTypeOPERATIONTYPEOPTIONEXPIRATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OperationType) UnmarshalText(data []byte) error {
	switch V1OperationType(data) {
	case V1OperationTypeOPERATIONTYPEUNSPECIFIED:
		*s = V1OperationTypeOPERATIONTYPEUNSPECIFIED
		return nil
	case V1OperationTypeOPERATIONTYPEINPUT:
		*s = V1OperationTypeOPERATIONTYPEINPUT
		return nil
	case V1OperationTypeOPERATIONTYPEBONDTAX:
		*s = V1OperationTypeOPERATIONTYPEBONDTAX
		return nil
	case V1OperationTypeOPERATIONTYPEOUTPUTSECURITIES:
		*s = V1OperationTypeOPERATIONTYPEOUTPUTSECURITIES
		return nil
	case V1OperationTypeOPERATIONTYPEOVERNIGHT:
		*s = V1OperationTypeOPERATIONTYPEOVERNIGHT
		return nil
	case V1OperationTypeOPERATIONTYPETAX:
		*s = V1OperationTypeOPERATIONTYPETAX
		return nil
	case V1OperationTypeOPERATIONTYPEBONDREPAYMENTFULL:
		*s = V1OperationTypeOPERATIONTYPEBONDREPAYMENTFULL
		return nil
	case V1OperationTypeOPERATIONTYPESELLCARD:
		*s = V1OperationTypeOPERATIONTYPESELLCARD
		return nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTAX:
		*s = V1OperationTypeOPERATIONTYPEDIVIDENDTAX
		return nil
	case V1OperationTypeOPERATIONTYPEOUTPUT:
		*s = V1OperationTypeOPERATIONTYPEOUTPUT
		return nil
	case V1OperationTypeOPERATIONTYPEBONDREPAYMENT:
		*s = V1OperationTypeOPERATIONTYPEBONDREPAYMENT
		return nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTION:
		*s = V1OperationTypeOPERATIONTYPETAXCORRECTION
		return nil
	case V1OperationTypeOPERATIONTYPESERVICEFEE:
		*s = V1OperationTypeOPERATIONTYPESERVICEFEE
		return nil
	case V1OperationTypeOPERATIONTYPEBENEFITTAX:
		*s = V1OperationTypeOPERATIONTYPEBENEFITTAX
		return nil
	case V1OperationTypeOPERATIONTYPEMARGINFEE:
		*s = V1OperationTypeOPERATIONTYPEMARGINFEE
		return nil
	case V1OperationTypeOPERATIONTYPEBUY:
		*s = V1OperationTypeOPERATIONTYPEBUY
		return nil
	case V1OperationTypeOPERATIONTYPEBUYCARD:
		*s = V1OperationTypeOPERATIONTYPEBUYCARD
		return nil
	case V1OperationTypeOPERATIONTYPEINPUTSECURITIES:
		*s = V1OperationTypeOPERATIONTYPEINPUTSECURITIES
		return nil
	case V1OperationTypeOPERATIONTYPESELLMARGIN:
		*s = V1OperationTypeOPERATIONTYPESELLMARGIN
		return nil
	case V1OperationTypeOPERATIONTYPEBROKERFEE:
		*s = V1OperationTypeOPERATIONTYPEBROKERFEE
		return nil
	case V1OperationTypeOPERATIONTYPEBUYMARGIN:
		*s = V1OperationTypeOPERATIONTYPEBUYMARGIN
		return nil
	case V1OperationTypeOPERATIONTYPEDIVIDEND:
		*s = V1OperationTypeOPERATIONTYPEDIVIDEND
		return nil
	case V1OperationTypeOPERATIONTYPESELL:
		*s = V1OperationTypeOPERATIONTYPESELL
		return nil
	case V1OperationTypeOPERATIONTYPECOUPON:
		*s = V1OperationTypeOPERATIONTYPECOUPON
		return nil
	case V1OperationTypeOPERATIONTYPESUCCESSFEE:
		*s = V1OperationTypeOPERATIONTYPESUCCESSFEE
		return nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTRANSFER:
		*s = V1OperationTypeOPERATIONTYPEDIVIDENDTRANSFER
		return nil
	case V1OperationTypeOPERATIONTYPEACCRUINGVARMARGIN:
		*s = V1OperationTypeOPERATIONTYPEACCRUINGVARMARGIN
		return nil
	case V1OperationTypeOPERATIONTYPEWRITINGOFFVARMARGIN:
		*s = V1OperationTypeOPERATIONTYPEWRITINGOFFVARMARGIN
		return nil
	case V1OperationTypeOPERATIONTYPEDELIVERYBUY:
		*s = V1OperationTypeOPERATIONTYPEDELIVERYBUY
		return nil
	case V1OperationTypeOPERATIONTYPEDELIVERYSELL:
		*s = V1OperationTypeOPERATIONTYPEDELIVERYSELL
		return nil
	case V1OperationTypeOPERATIONTYPETRACKMFEE:
		*s = V1OperationTypeOPERATIONTYPETRACKMFEE
		return nil
	case V1OperationTypeOPERATIONTYPETRACKPFEE:
		*s = V1OperationTypeOPERATIONTYPETRACKPFEE
		return nil
	case V1OperationTypeOPERATIONTYPETAXPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPETAXPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPEBONDTAXPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPEBONDTAXPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPEDIVIDENDTAXPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPEDIVIDENDTAXPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPEBENEFITTAXPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPEBENEFITTAXPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTIONPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPETAXCORRECTIONPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPOPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPETAXREPOPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPO:
		*s = V1OperationTypeOPERATIONTYPETAXREPO
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPOHOLD:
		*s = V1OperationTypeOPERATIONTYPETAXREPOHOLD
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPOREFUND:
		*s = V1OperationTypeOPERATIONTYPETAXREPOREFUND
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPOHOLDPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPETAXREPOHOLDPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPETAXREPOREFUNDPROGRESSIVE:
		*s = V1OperationTypeOPERATIONTYPETAXREPOREFUNDPROGRESSIVE
		return nil
	case V1OperationTypeOPERATIONTYPEDIVEXT:
		*s = V1OperationTypeOPERATIONTYPEDIVEXT
		return nil
	case V1OperationTypeOPERATIONTYPETAXCORRECTIONCOUPON:
		*s = V1OperationTypeOPERATIONTYPETAXCORRECTIONCOUPON
		return nil
	case V1OperationTypeOPERATIONTYPECASHFEE:
		*s = V1OperationTypeOPERATIONTYPECASHFEE
		return nil
	case V1OperationTypeOPERATIONTYPEOUTFEE:
		*s = V1OperationTypeOPERATIONTYPEOUTFEE
		return nil
	case V1OperationTypeOPERATIONTYPEOUTSTAMPDUTY:
		*s = V1OperationTypeOPERATIONTYPEOUTSTAMPDUTY
		return nil
	case V1OperationTypeOPERATIONTYPEOUTPUTSWIFT:
		*s = V1OperationTypeOPERATIONTYPEOUTPUTSWIFT
		return nil
	case V1OperationTypeOPERATIONTYPEINPUTSWIFT:
		*s = V1OperationTypeOPERATIONTYPEINPUTSWIFT
		return nil
	case V1OperationTypeOPERATIONTYPEOUTPUTACQUIRING:
		*s = V1OperationTypeOPERATIONTYPEOUTPUTACQUIRING
		return nil
	case V1OperationTypeOPERATIONTYPEINPUTACQUIRING:
		*s = V1OperationTypeOPERATIONTYPEINPUTACQUIRING
		return nil
	case V1OperationTypeOPERATIONTYPEOUTPUTPENALTY:
		*s = V1OperationTypeOPERATIONTYPEOUTPUTPENALTY
		return nil
	case V1OperationTypeOPERATIONTYPEADVICEFEE:
		*s = V1OperationTypeOPERATIONTYPEADVICEFEE
		return nil
	case V1OperationTypeOPERATIONTYPETRANSIISBS:
		*s = V1OperationTypeOPERATIONTYPETRANSIISBS
		return nil
	case V1OperationTypeOPERATIONTYPETRANSBSBS:
		*s = V1OperationTypeOPERATIONTYPETRANSBSBS
		return nil
	case V1OperationTypeOPERATIONTYPEOUTMULTI:
		*s = V1OperationTypeOPERATIONTYPEOUTMULTI
		return nil
	case V1OperationTypeOPERATIONTYPEINPMULTI:
		*s = V1OperationTypeOPERATIONTYPEINPMULTI
		return nil
	case V1OperationTypeOPERATIONTYPEOVERPLACEMENT:
		*s = V1OperationTypeOPERATIONTYPEOVERPLACEMENT
		return nil
	case V1OperationTypeOPERATIONTYPEOVERCOM:
		*s = V1OperationTypeOPERATIONTYPEOVERCOM
		return nil
	case V1OperationTypeOPERATIONTYPEOVERINCOME:
		*s = V1OperationTypeOPERATIONTYPEOVERINCOME
		return nil
	case V1OperationTypeOPERATIONTYPEOPTIONEXPIRATION:
		*s = V1OperationTypeOPERATIONTYPEOPTIONEXPIRATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос получения списка операций по счёту.
// Ref: #/components/schemas/v1OperationsRequest
type V1OperationsRequest struct {
	AccountId OptString           `json:"accountId"`
	From      OptDateTime         `json:"from"`
	To        OptDateTime         `json:"to"`
	State     OptV1OperationState `json:"state"`
	Figi      OptString           `json:"figi"`
}

// GetAccountId returns the value of AccountId.
func (s *V1OperationsRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetFrom returns the value of From.
func (s *V1OperationsRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1OperationsRequest) GetTo() OptDateTime {
	return s.To
}

// GetState returns the value of State.
func (s *V1OperationsRequest) GetState() OptV1OperationState {
	return s.State
}

// GetFigi returns the value of Figi.
func (s *V1OperationsRequest) GetFigi() OptString {
	return s.Figi
}

// SetAccountId sets the value of AccountId.
func (s *V1OperationsRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetFrom sets the value of From.
func (s *V1OperationsRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1OperationsRequest) SetTo(val OptDateTime) {
	s.To = val
}

// SetState sets the value of State.
func (s *V1OperationsRequest) SetState(val OptV1OperationState) {
	s.State = val
}

// SetFigi sets the value of Figi.
func (s *V1OperationsRequest) SetFigi(val OptString) {
	s.Figi = val
}

// Список операций.
// Ref: #/components/schemas/v1OperationsResponse
type V1OperationsResponse struct {
	Operations []V1Operation `json:"operations"`
}

// GetOperations returns the value of Operations.
func (s *V1OperationsResponse) GetOperations() []V1Operation {
	return s.Operations
}

// SetOperations sets the value of Operations.
func (s *V1OperationsResponse) SetOperations(val []V1Operation) {
	s.Operations = val
}

func (*V1OperationsResponse) operationsServiceGetOperationsRes()     {}
func (*V1OperationsResponse) sandboxServiceGetSandboxOperationsRes() {}

// Опцион.
// Ref: #/components/schemas/v1Option
type V1Option struct {
	UID                   OptString                  `json:"uid"`
	PositionUid           OptString                  `json:"positionUid"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	BasicAssetPositionUid OptString                  `json:"basicAssetPositionUid"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	Direction             OptV1OptionDirection       `json:"direction"`
	PaymentType           OptV1OptionPaymentType     `json:"paymentType"`
	Style                 OptV1OptionStyle           `json:"style"`
	SettlementType        OptV1OptionSettlementType  `json:"settlementType"`
	Name                  OptString                  `json:"name"`
	Currency              OptString                  `json:"currency"`
	SettlementCurrency    OptString                  `json:"settlementCurrency"`
	AssetType             OptString                  `json:"assetType"`
	BasicAsset            OptString                  `json:"basicAsset"`
	Exchange              OptString                  `json:"exchange"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	Sector                OptString                  `json:"sector"`
	Lot                   OptInt32                   `json:"lot"`
	BasicAssetSize        OptV1Quotation             `json:"basicAssetSize"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	StrikePrice           OptV1MoneyValue            `json:"strikePrice"`
	ExpirationDate        OptDateTime                `json:"expirationDate"`
	FirstTradeDate        OptDateTime                `json:"firstTradeDate"`
	LastTradeDate         OptDateTime                `json:"lastTradeDate"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
}

// GetUID returns the value of UID.
func (s *V1Option) GetUID() OptString {
	return s.UID
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Option) GetPositionUid() OptString {
	return s.PositionUid
}

// GetTicker returns the value of Ticker.
func (s *V1Option) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Option) GetClassCode() OptString {
	return s.ClassCode
}

// GetBasicAssetPositionUid returns the value of BasicAssetPositionUid.
func (s *V1Option) GetBasicAssetPositionUid() OptString {
	return s.BasicAssetPositionUid
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Option) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Option) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetDirection returns the value of Direction.
func (s *V1Option) GetDirection() OptV1OptionDirection {
	return s.Direction
}

// GetPaymentType returns the value of PaymentType.
func (s *V1Option) GetPaymentType() OptV1OptionPaymentType {
	return s.PaymentType
}

// GetStyle returns the value of Style.
func (s *V1Option) GetStyle() OptV1OptionStyle {
	return s.Style
}

// GetSettlementType returns the value of SettlementType.
func (s *V1Option) GetSettlementType() OptV1OptionSettlementType {
	return s.SettlementType
}

// GetName returns the value of Name.
func (s *V1Option) GetName() OptString {
	return s.Name
}

// GetCurrency returns the value of Currency.
func (s *V1Option) GetCurrency() OptString {
	return s.Currency
}

// GetSettlementCurrency returns the value of SettlementCurrency.
func (s *V1Option) GetSettlementCurrency() OptString {
	return s.SettlementCurrency
}

// GetAssetType returns the value of AssetType.
func (s *V1Option) GetAssetType() OptString {
	return s.AssetType
}

// GetBasicAsset returns the value of BasicAsset.
func (s *V1Option) GetBasicAsset() OptString {
	return s.BasicAsset
}

// GetExchange returns the value of Exchange.
func (s *V1Option) GetExchange() OptString {
	return s.Exchange
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Option) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Option) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetSector returns the value of Sector.
func (s *V1Option) GetSector() OptString {
	return s.Sector
}

// GetLot returns the value of Lot.
func (s *V1Option) GetLot() OptInt32 {
	return s.Lot
}

// GetBasicAssetSize returns the value of BasicAssetSize.
func (s *V1Option) GetBasicAssetSize() OptV1Quotation {
	return s.BasicAssetSize
}

// GetKlong returns the value of Klong.
func (s *V1Option) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Option) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Option) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Option) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Option) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Option) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Option) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetStrikePrice returns the value of StrikePrice.
func (s *V1Option) GetStrikePrice() OptV1MoneyValue {
	return s.StrikePrice
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *V1Option) GetExpirationDate() OptDateTime {
	return s.ExpirationDate
}

// GetFirstTradeDate returns the value of FirstTradeDate.
func (s *V1Option) GetFirstTradeDate() OptDateTime {
	return s.FirstTradeDate
}

// GetLastTradeDate returns the value of LastTradeDate.
func (s *V1Option) GetLastTradeDate() OptDateTime {
	return s.LastTradeDate
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Option) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Option) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Option) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Option) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Option) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Option) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Option) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Option) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Option) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Option) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Option) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// SetUID sets the value of UID.
func (s *V1Option) SetUID(val OptString) {
	s.UID = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Option) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetTicker sets the value of Ticker.
func (s *V1Option) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Option) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetBasicAssetPositionUid sets the value of BasicAssetPositionUid.
func (s *V1Option) SetBasicAssetPositionUid(val OptString) {
	s.BasicAssetPositionUid = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Option) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Option) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetDirection sets the value of Direction.
func (s *V1Option) SetDirection(val OptV1OptionDirection) {
	s.Direction = val
}

// SetPaymentType sets the value of PaymentType.
func (s *V1Option) SetPaymentType(val OptV1OptionPaymentType) {
	s.PaymentType = val
}

// SetStyle sets the value of Style.
func (s *V1Option) SetStyle(val OptV1OptionStyle) {
	s.Style = val
}

// SetSettlementType sets the value of SettlementType.
func (s *V1Option) SetSettlementType(val OptV1OptionSettlementType) {
	s.SettlementType = val
}

// SetName sets the value of Name.
func (s *V1Option) SetName(val OptString) {
	s.Name = val
}

// SetCurrency sets the value of Currency.
func (s *V1Option) SetCurrency(val OptString) {
	s.Currency = val
}

// SetSettlementCurrency sets the value of SettlementCurrency.
func (s *V1Option) SetSettlementCurrency(val OptString) {
	s.SettlementCurrency = val
}

// SetAssetType sets the value of AssetType.
func (s *V1Option) SetAssetType(val OptString) {
	s.AssetType = val
}

// SetBasicAsset sets the value of BasicAsset.
func (s *V1Option) SetBasicAsset(val OptString) {
	s.BasicAsset = val
}

// SetExchange sets the value of Exchange.
func (s *V1Option) SetExchange(val OptString) {
	s.Exchange = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Option) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Option) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetSector sets the value of Sector.
func (s *V1Option) SetSector(val OptString) {
	s.Sector = val
}

// SetLot sets the value of Lot.
func (s *V1Option) SetLot(val OptInt32) {
	s.Lot = val
}

// SetBasicAssetSize sets the value of BasicAssetSize.
func (s *V1Option) SetBasicAssetSize(val OptV1Quotation) {
	s.BasicAssetSize = val
}

// SetKlong sets the value of Klong.
func (s *V1Option) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Option) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Option) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Option) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Option) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Option) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Option) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetStrikePrice sets the value of StrikePrice.
func (s *V1Option) SetStrikePrice(val OptV1MoneyValue) {
	s.StrikePrice = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *V1Option) SetExpirationDate(val OptDateTime) {
	s.ExpirationDate = val
}

// SetFirstTradeDate sets the value of FirstTradeDate.
func (s *V1Option) SetFirstTradeDate(val OptDateTime) {
	s.FirstTradeDate = val
}

// SetLastTradeDate sets the value of LastTradeDate.
func (s *V1Option) SetLastTradeDate(val OptDateTime) {
	s.LastTradeDate = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Option) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Option) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Option) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Option) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Option) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Option) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Option) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Option) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Option) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Option) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Option) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// Тип опциона по направлению сделки.
// Ref: #/components/schemas/v1OptionDirection
type V1OptionDirection string

const (
	V1OptionDirectionOPTIONDIRECTIONUNSPECIFIED V1OptionDirection = "OPTION_DIRECTION_UNSPECIFIED"
	V1OptionDirectionOPTIONDIRECTIONPUT         V1OptionDirection = "OPTION_DIRECTION_PUT"
	V1OptionDirectionOPTIONDIRECTIONCALL        V1OptionDirection = "OPTION_DIRECTION_CALL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OptionDirection) MarshalText() ([]byte, error) {
	switch s {
	case V1OptionDirectionOPTIONDIRECTIONUNSPECIFIED:
		return []byte(s), nil
	case V1OptionDirectionOPTIONDIRECTIONPUT:
		return []byte(s), nil
	case V1OptionDirectionOPTIONDIRECTIONCALL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OptionDirection) UnmarshalText(data []byte) error {
	switch V1OptionDirection(data) {
	case V1OptionDirectionOPTIONDIRECTIONUNSPECIFIED:
		*s = V1OptionDirectionOPTIONDIRECTIONUNSPECIFIED
		return nil
	case V1OptionDirectionOPTIONDIRECTIONPUT:
		*s = V1OptionDirectionOPTIONDIRECTIONPUT
		return nil
	case V1OptionDirectionOPTIONDIRECTIONCALL:
		*s = V1OptionDirectionOPTIONDIRECTIONCALL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип расчетов по опциону.
// Ref: #/components/schemas/v1OptionPaymentType
type V1OptionPaymentType string

const (
	V1OptionPaymentTypeOPTIONPAYMENTTYPEUNSPECIFIED V1OptionPaymentType = "OPTION_PAYMENT_TYPE_UNSPECIFIED"
	V1OptionPaymentTypeOPTIONPAYMENTTYPEPREMIUM     V1OptionPaymentType = "OPTION_PAYMENT_TYPE_PREMIUM"
	V1OptionPaymentTypeOPTIONPAYMENTTYPEMARGINAL    V1OptionPaymentType = "OPTION_PAYMENT_TYPE_MARGINAL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OptionPaymentType) MarshalText() ([]byte, error) {
	switch s {
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEPREMIUM:
		return []byte(s), nil
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEMARGINAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OptionPaymentType) UnmarshalText(data []byte) error {
	switch V1OptionPaymentType(data) {
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEUNSPECIFIED:
		*s = V1OptionPaymentTypeOPTIONPAYMENTTYPEUNSPECIFIED
		return nil
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEPREMIUM:
		*s = V1OptionPaymentTypeOPTIONPAYMENTTYPEPREMIUM
		return nil
	case V1OptionPaymentTypeOPTIONPAYMENTTYPEMARGINAL:
		*s = V1OptionPaymentTypeOPTIONPAYMENTTYPEMARGINAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные по опциону.
// Ref: #/components/schemas/v1OptionResponse
type V1OptionResponse struct {
	Instrument OptV1Option `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1OptionResponse) GetInstrument() OptV1Option {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1OptionResponse) SetInstrument(val OptV1Option) {
	s.Instrument = val
}

func (*V1OptionResponse) instrumentsServiceOptionByRes() {}

// Тип опциона по способу исполнения.
// Ref: #/components/schemas/v1OptionSettlementType
type V1OptionSettlementType string

const (
	V1OptionSettlementTypeOPTIONEXECUTIONTYPEUNSPECIFIED      V1OptionSettlementType = "OPTION_EXECUTION_TYPE_UNSPECIFIED"
	V1OptionSettlementTypeOPTIONEXECUTIONTYPEPHYSICALDELIVERY V1OptionSettlementType = "OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY"
	V1OptionSettlementTypeOPTIONEXECUTIONTYPECASHSETTLEMENT   V1OptionSettlementType = "OPTION_EXECUTION_TYPE_CASH_SETTLEMENT"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OptionSettlementType) MarshalText() ([]byte, error) {
	switch s {
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPEPHYSICALDELIVERY:
		return []byte(s), nil
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPECASHSETTLEMENT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OptionSettlementType) UnmarshalText(data []byte) error {
	switch V1OptionSettlementType(data) {
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPEUNSPECIFIED:
		*s = V1OptionSettlementTypeOPTIONEXECUTIONTYPEUNSPECIFIED
		return nil
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPEPHYSICALDELIVERY:
		*s = V1OptionSettlementTypeOPTIONEXECUTIONTYPEPHYSICALDELIVERY
		return nil
	case V1OptionSettlementTypeOPTIONEXECUTIONTYPECASHSETTLEMENT:
		*s = V1OptionSettlementTypeOPTIONEXECUTIONTYPECASHSETTLEMENT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип опциона по стилю.
// Ref: #/components/schemas/v1OptionStyle
type V1OptionStyle string

const (
	V1OptionStyleOPTIONSTYLEUNSPECIFIED V1OptionStyle = "OPTION_STYLE_UNSPECIFIED"
	V1OptionStyleOPTIONSTYLEAMERICAN    V1OptionStyle = "OPTION_STYLE_AMERICAN"
	V1OptionStyleOPTIONSTYLEEUROPEAN    V1OptionStyle = "OPTION_STYLE_EUROPEAN"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OptionStyle) MarshalText() ([]byte, error) {
	switch s {
	case V1OptionStyleOPTIONSTYLEUNSPECIFIED:
		return []byte(s), nil
	case V1OptionStyleOPTIONSTYLEAMERICAN:
		return []byte(s), nil
	case V1OptionStyleOPTIONSTYLEEUROPEAN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OptionStyle) UnmarshalText(data []byte) error {
	switch V1OptionStyle(data) {
	case V1OptionStyleOPTIONSTYLEUNSPECIFIED:
		*s = V1OptionStyleOPTIONSTYLEUNSPECIFIED
		return nil
	case V1OptionStyleOPTIONSTYLEAMERICAN:
		*s = V1OptionStyleOPTIONSTYLEAMERICAN
		return nil
	case V1OptionStyleOPTIONSTYLEEUROPEAN:
		*s = V1OptionStyleOPTIONSTYLEEUROPEAN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные по опционам.
// Ref: #/components/schemas/v1OptionsResponse
type V1OptionsResponse struct {
	Instruments []V1Option `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1OptionsResponse) GetInstruments() []V1Option {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1OptionsResponse) SetInstruments(val []V1Option) {
	s.Instruments = val
}

func (*V1OptionsResponse) instrumentsServiceOptionsRes() {}

// Массив предложений/спроса.
// Ref: #/components/schemas/v1Order
type V1Order struct {
	Price    OptV1Quotation `json:"price"`
	Quantity OptStringInt64 `json:"quantity"`
}

// GetPrice returns the value of Price.
func (s *V1Order) GetPrice() OptV1Quotation {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s *V1Order) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// SetPrice sets the value of Price.
func (s *V1Order) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *V1Order) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// Направление операции.
// Ref: #/components/schemas/v1OrderDirection
type V1OrderDirection string

const (
	V1OrderDirectionORDERDIRECTIONUNSPECIFIED V1OrderDirection = "ORDER_DIRECTION_UNSPECIFIED"
	V1OrderDirectionORDERDIRECTIONBUY         V1OrderDirection = "ORDER_DIRECTION_BUY"
	V1OrderDirectionORDERDIRECTIONSELL        V1OrderDirection = "ORDER_DIRECTION_SELL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OrderDirection) MarshalText() ([]byte, error) {
	switch s {
	case V1OrderDirectionORDERDIRECTIONUNSPECIFIED:
		return []byte(s), nil
	case V1OrderDirectionORDERDIRECTIONBUY:
		return []byte(s), nil
	case V1OrderDirectionORDERDIRECTIONSELL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OrderDirection) UnmarshalText(data []byte) error {
	switch V1OrderDirection(data) {
	case V1OrderDirectionORDERDIRECTIONUNSPECIFIED:
		*s = V1OrderDirectionORDERDIRECTIONUNSPECIFIED
		return nil
	case V1OrderDirectionORDERDIRECTIONBUY:
		*s = V1OrderDirectionORDERDIRECTIONBUY
		return nil
	case V1OrderDirectionORDERDIRECTIONSELL:
		*s = V1OrderDirectionORDERDIRECTIONSELL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/v1OrderExecutionReportStatus
type V1OrderExecutionReportStatus string

const (
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSUNSPECIFIED   V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_UNSPECIFIED"
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSFILL          V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_FILL"
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSREJECTED      V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_REJECTED"
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSCANCELLED     V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_CANCELLED"
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSNEW           V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_NEW"
	V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSPARTIALLYFILL V1OrderExecutionReportStatus = "EXECUTION_REPORT_STATUS_PARTIALLYFILL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OrderExecutionReportStatus) MarshalText() ([]byte, error) {
	switch s {
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSUNSPECIFIED:
		return []byte(s), nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSFILL:
		return []byte(s), nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSREJECTED:
		return []byte(s), nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSCANCELLED:
		return []byte(s), nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSNEW:
		return []byte(s), nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSPARTIALLYFILL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OrderExecutionReportStatus) UnmarshalText(data []byte) error {
	switch V1OrderExecutionReportStatus(data) {
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSUNSPECIFIED:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSUNSPECIFIED
		return nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSFILL:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSFILL
		return nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSREJECTED:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSREJECTED
		return nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSCANCELLED:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSCANCELLED
		return nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSNEW:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSNEW
		return nil
	case V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSPARTIALLYFILL:
		*s = V1OrderExecutionReportStatusEXECUTIONREPORTSTATUSPARTIALLYFILL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Сделки в рамках торгового поручения.
// Ref: #/components/schemas/v1OrderStage
type V1OrderStage struct {
	Price    OptV1MoneyValue `json:"price"`
	Quantity OptStringInt64  `json:"quantity"`
	TradeId  OptString       `json:"tradeId"`
}

// GetPrice returns the value of Price.
func (s *V1OrderStage) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s *V1OrderStage) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetTradeId returns the value of TradeId.
func (s *V1OrderStage) GetTradeId() OptString {
	return s.TradeId
}

// SetPrice sets the value of Price.
func (s *V1OrderStage) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *V1OrderStage) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetTradeId sets the value of TradeId.
func (s *V1OrderStage) SetTradeId(val OptString) {
	s.TradeId = val
}

// Информация о торговом поручении.
// Ref: #/components/schemas/v1OrderState
type V1OrderState struct {
	OrderId               OptString                       `json:"orderId"`
	ExecutionReportStatus OptV1OrderExecutionReportStatus `json:"executionReportStatus"`
	LotsRequested         OptStringInt64                  `json:"lotsRequested"`
	LotsExecuted          OptStringInt64                  `json:"lotsExecuted"`
	InitialOrderPrice     OptV1MoneyValue                 `json:"initialOrderPrice"`
	ExecutedOrderPrice    OptV1MoneyValue                 `json:"executedOrderPrice"`
	TotalOrderAmount      OptV1MoneyValue                 `json:"totalOrderAmount"`
	AveragePositionPrice  OptV1MoneyValue                 `json:"averagePositionPrice"`
	InitialCommission     OptV1MoneyValue                 `json:"initialCommission"`
	ExecutedCommission    OptV1MoneyValue                 `json:"executedCommission"`
	Figi                  OptString                       `json:"figi"`
	Direction             OptV1OrderDirection             `json:"direction"`
	InitialSecurityPrice  OptV1MoneyValue                 `json:"initialSecurityPrice"`
	Stages                []V1OrderStage                  `json:"stages"`
	ServiceCommission     OptV1MoneyValue                 `json:"serviceCommission"`
	Currency              OptString                       `json:"currency"`
	OrderType             OptV1OrderType                  `json:"orderType"`
	OrderDate             OptDateTime                     `json:"orderDate"`
	InstrumentUid         OptString                       `json:"instrumentUid"`
}

// GetOrderId returns the value of OrderId.
func (s *V1OrderState) GetOrderId() OptString {
	return s.OrderId
}

// GetExecutionReportStatus returns the value of ExecutionReportStatus.
func (s *V1OrderState) GetExecutionReportStatus() OptV1OrderExecutionReportStatus {
	return s.ExecutionReportStatus
}

// GetLotsRequested returns the value of LotsRequested.
func (s *V1OrderState) GetLotsRequested() OptStringInt64 {
	return s.LotsRequested
}

// GetLotsExecuted returns the value of LotsExecuted.
func (s *V1OrderState) GetLotsExecuted() OptStringInt64 {
	return s.LotsExecuted
}

// GetInitialOrderPrice returns the value of InitialOrderPrice.
func (s *V1OrderState) GetInitialOrderPrice() OptV1MoneyValue {
	return s.InitialOrderPrice
}

// GetExecutedOrderPrice returns the value of ExecutedOrderPrice.
func (s *V1OrderState) GetExecutedOrderPrice() OptV1MoneyValue {
	return s.ExecutedOrderPrice
}

// GetTotalOrderAmount returns the value of TotalOrderAmount.
func (s *V1OrderState) GetTotalOrderAmount() OptV1MoneyValue {
	return s.TotalOrderAmount
}

// GetAveragePositionPrice returns the value of AveragePositionPrice.
func (s *V1OrderState) GetAveragePositionPrice() OptV1MoneyValue {
	return s.AveragePositionPrice
}

// GetInitialCommission returns the value of InitialCommission.
func (s *V1OrderState) GetInitialCommission() OptV1MoneyValue {
	return s.InitialCommission
}

// GetExecutedCommission returns the value of ExecutedCommission.
func (s *V1OrderState) GetExecutedCommission() OptV1MoneyValue {
	return s.ExecutedCommission
}

// GetFigi returns the value of Figi.
func (s *V1OrderState) GetFigi() OptString {
	return s.Figi
}

// GetDirection returns the value of Direction.
func (s *V1OrderState) GetDirection() OptV1OrderDirection {
	return s.Direction
}

// GetInitialSecurityPrice returns the value of InitialSecurityPrice.
func (s *V1OrderState) GetInitialSecurityPrice() OptV1MoneyValue {
	return s.InitialSecurityPrice
}

// GetStages returns the value of Stages.
func (s *V1OrderState) GetStages() []V1OrderStage {
	return s.Stages
}

// GetServiceCommission returns the value of ServiceCommission.
func (s *V1OrderState) GetServiceCommission() OptV1MoneyValue {
	return s.ServiceCommission
}

// GetCurrency returns the value of Currency.
func (s *V1OrderState) GetCurrency() OptString {
	return s.Currency
}

// GetOrderType returns the value of OrderType.
func (s *V1OrderState) GetOrderType() OptV1OrderType {
	return s.OrderType
}

// GetOrderDate returns the value of OrderDate.
func (s *V1OrderState) GetOrderDate() OptDateTime {
	return s.OrderDate
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1OrderState) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetOrderId sets the value of OrderId.
func (s *V1OrderState) SetOrderId(val OptString) {
	s.OrderId = val
}

// SetExecutionReportStatus sets the value of ExecutionReportStatus.
func (s *V1OrderState) SetExecutionReportStatus(val OptV1OrderExecutionReportStatus) {
	s.ExecutionReportStatus = val
}

// SetLotsRequested sets the value of LotsRequested.
func (s *V1OrderState) SetLotsRequested(val OptStringInt64) {
	s.LotsRequested = val
}

// SetLotsExecuted sets the value of LotsExecuted.
func (s *V1OrderState) SetLotsExecuted(val OptStringInt64) {
	s.LotsExecuted = val
}

// SetInitialOrderPrice sets the value of InitialOrderPrice.
func (s *V1OrderState) SetInitialOrderPrice(val OptV1MoneyValue) {
	s.InitialOrderPrice = val
}

// SetExecutedOrderPrice sets the value of ExecutedOrderPrice.
func (s *V1OrderState) SetExecutedOrderPrice(val OptV1MoneyValue) {
	s.ExecutedOrderPrice = val
}

// SetTotalOrderAmount sets the value of TotalOrderAmount.
func (s *V1OrderState) SetTotalOrderAmount(val OptV1MoneyValue) {
	s.TotalOrderAmount = val
}

// SetAveragePositionPrice sets the value of AveragePositionPrice.
func (s *V1OrderState) SetAveragePositionPrice(val OptV1MoneyValue) {
	s.AveragePositionPrice = val
}

// SetInitialCommission sets the value of InitialCommission.
func (s *V1OrderState) SetInitialCommission(val OptV1MoneyValue) {
	s.InitialCommission = val
}

// SetExecutedCommission sets the value of ExecutedCommission.
func (s *V1OrderState) SetExecutedCommission(val OptV1MoneyValue) {
	s.ExecutedCommission = val
}

// SetFigi sets the value of Figi.
func (s *V1OrderState) SetFigi(val OptString) {
	s.Figi = val
}

// SetDirection sets the value of Direction.
func (s *V1OrderState) SetDirection(val OptV1OrderDirection) {
	s.Direction = val
}

// SetInitialSecurityPrice sets the value of InitialSecurityPrice.
func (s *V1OrderState) SetInitialSecurityPrice(val OptV1MoneyValue) {
	s.InitialSecurityPrice = val
}

// SetStages sets the value of Stages.
func (s *V1OrderState) SetStages(val []V1OrderStage) {
	s.Stages = val
}

// SetServiceCommission sets the value of ServiceCommission.
func (s *V1OrderState) SetServiceCommission(val OptV1MoneyValue) {
	s.ServiceCommission = val
}

// SetCurrency sets the value of Currency.
func (s *V1OrderState) SetCurrency(val OptString) {
	s.Currency = val
}

// SetOrderType sets the value of OrderType.
func (s *V1OrderState) SetOrderType(val OptV1OrderType) {
	s.OrderType = val
}

// SetOrderDate sets the value of OrderDate.
func (s *V1OrderState) SetOrderDate(val OptDateTime) {
	s.OrderDate = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1OrderState) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

func (*V1OrderState) ordersServiceGetOrderStateRes()         {}
func (*V1OrderState) sandboxServiceGetSandboxOrderStateRes() {}

// Тип заявки.
// Ref: #/components/schemas/v1OrderType
type V1OrderType string

const (
	V1OrderTypeORDERTYPEUNSPECIFIED V1OrderType = "ORDER_TYPE_UNSPECIFIED"
	V1OrderTypeORDERTYPELIMIT       V1OrderType = "ORDER_TYPE_LIMIT"
	V1OrderTypeORDERTYPEMARKET      V1OrderType = "ORDER_TYPE_MARKET"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1OrderType) MarshalText() ([]byte, error) {
	switch s {
	case V1OrderTypeORDERTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1OrderTypeORDERTYPELIMIT:
		return []byte(s), nil
	case V1OrderTypeORDERTYPEMARKET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1OrderType) UnmarshalText(data []byte) error {
	switch V1OrderType(data) {
	case V1OrderTypeORDERTYPEUNSPECIFIED:
		*s = V1OrderTypeORDERTYPEUNSPECIFIED
		return nil
	case V1OrderTypeORDERTYPELIMIT:
		*s = V1OrderTypeORDERTYPELIMIT
		return nil
	case V1OrderTypeORDERTYPEMARKET:
		*s = V1OrderTypeORDERTYPEMARKET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Позиции портфеля.
// Ref: #/components/schemas/v1PortfolioPosition
type V1PortfolioPosition struct {
	Figi                     OptString       `json:"figi"`
	InstrumentType           OptString       `json:"instrumentType"`
	Quantity                 OptV1Quotation  `json:"quantity"`
	AveragePositionPrice     OptV1MoneyValue `json:"averagePositionPrice"`
	ExpectedYield            OptV1Quotation  `json:"expectedYield"`
	CurrentNkd               OptV1MoneyValue `json:"currentNkd"`
	AveragePositionPricePt   OptV1Quotation  `json:"averagePositionPricePt"`
	CurrentPrice             OptV1MoneyValue `json:"currentPrice"`
	AveragePositionPriceFifo OptV1MoneyValue `json:"averagePositionPriceFifo"`
	QuantityLots             OptV1Quotation  `json:"quantityLots"`
	Blocked                  OptBool         `json:"blocked"`
	BlockedLots              OptV1Quotation  `json:"blockedLots"`
	PositionUid              OptString       `json:"positionUid"`
	InstrumentUid            OptString       `json:"instrumentUid"`
	VarMargin                OptV1MoneyValue `json:"varMargin"`
	ExpectedYieldFifo        OptV1Quotation  `json:"expectedYieldFifo"`
}

// GetFigi returns the value of Figi.
func (s *V1PortfolioPosition) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1PortfolioPosition) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetQuantity returns the value of Quantity.
func (s *V1PortfolioPosition) GetQuantity() OptV1Quotation {
	return s.Quantity
}

// GetAveragePositionPrice returns the value of AveragePositionPrice.
func (s *V1PortfolioPosition) GetAveragePositionPrice() OptV1MoneyValue {
	return s.AveragePositionPrice
}

// GetExpectedYield returns the value of ExpectedYield.
func (s *V1PortfolioPosition) GetExpectedYield() OptV1Quotation {
	return s.ExpectedYield
}

// GetCurrentNkd returns the value of CurrentNkd.
func (s *V1PortfolioPosition) GetCurrentNkd() OptV1MoneyValue {
	return s.CurrentNkd
}

// GetAveragePositionPricePt returns the value of AveragePositionPricePt.
func (s *V1PortfolioPosition) GetAveragePositionPricePt() OptV1Quotation {
	return s.AveragePositionPricePt
}

// GetCurrentPrice returns the value of CurrentPrice.
func (s *V1PortfolioPosition) GetCurrentPrice() OptV1MoneyValue {
	return s.CurrentPrice
}

// GetAveragePositionPriceFifo returns the value of AveragePositionPriceFifo.
func (s *V1PortfolioPosition) GetAveragePositionPriceFifo() OptV1MoneyValue {
	return s.AveragePositionPriceFifo
}

// GetQuantityLots returns the value of QuantityLots.
func (s *V1PortfolioPosition) GetQuantityLots() OptV1Quotation {
	return s.QuantityLots
}

// GetBlocked returns the value of Blocked.
func (s *V1PortfolioPosition) GetBlocked() OptBool {
	return s.Blocked
}

// GetBlockedLots returns the value of BlockedLots.
func (s *V1PortfolioPosition) GetBlockedLots() OptV1Quotation {
	return s.BlockedLots
}

// GetPositionUid returns the value of PositionUid.
func (s *V1PortfolioPosition) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1PortfolioPosition) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetVarMargin returns the value of VarMargin.
func (s *V1PortfolioPosition) GetVarMargin() OptV1MoneyValue {
	return s.VarMargin
}

// GetExpectedYieldFifo returns the value of ExpectedYieldFifo.
func (s *V1PortfolioPosition) GetExpectedYieldFifo() OptV1Quotation {
	return s.ExpectedYieldFifo
}

// SetFigi sets the value of Figi.
func (s *V1PortfolioPosition) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1PortfolioPosition) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetQuantity sets the value of Quantity.
func (s *V1PortfolioPosition) SetQuantity(val OptV1Quotation) {
	s.Quantity = val
}

// SetAveragePositionPrice sets the value of AveragePositionPrice.
func (s *V1PortfolioPosition) SetAveragePositionPrice(val OptV1MoneyValue) {
	s.AveragePositionPrice = val
}

// SetExpectedYield sets the value of ExpectedYield.
func (s *V1PortfolioPosition) SetExpectedYield(val OptV1Quotation) {
	s.ExpectedYield = val
}

// SetCurrentNkd sets the value of CurrentNkd.
func (s *V1PortfolioPosition) SetCurrentNkd(val OptV1MoneyValue) {
	s.CurrentNkd = val
}

// SetAveragePositionPricePt sets the value of AveragePositionPricePt.
func (s *V1PortfolioPosition) SetAveragePositionPricePt(val OptV1Quotation) {
	s.AveragePositionPricePt = val
}

// SetCurrentPrice sets the value of CurrentPrice.
func (s *V1PortfolioPosition) SetCurrentPrice(val OptV1MoneyValue) {
	s.CurrentPrice = val
}

// SetAveragePositionPriceFifo sets the value of AveragePositionPriceFifo.
func (s *V1PortfolioPosition) SetAveragePositionPriceFifo(val OptV1MoneyValue) {
	s.AveragePositionPriceFifo = val
}

// SetQuantityLots sets the value of QuantityLots.
func (s *V1PortfolioPosition) SetQuantityLots(val OptV1Quotation) {
	s.QuantityLots = val
}

// SetBlocked sets the value of Blocked.
func (s *V1PortfolioPosition) SetBlocked(val OptBool) {
	s.Blocked = val
}

// SetBlockedLots sets the value of BlockedLots.
func (s *V1PortfolioPosition) SetBlockedLots(val OptV1Quotation) {
	s.BlockedLots = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1PortfolioPosition) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1PortfolioPosition) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetVarMargin sets the value of VarMargin.
func (s *V1PortfolioPosition) SetVarMargin(val OptV1MoneyValue) {
	s.VarMargin = val
}

// SetExpectedYieldFifo sets the value of ExpectedYieldFifo.
func (s *V1PortfolioPosition) SetExpectedYieldFifo(val OptV1Quotation) {
	s.ExpectedYieldFifo = val
}

// Запрос получения текущего портфеля по счёту.
// Ref: #/components/schemas/v1PortfolioRequest
type V1PortfolioRequest struct {
	AccountId OptString                          `json:"accountId"`
	Currency  OptPortfolioRequestCurrencyRequest `json:"currency"`
}

// GetAccountId returns the value of AccountId.
func (s *V1PortfolioRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetCurrency returns the value of Currency.
func (s *V1PortfolioRequest) GetCurrency() OptPortfolioRequestCurrencyRequest {
	return s.Currency
}

// SetAccountId sets the value of AccountId.
func (s *V1PortfolioRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetCurrency sets the value of Currency.
func (s *V1PortfolioRequest) SetCurrency(val OptPortfolioRequestCurrencyRequest) {
	s.Currency = val
}

// Текущий портфель по счёту.
// Ref: #/components/schemas/v1PortfolioResponse
type V1PortfolioResponse struct {
	TotalAmountShares     OptV1MoneyValue              `json:"totalAmountShares"`
	TotalAmountBonds      OptV1MoneyValue              `json:"totalAmountBonds"`
	TotalAmountEtf        OptV1MoneyValue              `json:"totalAmountEtf"`
	TotalAmountCurrencies OptV1MoneyValue              `json:"totalAmountCurrencies"`
	TotalAmountFutures    OptV1MoneyValue              `json:"totalAmountFutures"`
	ExpectedYield         OptV1Quotation               `json:"expectedYield"`
	Positions             []V1PortfolioPosition        `json:"positions"`
	AccountId             OptString                    `json:"accountId"`
	TotalAmountOptions    OptV1MoneyValue              `json:"totalAmountOptions"`
	TotalAmountSp         OptV1MoneyValue              `json:"totalAmountSp"`
	TotalAmountPortfolio  OptV1MoneyValue              `json:"totalAmountPortfolio"`
	VirtualPositions      []V1VirtualPortfolioPosition `json:"virtualPositions"`
}

// GetTotalAmountShares returns the value of TotalAmountShares.
func (s *V1PortfolioResponse) GetTotalAmountShares() OptV1MoneyValue {
	return s.TotalAmountShares
}

// GetTotalAmountBonds returns the value of TotalAmountBonds.
func (s *V1PortfolioResponse) GetTotalAmountBonds() OptV1MoneyValue {
	return s.TotalAmountBonds
}

// GetTotalAmountEtf returns the value of TotalAmountEtf.
func (s *V1PortfolioResponse) GetTotalAmountEtf() OptV1MoneyValue {
	return s.TotalAmountEtf
}

// GetTotalAmountCurrencies returns the value of TotalAmountCurrencies.
func (s *V1PortfolioResponse) GetTotalAmountCurrencies() OptV1MoneyValue {
	return s.TotalAmountCurrencies
}

// GetTotalAmountFutures returns the value of TotalAmountFutures.
func (s *V1PortfolioResponse) GetTotalAmountFutures() OptV1MoneyValue {
	return s.TotalAmountFutures
}

// GetExpectedYield returns the value of ExpectedYield.
func (s *V1PortfolioResponse) GetExpectedYield() OptV1Quotation {
	return s.ExpectedYield
}

// GetPositions returns the value of Positions.
func (s *V1PortfolioResponse) GetPositions() []V1PortfolioPosition {
	return s.Positions
}

// GetAccountId returns the value of AccountId.
func (s *V1PortfolioResponse) GetAccountId() OptString {
	return s.AccountId
}

// GetTotalAmountOptions returns the value of TotalAmountOptions.
func (s *V1PortfolioResponse) GetTotalAmountOptions() OptV1MoneyValue {
	return s.TotalAmountOptions
}

// GetTotalAmountSp returns the value of TotalAmountSp.
func (s *V1PortfolioResponse) GetTotalAmountSp() OptV1MoneyValue {
	return s.TotalAmountSp
}

// GetTotalAmountPortfolio returns the value of TotalAmountPortfolio.
func (s *V1PortfolioResponse) GetTotalAmountPortfolio() OptV1MoneyValue {
	return s.TotalAmountPortfolio
}

// GetVirtualPositions returns the value of VirtualPositions.
func (s *V1PortfolioResponse) GetVirtualPositions() []V1VirtualPortfolioPosition {
	return s.VirtualPositions
}

// SetTotalAmountShares sets the value of TotalAmountShares.
func (s *V1PortfolioResponse) SetTotalAmountShares(val OptV1MoneyValue) {
	s.TotalAmountShares = val
}

// SetTotalAmountBonds sets the value of TotalAmountBonds.
func (s *V1PortfolioResponse) SetTotalAmountBonds(val OptV1MoneyValue) {
	s.TotalAmountBonds = val
}

// SetTotalAmountEtf sets the value of TotalAmountEtf.
func (s *V1PortfolioResponse) SetTotalAmountEtf(val OptV1MoneyValue) {
	s.TotalAmountEtf = val
}

// SetTotalAmountCurrencies sets the value of TotalAmountCurrencies.
func (s *V1PortfolioResponse) SetTotalAmountCurrencies(val OptV1MoneyValue) {
	s.TotalAmountCurrencies = val
}

// SetTotalAmountFutures sets the value of TotalAmountFutures.
func (s *V1PortfolioResponse) SetTotalAmountFutures(val OptV1MoneyValue) {
	s.TotalAmountFutures = val
}

// SetExpectedYield sets the value of ExpectedYield.
func (s *V1PortfolioResponse) SetExpectedYield(val OptV1Quotation) {
	s.ExpectedYield = val
}

// SetPositions sets the value of Positions.
func (s *V1PortfolioResponse) SetPositions(val []V1PortfolioPosition) {
	s.Positions = val
}

// SetAccountId sets the value of AccountId.
func (s *V1PortfolioResponse) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetTotalAmountOptions sets the value of TotalAmountOptions.
func (s *V1PortfolioResponse) SetTotalAmountOptions(val OptV1MoneyValue) {
	s.TotalAmountOptions = val
}

// SetTotalAmountSp sets the value of TotalAmountSp.
func (s *V1PortfolioResponse) SetTotalAmountSp(val OptV1MoneyValue) {
	s.TotalAmountSp = val
}

// SetTotalAmountPortfolio sets the value of TotalAmountPortfolio.
func (s *V1PortfolioResponse) SetTotalAmountPortfolio(val OptV1MoneyValue) {
	s.TotalAmountPortfolio = val
}

// SetVirtualPositions sets the value of VirtualPositions.
func (s *V1PortfolioResponse) SetVirtualPositions(val []V1VirtualPortfolioPosition) {
	s.VirtualPositions = val
}

func (*V1PortfolioResponse) operationsServiceGetPortfolioRes()     {}
func (*V1PortfolioResponse) sandboxServiceGetSandboxPortfolioRes() {}

// Баланс фьючерса.
// Ref: #/components/schemas/v1PositionsFutures
type V1PositionsFutures struct {
	Figi          OptString      `json:"figi"`
	Blocked       OptStringInt64 `json:"blocked"`
	Balance       OptStringInt64 `json:"balance"`
	PositionUid   OptString      `json:"positionUid"`
	InstrumentUid OptString      `json:"instrumentUid"`
}

// GetFigi returns the value of Figi.
func (s *V1PositionsFutures) GetFigi() OptString {
	return s.Figi
}

// GetBlocked returns the value of Blocked.
func (s *V1PositionsFutures) GetBlocked() OptStringInt64 {
	return s.Blocked
}

// GetBalance returns the value of Balance.
func (s *V1PositionsFutures) GetBalance() OptStringInt64 {
	return s.Balance
}

// GetPositionUid returns the value of PositionUid.
func (s *V1PositionsFutures) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1PositionsFutures) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetFigi sets the value of Figi.
func (s *V1PositionsFutures) SetFigi(val OptString) {
	s.Figi = val
}

// SetBlocked sets the value of Blocked.
func (s *V1PositionsFutures) SetBlocked(val OptStringInt64) {
	s.Blocked = val
}

// SetBalance sets the value of Balance.
func (s *V1PositionsFutures) SetBalance(val OptStringInt64) {
	s.Balance = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1PositionsFutures) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1PositionsFutures) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Баланс опциона.
// Ref: #/components/schemas/v1PositionsOptions
type V1PositionsOptions struct {
	PositionUid   OptString      `json:"positionUid"`
	InstrumentUid OptString      `json:"instrumentUid"`
	Blocked       OptStringInt64 `json:"blocked"`
	Balance       OptStringInt64 `json:"balance"`
}

// GetPositionUid returns the value of PositionUid.
func (s *V1PositionsOptions) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1PositionsOptions) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetBlocked returns the value of Blocked.
func (s *V1PositionsOptions) GetBlocked() OptStringInt64 {
	return s.Blocked
}

// GetBalance returns the value of Balance.
func (s *V1PositionsOptions) GetBalance() OptStringInt64 {
	return s.Balance
}

// SetPositionUid sets the value of PositionUid.
func (s *V1PositionsOptions) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1PositionsOptions) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetBlocked sets the value of Blocked.
func (s *V1PositionsOptions) SetBlocked(val OptStringInt64) {
	s.Blocked = val
}

// SetBalance sets the value of Balance.
func (s *V1PositionsOptions) SetBalance(val OptStringInt64) {
	s.Balance = val
}

// Запрос позиций портфеля по счёту.
// Ref: #/components/schemas/v1PositionsRequest
type V1PositionsRequest struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1PositionsRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1PositionsRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Список позиций по счёту.
// Ref: #/components/schemas/v1PositionsResponse
type V1PositionsResponse struct {
	Money                   []V1MoneyValue          `json:"money"`
	Blocked                 []V1MoneyValue          `json:"blocked"`
	Securities              []V1PositionsSecurities `json:"securities"`
	LimitsLoadingInProgress OptBool                 `json:"limitsLoadingInProgress"`
	Futures                 []V1PositionsFutures    `json:"futures"`
	Options                 []V1PositionsOptions    `json:"options"`
}

// GetMoney returns the value of Money.
func (s *V1PositionsResponse) GetMoney() []V1MoneyValue {
	return s.Money
}

// GetBlocked returns the value of Blocked.
func (s *V1PositionsResponse) GetBlocked() []V1MoneyValue {
	return s.Blocked
}

// GetSecurities returns the value of Securities.
func (s *V1PositionsResponse) GetSecurities() []V1PositionsSecurities {
	return s.Securities
}

// GetLimitsLoadingInProgress returns the value of LimitsLoadingInProgress.
func (s *V1PositionsResponse) GetLimitsLoadingInProgress() OptBool {
	return s.LimitsLoadingInProgress
}

// GetFutures returns the value of Futures.
func (s *V1PositionsResponse) GetFutures() []V1PositionsFutures {
	return s.Futures
}

// GetOptions returns the value of Options.
func (s *V1PositionsResponse) GetOptions() []V1PositionsOptions {
	return s.Options
}

// SetMoney sets the value of Money.
func (s *V1PositionsResponse) SetMoney(val []V1MoneyValue) {
	s.Money = val
}

// SetBlocked sets the value of Blocked.
func (s *V1PositionsResponse) SetBlocked(val []V1MoneyValue) {
	s.Blocked = val
}

// SetSecurities sets the value of Securities.
func (s *V1PositionsResponse) SetSecurities(val []V1PositionsSecurities) {
	s.Securities = val
}

// SetLimitsLoadingInProgress sets the value of LimitsLoadingInProgress.
func (s *V1PositionsResponse) SetLimitsLoadingInProgress(val OptBool) {
	s.LimitsLoadingInProgress = val
}

// SetFutures sets the value of Futures.
func (s *V1PositionsResponse) SetFutures(val []V1PositionsFutures) {
	s.Futures = val
}

// SetOptions sets the value of Options.
func (s *V1PositionsResponse) SetOptions(val []V1PositionsOptions) {
	s.Options = val
}

func (*V1PositionsResponse) operationsServiceGetPositionsRes()     {}
func (*V1PositionsResponse) sandboxServiceGetSandboxPositionsRes() {}

// Баланс позиции ценной бумаги.
// Ref: #/components/schemas/v1PositionsSecurities
type V1PositionsSecurities struct {
	Figi            OptString      `json:"figi"`
	Blocked         OptStringInt64 `json:"blocked"`
	Balance         OptStringInt64 `json:"balance"`
	PositionUid     OptString      `json:"positionUid"`
	InstrumentUid   OptString      `json:"instrumentUid"`
	ExchangeBlocked OptBool        `json:"exchangeBlocked"`
	InstrumentType  OptString      `json:"instrumentType"`
}

// GetFigi returns the value of Figi.
func (s *V1PositionsSecurities) GetFigi() OptString {
	return s.Figi
}

// GetBlocked returns the value of Blocked.
func (s *V1PositionsSecurities) GetBlocked() OptStringInt64 {
	return s.Blocked
}

// GetBalance returns the value of Balance.
func (s *V1PositionsSecurities) GetBalance() OptStringInt64 {
	return s.Balance
}

// GetPositionUid returns the value of PositionUid.
func (s *V1PositionsSecurities) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1PositionsSecurities) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetExchangeBlocked returns the value of ExchangeBlocked.
func (s *V1PositionsSecurities) GetExchangeBlocked() OptBool {
	return s.ExchangeBlocked
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1PositionsSecurities) GetInstrumentType() OptString {
	return s.InstrumentType
}

// SetFigi sets the value of Figi.
func (s *V1PositionsSecurities) SetFigi(val OptString) {
	s.Figi = val
}

// SetBlocked sets the value of Blocked.
func (s *V1PositionsSecurities) SetBlocked(val OptStringInt64) {
	s.Blocked = val
}

// SetBalance sets the value of Balance.
func (s *V1PositionsSecurities) SetBalance(val OptStringInt64) {
	s.Balance = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1PositionsSecurities) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1PositionsSecurities) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetExchangeBlocked sets the value of ExchangeBlocked.
func (s *V1PositionsSecurities) SetExchangeBlocked(val OptBool) {
	s.ExchangeBlocked = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1PositionsSecurities) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// Запрос выставления торгового поручения.
// Ref: #/components/schemas/v1PostOrderRequest
type V1PostOrderRequest struct {
	Figi         OptString           `json:"figi"`
	Quantity     OptStringInt64      `json:"quantity"`
	Price        OptV1Quotation      `json:"price"`
	Direction    OptV1OrderDirection `json:"direction"`
	AccountId    OptString           `json:"accountId"`
	OrderType    OptV1OrderType      `json:"orderType"`
	OrderId      OptString           `json:"orderId"`
	InstrumentId OptString           `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1PostOrderRequest) GetFigi() OptString {
	return s.Figi
}

// GetQuantity returns the value of Quantity.
func (s *V1PostOrderRequest) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *V1PostOrderRequest) GetPrice() OptV1Quotation {
	return s.Price
}

// GetDirection returns the value of Direction.
func (s *V1PostOrderRequest) GetDirection() OptV1OrderDirection {
	return s.Direction
}

// GetAccountId returns the value of AccountId.
func (s *V1PostOrderRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetOrderType returns the value of OrderType.
func (s *V1PostOrderRequest) GetOrderType() OptV1OrderType {
	return s.OrderType
}

// GetOrderId returns the value of OrderId.
func (s *V1PostOrderRequest) GetOrderId() OptString {
	return s.OrderId
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1PostOrderRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1PostOrderRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetQuantity sets the value of Quantity.
func (s *V1PostOrderRequest) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *V1PostOrderRequest) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetDirection sets the value of Direction.
func (s *V1PostOrderRequest) SetDirection(val OptV1OrderDirection) {
	s.Direction = val
}

// SetAccountId sets the value of AccountId.
func (s *V1PostOrderRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetOrderType sets the value of OrderType.
func (s *V1PostOrderRequest) SetOrderType(val OptV1OrderType) {
	s.OrderType = val
}

// SetOrderId sets the value of OrderId.
func (s *V1PostOrderRequest) SetOrderId(val OptString) {
	s.OrderId = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1PostOrderRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Информация о выставлении поручения.
// Ref: #/components/schemas/v1PostOrderResponse
type V1PostOrderResponse struct {
	OrderId               OptString                       `json:"orderId"`
	ExecutionReportStatus OptV1OrderExecutionReportStatus `json:"executionReportStatus"`
	LotsRequested         OptStringInt64                  `json:"lotsRequested"`
	LotsExecuted          OptStringInt64                  `json:"lotsExecuted"`
	InitialOrderPrice     OptV1MoneyValue                 `json:"initialOrderPrice"`
	ExecutedOrderPrice    OptV1MoneyValue                 `json:"executedOrderPrice"`
	TotalOrderAmount      OptV1MoneyValue                 `json:"totalOrderAmount"`
	InitialCommission     OptV1MoneyValue                 `json:"initialCommission"`
	ExecutedCommission    OptV1MoneyValue                 `json:"executedCommission"`
	AciValue              OptV1MoneyValue                 `json:"aciValue"`
	Figi                  OptString                       `json:"figi"`
	Direction             OptV1OrderDirection             `json:"direction"`
	InitialSecurityPrice  OptV1MoneyValue                 `json:"initialSecurityPrice"`
	OrderType             OptV1OrderType                  `json:"orderType"`
	Message               OptString                       `json:"message"`
	InitialOrderPricePt   OptV1Quotation                  `json:"initialOrderPricePt"`
	InstrumentUid         OptString                       `json:"instrumentUid"`
}

// GetOrderId returns the value of OrderId.
func (s *V1PostOrderResponse) GetOrderId() OptString {
	return s.OrderId
}

// GetExecutionReportStatus returns the value of ExecutionReportStatus.
func (s *V1PostOrderResponse) GetExecutionReportStatus() OptV1OrderExecutionReportStatus {
	return s.ExecutionReportStatus
}

// GetLotsRequested returns the value of LotsRequested.
func (s *V1PostOrderResponse) GetLotsRequested() OptStringInt64 {
	return s.LotsRequested
}

// GetLotsExecuted returns the value of LotsExecuted.
func (s *V1PostOrderResponse) GetLotsExecuted() OptStringInt64 {
	return s.LotsExecuted
}

// GetInitialOrderPrice returns the value of InitialOrderPrice.
func (s *V1PostOrderResponse) GetInitialOrderPrice() OptV1MoneyValue {
	return s.InitialOrderPrice
}

// GetExecutedOrderPrice returns the value of ExecutedOrderPrice.
func (s *V1PostOrderResponse) GetExecutedOrderPrice() OptV1MoneyValue {
	return s.ExecutedOrderPrice
}

// GetTotalOrderAmount returns the value of TotalOrderAmount.
func (s *V1PostOrderResponse) GetTotalOrderAmount() OptV1MoneyValue {
	return s.TotalOrderAmount
}

// GetInitialCommission returns the value of InitialCommission.
func (s *V1PostOrderResponse) GetInitialCommission() OptV1MoneyValue {
	return s.InitialCommission
}

// GetExecutedCommission returns the value of ExecutedCommission.
func (s *V1PostOrderResponse) GetExecutedCommission() OptV1MoneyValue {
	return s.ExecutedCommission
}

// GetAciValue returns the value of AciValue.
func (s *V1PostOrderResponse) GetAciValue() OptV1MoneyValue {
	return s.AciValue
}

// GetFigi returns the value of Figi.
func (s *V1PostOrderResponse) GetFigi() OptString {
	return s.Figi
}

// GetDirection returns the value of Direction.
func (s *V1PostOrderResponse) GetDirection() OptV1OrderDirection {
	return s.Direction
}

// GetInitialSecurityPrice returns the value of InitialSecurityPrice.
func (s *V1PostOrderResponse) GetInitialSecurityPrice() OptV1MoneyValue {
	return s.InitialSecurityPrice
}

// GetOrderType returns the value of OrderType.
func (s *V1PostOrderResponse) GetOrderType() OptV1OrderType {
	return s.OrderType
}

// GetMessage returns the value of Message.
func (s *V1PostOrderResponse) GetMessage() OptString {
	return s.Message
}

// GetInitialOrderPricePt returns the value of InitialOrderPricePt.
func (s *V1PostOrderResponse) GetInitialOrderPricePt() OptV1Quotation {
	return s.InitialOrderPricePt
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1PostOrderResponse) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetOrderId sets the value of OrderId.
func (s *V1PostOrderResponse) SetOrderId(val OptString) {
	s.OrderId = val
}

// SetExecutionReportStatus sets the value of ExecutionReportStatus.
func (s *V1PostOrderResponse) SetExecutionReportStatus(val OptV1OrderExecutionReportStatus) {
	s.ExecutionReportStatus = val
}

// SetLotsRequested sets the value of LotsRequested.
func (s *V1PostOrderResponse) SetLotsRequested(val OptStringInt64) {
	s.LotsRequested = val
}

// SetLotsExecuted sets the value of LotsExecuted.
func (s *V1PostOrderResponse) SetLotsExecuted(val OptStringInt64) {
	s.LotsExecuted = val
}

// SetInitialOrderPrice sets the value of InitialOrderPrice.
func (s *V1PostOrderResponse) SetInitialOrderPrice(val OptV1MoneyValue) {
	s.InitialOrderPrice = val
}

// SetExecutedOrderPrice sets the value of ExecutedOrderPrice.
func (s *V1PostOrderResponse) SetExecutedOrderPrice(val OptV1MoneyValue) {
	s.ExecutedOrderPrice = val
}

// SetTotalOrderAmount sets the value of TotalOrderAmount.
func (s *V1PostOrderResponse) SetTotalOrderAmount(val OptV1MoneyValue) {
	s.TotalOrderAmount = val
}

// SetInitialCommission sets the value of InitialCommission.
func (s *V1PostOrderResponse) SetInitialCommission(val OptV1MoneyValue) {
	s.InitialCommission = val
}

// SetExecutedCommission sets the value of ExecutedCommission.
func (s *V1PostOrderResponse) SetExecutedCommission(val OptV1MoneyValue) {
	s.ExecutedCommission = val
}

// SetAciValue sets the value of AciValue.
func (s *V1PostOrderResponse) SetAciValue(val OptV1MoneyValue) {
	s.AciValue = val
}

// SetFigi sets the value of Figi.
func (s *V1PostOrderResponse) SetFigi(val OptString) {
	s.Figi = val
}

// SetDirection sets the value of Direction.
func (s *V1PostOrderResponse) SetDirection(val OptV1OrderDirection) {
	s.Direction = val
}

// SetInitialSecurityPrice sets the value of InitialSecurityPrice.
func (s *V1PostOrderResponse) SetInitialSecurityPrice(val OptV1MoneyValue) {
	s.InitialSecurityPrice = val
}

// SetOrderType sets the value of OrderType.
func (s *V1PostOrderResponse) SetOrderType(val OptV1OrderType) {
	s.OrderType = val
}

// SetMessage sets the value of Message.
func (s *V1PostOrderResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetInitialOrderPricePt sets the value of InitialOrderPricePt.
func (s *V1PostOrderResponse) SetInitialOrderPricePt(val OptV1Quotation) {
	s.InitialOrderPricePt = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1PostOrderResponse) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

func (*V1PostOrderResponse) ordersServicePostOrderRes()            {}
func (*V1PostOrderResponse) ordersServiceReplaceOrderRes()         {}
func (*V1PostOrderResponse) sandboxServicePostSandboxOrderRes()    {}
func (*V1PostOrderResponse) sandboxServiceReplaceSandboxOrderRes() {}

// Запрос выставления стоп-заявки.
// Ref: #/components/schemas/v1PostStopOrderRequest
type V1PostStopOrderRequest struct {
	Figi           OptString                    `json:"figi"`
	Quantity       OptStringInt64               `json:"quantity"`
	Price          OptV1Quotation               `json:"price"`
	StopPrice      OptV1Quotation               `json:"stopPrice"`
	Direction      OptV1StopOrderDirection      `json:"direction"`
	AccountId      OptString                    `json:"accountId"`
	ExpirationType OptV1StopOrderExpirationType `json:"expirationType"`
	StopOrderType  OptV1StopOrderType           `json:"stopOrderType"`
	ExpireDate     OptDateTime                  `json:"expireDate"`
	InstrumentId   OptString                    `json:"instrumentId"`
}

// GetFigi returns the value of Figi.
func (s *V1PostStopOrderRequest) GetFigi() OptString {
	return s.Figi
}

// GetQuantity returns the value of Quantity.
func (s *V1PostStopOrderRequest) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *V1PostStopOrderRequest) GetPrice() OptV1Quotation {
	return s.Price
}

// GetStopPrice returns the value of StopPrice.
func (s *V1PostStopOrderRequest) GetStopPrice() OptV1Quotation {
	return s.StopPrice
}

// GetDirection returns the value of Direction.
func (s *V1PostStopOrderRequest) GetDirection() OptV1StopOrderDirection {
	return s.Direction
}

// GetAccountId returns the value of AccountId.
func (s *V1PostStopOrderRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetExpirationType returns the value of ExpirationType.
func (s *V1PostStopOrderRequest) GetExpirationType() OptV1StopOrderExpirationType {
	return s.ExpirationType
}

// GetStopOrderType returns the value of StopOrderType.
func (s *V1PostStopOrderRequest) GetStopOrderType() OptV1StopOrderType {
	return s.StopOrderType
}

// GetExpireDate returns the value of ExpireDate.
func (s *V1PostStopOrderRequest) GetExpireDate() OptDateTime {
	return s.ExpireDate
}

// GetInstrumentId returns the value of InstrumentId.
func (s *V1PostStopOrderRequest) GetInstrumentId() OptString {
	return s.InstrumentId
}

// SetFigi sets the value of Figi.
func (s *V1PostStopOrderRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetQuantity sets the value of Quantity.
func (s *V1PostStopOrderRequest) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *V1PostStopOrderRequest) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetStopPrice sets the value of StopPrice.
func (s *V1PostStopOrderRequest) SetStopPrice(val OptV1Quotation) {
	s.StopPrice = val
}

// SetDirection sets the value of Direction.
func (s *V1PostStopOrderRequest) SetDirection(val OptV1StopOrderDirection) {
	s.Direction = val
}

// SetAccountId sets the value of AccountId.
func (s *V1PostStopOrderRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetExpirationType sets the value of ExpirationType.
func (s *V1PostStopOrderRequest) SetExpirationType(val OptV1StopOrderExpirationType) {
	s.ExpirationType = val
}

// SetStopOrderType sets the value of StopOrderType.
func (s *V1PostStopOrderRequest) SetStopOrderType(val OptV1StopOrderType) {
	s.StopOrderType = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *V1PostStopOrderRequest) SetExpireDate(val OptDateTime) {
	s.ExpireDate = val
}

// SetInstrumentId sets the value of InstrumentId.
func (s *V1PostStopOrderRequest) SetInstrumentId(val OptString) {
	s.InstrumentId = val
}

// Результат выставления стоп-заявки.
// Ref: #/components/schemas/v1PostStopOrderResponse
type V1PostStopOrderResponse struct {
	StopOrderId OptString `json:"stopOrderId"`
}

// GetStopOrderId returns the value of StopOrderId.
func (s *V1PostStopOrderResponse) GetStopOrderId() OptString {
	return s.StopOrderId
}

// SetStopOrderId sets the value of StopOrderId.
func (s *V1PostStopOrderResponse) SetStopOrderId(val OptString) {
	s.StopOrderId = val
}

func (*V1PostStopOrderResponse) stopOrdersServicePostStopOrderRes() {}

// Тип цены.
// Ref: #/components/schemas/v1PriceType
type V1PriceType string

const (
	V1PriceTypePRICETYPEUNSPECIFIED V1PriceType = "PRICE_TYPE_UNSPECIFIED"
	V1PriceTypePRICETYPEPOINT       V1PriceType = "PRICE_TYPE_POINT"
	V1PriceTypePRICETYPECURRENCY    V1PriceType = "PRICE_TYPE_CURRENCY"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1PriceType) MarshalText() ([]byte, error) {
	switch s {
	case V1PriceTypePRICETYPEUNSPECIFIED:
		return []byte(s), nil
	case V1PriceTypePRICETYPEPOINT:
		return []byte(s), nil
	case V1PriceTypePRICETYPECURRENCY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1PriceType) UnmarshalText(data []byte) error {
	switch V1PriceType(data) {
	case V1PriceTypePRICETYPEUNSPECIFIED:
		*s = V1PriceTypePRICETYPEUNSPECIFIED
		return nil
	case V1PriceTypePRICETYPEPOINT:
		*s = V1PriceTypePRICETYPEPOINT
		return nil
	case V1PriceTypePRICETYPECURRENCY:
		*s = V1PriceTypePRICETYPECURRENCY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/v1Quotation
type V1Quotation struct {
	Units OptStringInt64 `json:"units"`
	Nano  OptInt32       `json:"nano"`
}

// GetUnits returns the value of Units.
func (s *V1Quotation) GetUnits() OptStringInt64 {
	return s.Units
}

// GetNano returns the value of Nano.
func (s *V1Quotation) GetNano() OptInt32 {
	return s.Nano
}

// SetUnits sets the value of Units.
func (s *V1Quotation) SetUnits(val OptStringInt64) {
	s.Units = val
}

// SetNano sets the value of Nano.
func (s *V1Quotation) SetNano(val OptInt32) {
	s.Nano = val
}

// Реальная площадка исполнения расчётов.
// Ref: #/components/schemas/v1RealExchange
type V1RealExchange string

const (
	V1RealExchangeREALEXCHANGEUNSPECIFIED V1RealExchange = "REAL_EXCHANGE_UNSPECIFIED"
	V1RealExchangeREALEXCHANGEMOEX        V1RealExchange = "REAL_EXCHANGE_MOEX"
	V1RealExchangeREALEXCHANGERTS         V1RealExchange = "REAL_EXCHANGE_RTS"
	V1RealExchangeREALEXCHANGEOTC         V1RealExchange = "REAL_EXCHANGE_OTC"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1RealExchange) MarshalText() ([]byte, error) {
	switch s {
	case V1RealExchangeREALEXCHANGEUNSPECIFIED:
		return []byte(s), nil
	case V1RealExchangeREALEXCHANGEMOEX:
		return []byte(s), nil
	case V1RealExchangeREALEXCHANGERTS:
		return []byte(s), nil
	case V1RealExchangeREALEXCHANGEOTC:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1RealExchange) UnmarshalText(data []byte) error {
	switch V1RealExchange(data) {
	case V1RealExchangeREALEXCHANGEUNSPECIFIED:
		*s = V1RealExchangeREALEXCHANGEUNSPECIFIED
		return nil
	case V1RealExchangeREALEXCHANGEMOEX:
		*s = V1RealExchangeREALEXCHANGEMOEX
		return nil
	case V1RealExchangeREALEXCHANGERTS:
		*s = V1RealExchangeREALEXCHANGERTS
		return nil
	case V1RealExchangeREALEXCHANGEOTC:
		*s = V1RealExchangeREALEXCHANGEOTC
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос изменения выставленной заявки.
// Ref: #/components/schemas/v1ReplaceOrderRequest
type V1ReplaceOrderRequest struct {
	AccountId      OptString      `json:"accountId"`
	OrderId        OptString      `json:"orderId"`
	IdempotencyKey OptString      `json:"idempotencyKey"`
	Quantity       OptStringInt64 `json:"quantity"`
	Price          OptV1Quotation `json:"price"`
	PriceType      OptV1PriceType `json:"priceType"`
}

// GetAccountId returns the value of AccountId.
func (s *V1ReplaceOrderRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetOrderId returns the value of OrderId.
func (s *V1ReplaceOrderRequest) GetOrderId() OptString {
	return s.OrderId
}

// GetIdempotencyKey returns the value of IdempotencyKey.
func (s *V1ReplaceOrderRequest) GetIdempotencyKey() OptString {
	return s.IdempotencyKey
}

// GetQuantity returns the value of Quantity.
func (s *V1ReplaceOrderRequest) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *V1ReplaceOrderRequest) GetPrice() OptV1Quotation {
	return s.Price
}

// GetPriceType returns the value of PriceType.
func (s *V1ReplaceOrderRequest) GetPriceType() OptV1PriceType {
	return s.PriceType
}

// SetAccountId sets the value of AccountId.
func (s *V1ReplaceOrderRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetOrderId sets the value of OrderId.
func (s *V1ReplaceOrderRequest) SetOrderId(val OptString) {
	s.OrderId = val
}

// SetIdempotencyKey sets the value of IdempotencyKey.
func (s *V1ReplaceOrderRequest) SetIdempotencyKey(val OptString) {
	s.IdempotencyKey = val
}

// SetQuantity sets the value of Quantity.
func (s *V1ReplaceOrderRequest) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *V1ReplaceOrderRequest) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetPriceType sets the value of PriceType.
func (s *V1ReplaceOrderRequest) SetPriceType(val OptV1PriceType) {
	s.PriceType = val
}

// Уровень риска облигации.
// Ref: #/components/schemas/v1RiskLevel
type V1RiskLevel string

const (
	V1RiskLevelRISKLEVELUNSPECIFIED V1RiskLevel = "RISK_LEVEL_UNSPECIFIED"
	V1RiskLevelRISKLEVELLOW         V1RiskLevel = "RISK_LEVEL_LOW"
	V1RiskLevelRISKLEVELMODERATE    V1RiskLevel = "RISK_LEVEL_MODERATE"
	V1RiskLevelRISKLEVELHIGH        V1RiskLevel = "RISK_LEVEL_HIGH"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1RiskLevel) MarshalText() ([]byte, error) {
	switch s {
	case V1RiskLevelRISKLEVELUNSPECIFIED:
		return []byte(s), nil
	case V1RiskLevelRISKLEVELLOW:
		return []byte(s), nil
	case V1RiskLevelRISKLEVELMODERATE:
		return []byte(s), nil
	case V1RiskLevelRISKLEVELHIGH:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1RiskLevel) UnmarshalText(data []byte) error {
	switch V1RiskLevel(data) {
	case V1RiskLevelRISKLEVELUNSPECIFIED:
		*s = V1RiskLevelRISKLEVELUNSPECIFIED
		return nil
	case V1RiskLevelRISKLEVELLOW:
		*s = V1RiskLevelRISKLEVELLOW
		return nil
	case V1RiskLevelRISKLEVELMODERATE:
		*s = V1RiskLevelRISKLEVELMODERATE
		return nil
	case V1RiskLevelRISKLEVELHIGH:
		*s = V1RiskLevelRISKLEVELHIGH
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Запрос пополнения счёта в песочнице.
// Ref: #/components/schemas/v1SandboxPayInRequest
type V1SandboxPayInRequest struct {
	AccountId OptString       `json:"accountId"`
	Amount    OptV1MoneyValue `json:"amount"`
}

// GetAccountId returns the value of AccountId.
func (s *V1SandboxPayInRequest) GetAccountId() OptString {
	return s.AccountId
}

// GetAmount returns the value of Amount.
func (s *V1SandboxPayInRequest) GetAmount() OptV1MoneyValue {
	return s.Amount
}

// SetAccountId sets the value of AccountId.
func (s *V1SandboxPayInRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetAmount sets the value of Amount.
func (s *V1SandboxPayInRequest) SetAmount(val OptV1MoneyValue) {
	s.Amount = val
}

// Результат пополнения счёта, текущий баланс.
// Ref: #/components/schemas/v1SandboxPayInResponse
type V1SandboxPayInResponse struct {
	Balance OptV1MoneyValue `json:"balance"`
}

// GetBalance returns the value of Balance.
func (s *V1SandboxPayInResponse) GetBalance() OptV1MoneyValue {
	return s.Balance
}

// SetBalance sets the value of Balance.
func (s *V1SandboxPayInResponse) SetBalance(val OptV1MoneyValue) {
	s.Balance = val
}

func (*V1SandboxPayInResponse) sandboxServiceSandboxPayInRes() {}

// Ref: #/components/schemas/v1SecurityTradingStatus
type V1SecurityTradingStatus string

const (
	V1SecurityTradingStatusSECURITYTRADINGSTATUSUNSPECIFIED                  V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_UNSPECIFIED"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSNOTAVAILABLEFORTRADING       V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGPERIOD                V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_OPENING_PERIOD"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGPERIOD                V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_CLOSING_PERIOD"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSBREAKINTRADING               V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_BREAK_IN_TRADING"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSNORMALTRADING                V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_NORMAL_TRADING"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGAUCTION               V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_CLOSING_AUCTION"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSDARKPOOLAUCTION              V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_DARK_POOL_AUCTION"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSDISCRETEAUCTION              V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_DISCRETE_AUCTION"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGAUCTIONPERIOD         V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSTRADINGATCLOSINGAUCTIONPRICE V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONASSIGNED              V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_SESSION_ASSIGNED"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONCLOSE                 V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_SESSION_CLOSE"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONOPEN                  V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_SESSION_OPEN"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNORMALTRADING          V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERBREAKINTRADING         V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING"
	V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNOTAVAILABLEFORTRADING V1SecurityTradingStatus = "SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1SecurityTradingStatus) MarshalText() ([]byte, error) {
	switch s {
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSUNSPECIFIED:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSNOTAVAILABLEFORTRADING:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGPERIOD:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGPERIOD:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSBREAKINTRADING:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSNORMALTRADING:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGAUCTION:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDARKPOOLAUCTION:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDISCRETEAUCTION:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGAUCTIONPERIOD:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSTRADINGATCLOSINGAUCTIONPRICE:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONASSIGNED:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONCLOSE:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONOPEN:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNORMALTRADING:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERBREAKINTRADING:
		return []byte(s), nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNOTAVAILABLEFORTRADING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1SecurityTradingStatus) UnmarshalText(data []byte) error {
	switch V1SecurityTradingStatus(data) {
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSUNSPECIFIED:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSUNSPECIFIED
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSNOTAVAILABLEFORTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSNOTAVAILABLEFORTRADING
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGPERIOD:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGPERIOD
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGPERIOD:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGPERIOD
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSBREAKINTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSBREAKINTRADING
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSNORMALTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSNORMALTRADING
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGAUCTION:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSCLOSINGAUCTION
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDARKPOOLAUCTION:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSDARKPOOLAUCTION
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDISCRETEAUCTION:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSDISCRETEAUCTION
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGAUCTIONPERIOD:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSOPENINGAUCTIONPERIOD
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSTRADINGATCLOSINGAUCTIONPRICE:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSTRADINGATCLOSINGAUCTIONPRICE
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONASSIGNED:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONASSIGNED
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONCLOSE:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONCLOSE
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONOPEN:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSSESSIONOPEN
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNORMALTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNORMALTRADING
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERBREAKINTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERBREAKINTRADING
		return nil
	case V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNOTAVAILABLEFORTRADING:
		*s = V1SecurityTradingStatusSECURITYTRADINGSTATUSDEALERNOTAVAILABLEFORTRADING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Объект передачи информации об акции.
// Ref: #/components/schemas/v1Share
type V1Share struct {
	Figi                  OptString                  `json:"figi"`
	Ticker                OptString                  `json:"ticker"`
	ClassCode             OptString                  `json:"classCode"`
	Isin                  OptString                  `json:"isin"`
	Lot                   OptInt32                   `json:"lot"`
	Currency              OptString                  `json:"currency"`
	Klong                 OptV1Quotation             `json:"klong"`
	Kshort                OptV1Quotation             `json:"kshort"`
	Dlong                 OptV1Quotation             `json:"dlong"`
	Dshort                OptV1Quotation             `json:"dshort"`
	DlongMin              OptV1Quotation             `json:"dlongMin"`
	DshortMin             OptV1Quotation             `json:"dshortMin"`
	ShortEnabledFlag      OptBool                    `json:"shortEnabledFlag"`
	Name                  OptString                  `json:"name"`
	Exchange              OptString                  `json:"exchange"`
	IpoDate               OptDateTime                `json:"ipoDate"`
	IssueSize             OptStringInt64             `json:"issueSize"`
	CountryOfRisk         OptString                  `json:"countryOfRisk"`
	CountryOfRiskName     OptString                  `json:"countryOfRiskName"`
	Sector                OptString                  `json:"sector"`
	IssueSizePlan         OptStringInt64             `json:"issueSizePlan"`
	Nominal               OptV1MoneyValue            `json:"nominal"`
	TradingStatus         OptV1SecurityTradingStatus `json:"tradingStatus"`
	OtcFlag               OptBool                    `json:"otcFlag"`
	BuyAvailableFlag      OptBool                    `json:"buyAvailableFlag"`
	SellAvailableFlag     OptBool                    `json:"sellAvailableFlag"`
	DivYieldFlag          OptBool                    `json:"divYieldFlag"`
	ShareType             OptV1ShareType             `json:"shareType"`
	MinPriceIncrement     OptV1Quotation             `json:"minPriceIncrement"`
	ApiTradeAvailableFlag OptBool                    `json:"apiTradeAvailableFlag"`
	UID                   OptString                  `json:"uid"`
	RealExchange          OptV1RealExchange          `json:"realExchange"`
	PositionUid           OptString                  `json:"positionUid"`
	ForIisFlag            OptBool                    `json:"forIisFlag"`
	ForQualInvestorFlag   OptBool                    `json:"forQualInvestorFlag"`
	WeekendFlag           OptBool                    `json:"weekendFlag"`
	BlockedTcaFlag        OptBool                    `json:"blockedTcaFlag"`
	First1minCandleDate   OptDateTime                `json:"first1minCandleDate"`
	First1dayCandleDate   OptDateTime                `json:"first1dayCandleDate"`
}

// GetFigi returns the value of Figi.
func (s *V1Share) GetFigi() OptString {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s *V1Share) GetTicker() OptString {
	return s.Ticker
}

// GetClassCode returns the value of ClassCode.
func (s *V1Share) GetClassCode() OptString {
	return s.ClassCode
}

// GetIsin returns the value of Isin.
func (s *V1Share) GetIsin() OptString {
	return s.Isin
}

// GetLot returns the value of Lot.
func (s *V1Share) GetLot() OptInt32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s *V1Share) GetCurrency() OptString {
	return s.Currency
}

// GetKlong returns the value of Klong.
func (s *V1Share) GetKlong() OptV1Quotation {
	return s.Klong
}

// GetKshort returns the value of Kshort.
func (s *V1Share) GetKshort() OptV1Quotation {
	return s.Kshort
}

// GetDlong returns the value of Dlong.
func (s *V1Share) GetDlong() OptV1Quotation {
	return s.Dlong
}

// GetDshort returns the value of Dshort.
func (s *V1Share) GetDshort() OptV1Quotation {
	return s.Dshort
}

// GetDlongMin returns the value of DlongMin.
func (s *V1Share) GetDlongMin() OptV1Quotation {
	return s.DlongMin
}

// GetDshortMin returns the value of DshortMin.
func (s *V1Share) GetDshortMin() OptV1Quotation {
	return s.DshortMin
}

// GetShortEnabledFlag returns the value of ShortEnabledFlag.
func (s *V1Share) GetShortEnabledFlag() OptBool {
	return s.ShortEnabledFlag
}

// GetName returns the value of Name.
func (s *V1Share) GetName() OptString {
	return s.Name
}

// GetExchange returns the value of Exchange.
func (s *V1Share) GetExchange() OptString {
	return s.Exchange
}

// GetIpoDate returns the value of IpoDate.
func (s *V1Share) GetIpoDate() OptDateTime {
	return s.IpoDate
}

// GetIssueSize returns the value of IssueSize.
func (s *V1Share) GetIssueSize() OptStringInt64 {
	return s.IssueSize
}

// GetCountryOfRisk returns the value of CountryOfRisk.
func (s *V1Share) GetCountryOfRisk() OptString {
	return s.CountryOfRisk
}

// GetCountryOfRiskName returns the value of CountryOfRiskName.
func (s *V1Share) GetCountryOfRiskName() OptString {
	return s.CountryOfRiskName
}

// GetSector returns the value of Sector.
func (s *V1Share) GetSector() OptString {
	return s.Sector
}

// GetIssueSizePlan returns the value of IssueSizePlan.
func (s *V1Share) GetIssueSizePlan() OptStringInt64 {
	return s.IssueSizePlan
}

// GetNominal returns the value of Nominal.
func (s *V1Share) GetNominal() OptV1MoneyValue {
	return s.Nominal
}

// GetTradingStatus returns the value of TradingStatus.
func (s *V1Share) GetTradingStatus() OptV1SecurityTradingStatus {
	return s.TradingStatus
}

// GetOtcFlag returns the value of OtcFlag.
func (s *V1Share) GetOtcFlag() OptBool {
	return s.OtcFlag
}

// GetBuyAvailableFlag returns the value of BuyAvailableFlag.
func (s *V1Share) GetBuyAvailableFlag() OptBool {
	return s.BuyAvailableFlag
}

// GetSellAvailableFlag returns the value of SellAvailableFlag.
func (s *V1Share) GetSellAvailableFlag() OptBool {
	return s.SellAvailableFlag
}

// GetDivYieldFlag returns the value of DivYieldFlag.
func (s *V1Share) GetDivYieldFlag() OptBool {
	return s.DivYieldFlag
}

// GetShareType returns the value of ShareType.
func (s *V1Share) GetShareType() OptV1ShareType {
	return s.ShareType
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s *V1Share) GetMinPriceIncrement() OptV1Quotation {
	return s.MinPriceIncrement
}

// GetApiTradeAvailableFlag returns the value of ApiTradeAvailableFlag.
func (s *V1Share) GetApiTradeAvailableFlag() OptBool {
	return s.ApiTradeAvailableFlag
}

// GetUID returns the value of UID.
func (s *V1Share) GetUID() OptString {
	return s.UID
}

// GetRealExchange returns the value of RealExchange.
func (s *V1Share) GetRealExchange() OptV1RealExchange {
	return s.RealExchange
}

// GetPositionUid returns the value of PositionUid.
func (s *V1Share) GetPositionUid() OptString {
	return s.PositionUid
}

// GetForIisFlag returns the value of ForIisFlag.
func (s *V1Share) GetForIisFlag() OptBool {
	return s.ForIisFlag
}

// GetForQualInvestorFlag returns the value of ForQualInvestorFlag.
func (s *V1Share) GetForQualInvestorFlag() OptBool {
	return s.ForQualInvestorFlag
}

// GetWeekendFlag returns the value of WeekendFlag.
func (s *V1Share) GetWeekendFlag() OptBool {
	return s.WeekendFlag
}

// GetBlockedTcaFlag returns the value of BlockedTcaFlag.
func (s *V1Share) GetBlockedTcaFlag() OptBool {
	return s.BlockedTcaFlag
}

// GetFirst1minCandleDate returns the value of First1minCandleDate.
func (s *V1Share) GetFirst1minCandleDate() OptDateTime {
	return s.First1minCandleDate
}

// GetFirst1dayCandleDate returns the value of First1dayCandleDate.
func (s *V1Share) GetFirst1dayCandleDate() OptDateTime {
	return s.First1dayCandleDate
}

// SetFigi sets the value of Figi.
func (s *V1Share) SetFigi(val OptString) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *V1Share) SetTicker(val OptString) {
	s.Ticker = val
}

// SetClassCode sets the value of ClassCode.
func (s *V1Share) SetClassCode(val OptString) {
	s.ClassCode = val
}

// SetIsin sets the value of Isin.
func (s *V1Share) SetIsin(val OptString) {
	s.Isin = val
}

// SetLot sets the value of Lot.
func (s *V1Share) SetLot(val OptInt32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *V1Share) SetCurrency(val OptString) {
	s.Currency = val
}

// SetKlong sets the value of Klong.
func (s *V1Share) SetKlong(val OptV1Quotation) {
	s.Klong = val
}

// SetKshort sets the value of Kshort.
func (s *V1Share) SetKshort(val OptV1Quotation) {
	s.Kshort = val
}

// SetDlong sets the value of Dlong.
func (s *V1Share) SetDlong(val OptV1Quotation) {
	s.Dlong = val
}

// SetDshort sets the value of Dshort.
func (s *V1Share) SetDshort(val OptV1Quotation) {
	s.Dshort = val
}

// SetDlongMin sets the value of DlongMin.
func (s *V1Share) SetDlongMin(val OptV1Quotation) {
	s.DlongMin = val
}

// SetDshortMin sets the value of DshortMin.
func (s *V1Share) SetDshortMin(val OptV1Quotation) {
	s.DshortMin = val
}

// SetShortEnabledFlag sets the value of ShortEnabledFlag.
func (s *V1Share) SetShortEnabledFlag(val OptBool) {
	s.ShortEnabledFlag = val
}

// SetName sets the value of Name.
func (s *V1Share) SetName(val OptString) {
	s.Name = val
}

// SetExchange sets the value of Exchange.
func (s *V1Share) SetExchange(val OptString) {
	s.Exchange = val
}

// SetIpoDate sets the value of IpoDate.
func (s *V1Share) SetIpoDate(val OptDateTime) {
	s.IpoDate = val
}

// SetIssueSize sets the value of IssueSize.
func (s *V1Share) SetIssueSize(val OptStringInt64) {
	s.IssueSize = val
}

// SetCountryOfRisk sets the value of CountryOfRisk.
func (s *V1Share) SetCountryOfRisk(val OptString) {
	s.CountryOfRisk = val
}

// SetCountryOfRiskName sets the value of CountryOfRiskName.
func (s *V1Share) SetCountryOfRiskName(val OptString) {
	s.CountryOfRiskName = val
}

// SetSector sets the value of Sector.
func (s *V1Share) SetSector(val OptString) {
	s.Sector = val
}

// SetIssueSizePlan sets the value of IssueSizePlan.
func (s *V1Share) SetIssueSizePlan(val OptStringInt64) {
	s.IssueSizePlan = val
}

// SetNominal sets the value of Nominal.
func (s *V1Share) SetNominal(val OptV1MoneyValue) {
	s.Nominal = val
}

// SetTradingStatus sets the value of TradingStatus.
func (s *V1Share) SetTradingStatus(val OptV1SecurityTradingStatus) {
	s.TradingStatus = val
}

// SetOtcFlag sets the value of OtcFlag.
func (s *V1Share) SetOtcFlag(val OptBool) {
	s.OtcFlag = val
}

// SetBuyAvailableFlag sets the value of BuyAvailableFlag.
func (s *V1Share) SetBuyAvailableFlag(val OptBool) {
	s.BuyAvailableFlag = val
}

// SetSellAvailableFlag sets the value of SellAvailableFlag.
func (s *V1Share) SetSellAvailableFlag(val OptBool) {
	s.SellAvailableFlag = val
}

// SetDivYieldFlag sets the value of DivYieldFlag.
func (s *V1Share) SetDivYieldFlag(val OptBool) {
	s.DivYieldFlag = val
}

// SetShareType sets the value of ShareType.
func (s *V1Share) SetShareType(val OptV1ShareType) {
	s.ShareType = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *V1Share) SetMinPriceIncrement(val OptV1Quotation) {
	s.MinPriceIncrement = val
}

// SetApiTradeAvailableFlag sets the value of ApiTradeAvailableFlag.
func (s *V1Share) SetApiTradeAvailableFlag(val OptBool) {
	s.ApiTradeAvailableFlag = val
}

// SetUID sets the value of UID.
func (s *V1Share) SetUID(val OptString) {
	s.UID = val
}

// SetRealExchange sets the value of RealExchange.
func (s *V1Share) SetRealExchange(val OptV1RealExchange) {
	s.RealExchange = val
}

// SetPositionUid sets the value of PositionUid.
func (s *V1Share) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetForIisFlag sets the value of ForIisFlag.
func (s *V1Share) SetForIisFlag(val OptBool) {
	s.ForIisFlag = val
}

// SetForQualInvestorFlag sets the value of ForQualInvestorFlag.
func (s *V1Share) SetForQualInvestorFlag(val OptBool) {
	s.ForQualInvestorFlag = val
}

// SetWeekendFlag sets the value of WeekendFlag.
func (s *V1Share) SetWeekendFlag(val OptBool) {
	s.WeekendFlag = val
}

// SetBlockedTcaFlag sets the value of BlockedTcaFlag.
func (s *V1Share) SetBlockedTcaFlag(val OptBool) {
	s.BlockedTcaFlag = val
}

// SetFirst1minCandleDate sets the value of First1minCandleDate.
func (s *V1Share) SetFirst1minCandleDate(val OptDateTime) {
	s.First1minCandleDate = val
}

// SetFirst1dayCandleDate sets the value of First1dayCandleDate.
func (s *V1Share) SetFirst1dayCandleDate(val OptDateTime) {
	s.First1dayCandleDate = val
}

// Данные по акции.
// Ref: #/components/schemas/v1ShareResponse
type V1ShareResponse struct {
	Instrument OptV1Share `json:"instrument"`
}

// GetInstrument returns the value of Instrument.
func (s *V1ShareResponse) GetInstrument() OptV1Share {
	return s.Instrument
}

// SetInstrument sets the value of Instrument.
func (s *V1ShareResponse) SetInstrument(val OptV1Share) {
	s.Instrument = val
}

func (*V1ShareResponse) instrumentsServiceShareByRes() {}

// Тип акций.
// Ref: #/components/schemas/v1ShareType
type V1ShareType string

const (
	V1ShareTypeSHARETYPEUNSPECIFIED   V1ShareType = "SHARE_TYPE_UNSPECIFIED"
	V1ShareTypeSHARETYPECOMMON        V1ShareType = "SHARE_TYPE_COMMON"
	V1ShareTypeSHARETYPEPREFERRED     V1ShareType = "SHARE_TYPE_PREFERRED"
	V1ShareTypeSHARETYPEADR           V1ShareType = "SHARE_TYPE_ADR"
	V1ShareTypeSHARETYPEGDR           V1ShareType = "SHARE_TYPE_GDR"
	V1ShareTypeSHARETYPEMLP           V1ShareType = "SHARE_TYPE_MLP"
	V1ShareTypeSHARETYPENYREGSHRS     V1ShareType = "SHARE_TYPE_NY_REG_SHRS"
	V1ShareTypeSHARETYPECLOSEDENDFUND V1ShareType = "SHARE_TYPE_CLOSED_END_FUND"
	V1ShareTypeSHARETYPEREIT          V1ShareType = "SHARE_TYPE_REIT"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1ShareType) MarshalText() ([]byte, error) {
	switch s {
	case V1ShareTypeSHARETYPEUNSPECIFIED:
		return []byte(s), nil
	case V1ShareTypeSHARETYPECOMMON:
		return []byte(s), nil
	case V1ShareTypeSHARETYPEPREFERRED:
		return []byte(s), nil
	case V1ShareTypeSHARETYPEADR:
		return []byte(s), nil
	case V1ShareTypeSHARETYPEGDR:
		return []byte(s), nil
	case V1ShareTypeSHARETYPEMLP:
		return []byte(s), nil
	case V1ShareTypeSHARETYPENYREGSHRS:
		return []byte(s), nil
	case V1ShareTypeSHARETYPECLOSEDENDFUND:
		return []byte(s), nil
	case V1ShareTypeSHARETYPEREIT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1ShareType) UnmarshalText(data []byte) error {
	switch V1ShareType(data) {
	case V1ShareTypeSHARETYPEUNSPECIFIED:
		*s = V1ShareTypeSHARETYPEUNSPECIFIED
		return nil
	case V1ShareTypeSHARETYPECOMMON:
		*s = V1ShareTypeSHARETYPECOMMON
		return nil
	case V1ShareTypeSHARETYPEPREFERRED:
		*s = V1ShareTypeSHARETYPEPREFERRED
		return nil
	case V1ShareTypeSHARETYPEADR:
		*s = V1ShareTypeSHARETYPEADR
		return nil
	case V1ShareTypeSHARETYPEGDR:
		*s = V1ShareTypeSHARETYPEGDR
		return nil
	case V1ShareTypeSHARETYPEMLP:
		*s = V1ShareTypeSHARETYPEMLP
		return nil
	case V1ShareTypeSHARETYPENYREGSHRS:
		*s = V1ShareTypeSHARETYPENYREGSHRS
		return nil
	case V1ShareTypeSHARETYPECLOSEDENDFUND:
		*s = V1ShareTypeSHARETYPECLOSEDENDFUND
		return nil
	case V1ShareTypeSHARETYPEREIT:
		*s = V1ShareTypeSHARETYPEREIT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные по акциям.
// Ref: #/components/schemas/v1SharesResponse
type V1SharesResponse struct {
	Instruments []V1Share `json:"instruments"`
}

// GetInstruments returns the value of Instruments.
func (s *V1SharesResponse) GetInstruments() []V1Share {
	return s.Instruments
}

// SetInstruments sets the value of Instruments.
func (s *V1SharesResponse) SetInstruments(val []V1Share) {
	s.Instruments = val
}

func (*V1SharesResponse) instrumentsServiceSharesRes() {}

// Информация о стоп-заявке.
// Ref: #/components/schemas/v1StopOrder
type V1StopOrder struct {
	StopOrderId        OptString               `json:"stopOrderId"`
	LotsRequested      OptStringInt64          `json:"lotsRequested"`
	Figi               OptString               `json:"figi"`
	Direction          OptV1StopOrderDirection `json:"direction"`
	Currency           OptString               `json:"currency"`
	OrderType          OptV1StopOrderType      `json:"orderType"`
	CreateDate         OptDateTime             `json:"createDate"`
	ActivationDateTime OptDateTime             `json:"activationDateTime"`
	ExpirationTime     OptDateTime             `json:"expirationTime"`
	Price              OptV1MoneyValue         `json:"price"`
	StopPrice          OptV1MoneyValue         `json:"stopPrice"`
	InstrumentUid      OptString               `json:"instrumentUid"`
}

// GetStopOrderId returns the value of StopOrderId.
func (s *V1StopOrder) GetStopOrderId() OptString {
	return s.StopOrderId
}

// GetLotsRequested returns the value of LotsRequested.
func (s *V1StopOrder) GetLotsRequested() OptStringInt64 {
	return s.LotsRequested
}

// GetFigi returns the value of Figi.
func (s *V1StopOrder) GetFigi() OptString {
	return s.Figi
}

// GetDirection returns the value of Direction.
func (s *V1StopOrder) GetDirection() OptV1StopOrderDirection {
	return s.Direction
}

// GetCurrency returns the value of Currency.
func (s *V1StopOrder) GetCurrency() OptString {
	return s.Currency
}

// GetOrderType returns the value of OrderType.
func (s *V1StopOrder) GetOrderType() OptV1StopOrderType {
	return s.OrderType
}

// GetCreateDate returns the value of CreateDate.
func (s *V1StopOrder) GetCreateDate() OptDateTime {
	return s.CreateDate
}

// GetActivationDateTime returns the value of ActivationDateTime.
func (s *V1StopOrder) GetActivationDateTime() OptDateTime {
	return s.ActivationDateTime
}

// GetExpirationTime returns the value of ExpirationTime.
func (s *V1StopOrder) GetExpirationTime() OptDateTime {
	return s.ExpirationTime
}

// GetPrice returns the value of Price.
func (s *V1StopOrder) GetPrice() OptV1MoneyValue {
	return s.Price
}

// GetStopPrice returns the value of StopPrice.
func (s *V1StopOrder) GetStopPrice() OptV1MoneyValue {
	return s.StopPrice
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1StopOrder) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetStopOrderId sets the value of StopOrderId.
func (s *V1StopOrder) SetStopOrderId(val OptString) {
	s.StopOrderId = val
}

// SetLotsRequested sets the value of LotsRequested.
func (s *V1StopOrder) SetLotsRequested(val OptStringInt64) {
	s.LotsRequested = val
}

// SetFigi sets the value of Figi.
func (s *V1StopOrder) SetFigi(val OptString) {
	s.Figi = val
}

// SetDirection sets the value of Direction.
func (s *V1StopOrder) SetDirection(val OptV1StopOrderDirection) {
	s.Direction = val
}

// SetCurrency sets the value of Currency.
func (s *V1StopOrder) SetCurrency(val OptString) {
	s.Currency = val
}

// SetOrderType sets the value of OrderType.
func (s *V1StopOrder) SetOrderType(val OptV1StopOrderType) {
	s.OrderType = val
}

// SetCreateDate sets the value of CreateDate.
func (s *V1StopOrder) SetCreateDate(val OptDateTime) {
	s.CreateDate = val
}

// SetActivationDateTime sets the value of ActivationDateTime.
func (s *V1StopOrder) SetActivationDateTime(val OptDateTime) {
	s.ActivationDateTime = val
}

// SetExpirationTime sets the value of ExpirationTime.
func (s *V1StopOrder) SetExpirationTime(val OptDateTime) {
	s.ExpirationTime = val
}

// SetPrice sets the value of Price.
func (s *V1StopOrder) SetPrice(val OptV1MoneyValue) {
	s.Price = val
}

// SetStopPrice sets the value of StopPrice.
func (s *V1StopOrder) SetStopPrice(val OptV1MoneyValue) {
	s.StopPrice = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1StopOrder) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Направление сделки стоп-заявки.
// Ref: #/components/schemas/v1StopOrderDirection
type V1StopOrderDirection string

const (
	V1StopOrderDirectionSTOPORDERDIRECTIONUNSPECIFIED V1StopOrderDirection = "STOP_ORDER_DIRECTION_UNSPECIFIED"
	V1StopOrderDirectionSTOPORDERDIRECTIONBUY         V1StopOrderDirection = "STOP_ORDER_DIRECTION_BUY"
	V1StopOrderDirectionSTOPORDERDIRECTIONSELL        V1StopOrderDirection = "STOP_ORDER_DIRECTION_SELL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1StopOrderDirection) MarshalText() ([]byte, error) {
	switch s {
	case V1StopOrderDirectionSTOPORDERDIRECTIONUNSPECIFIED:
		return []byte(s), nil
	case V1StopOrderDirectionSTOPORDERDIRECTIONBUY:
		return []byte(s), nil
	case V1StopOrderDirectionSTOPORDERDIRECTIONSELL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1StopOrderDirection) UnmarshalText(data []byte) error {
	switch V1StopOrderDirection(data) {
	case V1StopOrderDirectionSTOPORDERDIRECTIONUNSPECIFIED:
		*s = V1StopOrderDirectionSTOPORDERDIRECTIONUNSPECIFIED
		return nil
	case V1StopOrderDirectionSTOPORDERDIRECTIONBUY:
		*s = V1StopOrderDirectionSTOPORDERDIRECTIONBUY
		return nil
	case V1StopOrderDirectionSTOPORDERDIRECTIONSELL:
		*s = V1StopOrderDirectionSTOPORDERDIRECTIONSELL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип экспирации стоп-заявке.
// Ref: #/components/schemas/v1StopOrderExpirationType
type V1StopOrderExpirationType string

const (
	V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEUNSPECIFIED    V1StopOrderExpirationType = "STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED"
	V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLCANCEL V1StopOrderExpirationType = "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL"
	V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLDATE   V1StopOrderExpirationType = "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1StopOrderExpirationType) MarshalText() ([]byte, error) {
	switch s {
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLCANCEL:
		return []byte(s), nil
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLDATE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1StopOrderExpirationType) UnmarshalText(data []byte) error {
	switch V1StopOrderExpirationType(data) {
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEUNSPECIFIED:
		*s = V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEUNSPECIFIED
		return nil
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLCANCEL:
		*s = V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLCANCEL
		return nil
	case V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLDATE:
		*s = V1StopOrderExpirationTypeSTOPORDEREXPIRATIONTYPEGOODTILLDATE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип стоп-заявки.
// Ref: #/components/schemas/v1StopOrderType
type V1StopOrderType string

const (
	V1StopOrderTypeSTOPORDERTYPEUNSPECIFIED V1StopOrderType = "STOP_ORDER_TYPE_UNSPECIFIED"
	V1StopOrderTypeSTOPORDERTYPETAKEPROFIT  V1StopOrderType = "STOP_ORDER_TYPE_TAKE_PROFIT"
	V1StopOrderTypeSTOPORDERTYPESTOPLOSS    V1StopOrderType = "STOP_ORDER_TYPE_STOP_LOSS"
	V1StopOrderTypeSTOPORDERTYPESTOPLIMIT   V1StopOrderType = "STOP_ORDER_TYPE_STOP_LIMIT"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1StopOrderType) MarshalText() ([]byte, error) {
	switch s {
	case V1StopOrderTypeSTOPORDERTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1StopOrderTypeSTOPORDERTYPETAKEPROFIT:
		return []byte(s), nil
	case V1StopOrderTypeSTOPORDERTYPESTOPLOSS:
		return []byte(s), nil
	case V1StopOrderTypeSTOPORDERTYPESTOPLIMIT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1StopOrderType) UnmarshalText(data []byte) error {
	switch V1StopOrderType(data) {
	case V1StopOrderTypeSTOPORDERTYPEUNSPECIFIED:
		*s = V1StopOrderTypeSTOPORDERTYPEUNSPECIFIED
		return nil
	case V1StopOrderTypeSTOPORDERTYPETAKEPROFIT:
		*s = V1StopOrderTypeSTOPORDERTYPETAKEPROFIT
		return nil
	case V1StopOrderTypeSTOPORDERTYPESTOPLOSS:
		*s = V1StopOrderTypeSTOPORDERTYPESTOPLOSS
		return nil
	case V1StopOrderTypeSTOPORDERTYPESTOPLIMIT:
		*s = V1StopOrderTypeSTOPORDERTYPESTOPLIMIT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Лимит stream-соединений.
// Ref: #/components/schemas/v1StreamLimit
type V1StreamLimit struct {
	Limit   OptInt32 `json:"limit"`
	Streams []string `json:"streams"`
}

// GetLimit returns the value of Limit.
func (s *V1StreamLimit) GetLimit() OptInt32 {
	return s.Limit
}

// GetStreams returns the value of Streams.
func (s *V1StreamLimit) GetStreams() []string {
	return s.Streams
}

// SetLimit sets the value of Limit.
func (s *V1StreamLimit) SetLimit(val OptInt32) {
	s.Limit = val
}

// SetStreams sets the value of Streams.
func (s *V1StreamLimit) SetStreams(val []string) {
	s.Streams = val
}

// Тип структурной ноты.
// Ref: #/components/schemas/v1StructuredProductType
type V1StructuredProductType string

const (
	V1StructuredProductTypeSPTYPEUNSPECIFIED    V1StructuredProductType = "SP_TYPE_UNSPECIFIED"
	V1StructuredProductTypeSPTYPEDELIVERABLE    V1StructuredProductType = "SP_TYPE_DELIVERABLE"
	V1StructuredProductTypeSPTYPENONDELIVERABLE V1StructuredProductType = "SP_TYPE_NON_DELIVERABLE"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1StructuredProductType) MarshalText() ([]byte, error) {
	switch s {
	case V1StructuredProductTypeSPTYPEUNSPECIFIED:
		return []byte(s), nil
	case V1StructuredProductTypeSPTYPEDELIVERABLE:
		return []byte(s), nil
	case V1StructuredProductTypeSPTYPENONDELIVERABLE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1StructuredProductType) UnmarshalText(data []byte) error {
	switch V1StructuredProductType(data) {
	case V1StructuredProductTypeSPTYPEUNSPECIFIED:
		*s = V1StructuredProductTypeSPTYPEUNSPECIFIED
		return nil
	case V1StructuredProductTypeSPTYPEDELIVERABLE:
		*s = V1StructuredProductTypeSPTYPEDELIVERABLE
		return nil
	case V1StructuredProductTypeSPTYPENONDELIVERABLE:
		*s = V1StructuredProductTypeSPTYPENONDELIVERABLE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Информация о сделке.
// Ref: #/components/schemas/v1Trade
type V1Trade struct {
	Figi          OptString           `json:"figi"`
	Direction     OptV1TradeDirection `json:"direction"`
	Price         OptV1Quotation      `json:"price"`
	Quantity      OptStringInt64      `json:"quantity"`
	Time          OptDateTime         `json:"time"`
	InstrumentUid OptString           `json:"instrumentUid"`
}

// GetFigi returns the value of Figi.
func (s *V1Trade) GetFigi() OptString {
	return s.Figi
}

// GetDirection returns the value of Direction.
func (s *V1Trade) GetDirection() OptV1TradeDirection {
	return s.Direction
}

// GetPrice returns the value of Price.
func (s *V1Trade) GetPrice() OptV1Quotation {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s *V1Trade) GetQuantity() OptStringInt64 {
	return s.Quantity
}

// GetTime returns the value of Time.
func (s *V1Trade) GetTime() OptDateTime {
	return s.Time
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1Trade) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// SetFigi sets the value of Figi.
func (s *V1Trade) SetFigi(val OptString) {
	s.Figi = val
}

// SetDirection sets the value of Direction.
func (s *V1Trade) SetDirection(val OptV1TradeDirection) {
	s.Direction = val
}

// SetPrice sets the value of Price.
func (s *V1Trade) SetPrice(val OptV1Quotation) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *V1Trade) SetQuantity(val OptStringInt64) {
	s.Quantity = val
}

// SetTime sets the value of Time.
func (s *V1Trade) SetTime(val OptDateTime) {
	s.Time = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1Trade) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// Направление сделки.
// Ref: #/components/schemas/v1TradeDirection
type V1TradeDirection string

const (
	V1TradeDirectionTRADEDIRECTIONUNSPECIFIED V1TradeDirection = "TRADE_DIRECTION_UNSPECIFIED"
	V1TradeDirectionTRADEDIRECTIONBUY         V1TradeDirection = "TRADE_DIRECTION_BUY"
	V1TradeDirectionTRADEDIRECTIONSELL        V1TradeDirection = "TRADE_DIRECTION_SELL"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1TradeDirection) MarshalText() ([]byte, error) {
	switch s {
	case V1TradeDirectionTRADEDIRECTIONUNSPECIFIED:
		return []byte(s), nil
	case V1TradeDirectionTRADEDIRECTIONBUY:
		return []byte(s), nil
	case V1TradeDirectionTRADEDIRECTIONSELL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1TradeDirection) UnmarshalText(data []byte) error {
	switch V1TradeDirection(data) {
	case V1TradeDirectionTRADEDIRECTIONUNSPECIFIED:
		*s = V1TradeDirectionTRADEDIRECTIONUNSPECIFIED
		return nil
	case V1TradeDirectionTRADEDIRECTIONBUY:
		*s = V1TradeDirectionTRADEDIRECTIONBUY
		return nil
	case V1TradeDirectionTRADEDIRECTIONSELL:
		*s = V1TradeDirectionTRADEDIRECTIONSELL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Информация о времени торгов.
// Ref: #/components/schemas/v1TradingDay
type V1TradingDay struct {
	Date                           OptDateTime `json:"date"`
	IsTradingDay                   OptBool     `json:"isTradingDay"`
	StartTime                      OptDateTime `json:"startTime"`
	EndTime                        OptDateTime `json:"endTime"`
	OpeningAuctionStartTime        OptDateTime `json:"openingAuctionStartTime"`
	ClosingAuctionEndTime          OptDateTime `json:"closingAuctionEndTime"`
	EveningOpeningAuctionStartTime OptDateTime `json:"eveningOpeningAuctionStartTime"`
	EveningStartTime               OptDateTime `json:"eveningStartTime"`
	EveningEndTime                 OptDateTime `json:"eveningEndTime"`
	ClearingStartTime              OptDateTime `json:"clearingStartTime"`
	ClearingEndTime                OptDateTime `json:"clearingEndTime"`
	PremarketStartTime             OptDateTime `json:"premarketStartTime"`
	PremarketEndTime               OptDateTime `json:"premarketEndTime"`
	ClosingAuctionStartTime        OptDateTime `json:"closingAuctionStartTime"`
	OpeningAuctionEndTime          OptDateTime `json:"openingAuctionEndTime"`
}

// GetDate returns the value of Date.
func (s *V1TradingDay) GetDate() OptDateTime {
	return s.Date
}

// GetIsTradingDay returns the value of IsTradingDay.
func (s *V1TradingDay) GetIsTradingDay() OptBool {
	return s.IsTradingDay
}

// GetStartTime returns the value of StartTime.
func (s *V1TradingDay) GetStartTime() OptDateTime {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *V1TradingDay) GetEndTime() OptDateTime {
	return s.EndTime
}

// GetOpeningAuctionStartTime returns the value of OpeningAuctionStartTime.
func (s *V1TradingDay) GetOpeningAuctionStartTime() OptDateTime {
	return s.OpeningAuctionStartTime
}

// GetClosingAuctionEndTime returns the value of ClosingAuctionEndTime.
func (s *V1TradingDay) GetClosingAuctionEndTime() OptDateTime {
	return s.ClosingAuctionEndTime
}

// GetEveningOpeningAuctionStartTime returns the value of EveningOpeningAuctionStartTime.
func (s *V1TradingDay) GetEveningOpeningAuctionStartTime() OptDateTime {
	return s.EveningOpeningAuctionStartTime
}

// GetEveningStartTime returns the value of EveningStartTime.
func (s *V1TradingDay) GetEveningStartTime() OptDateTime {
	return s.EveningStartTime
}

// GetEveningEndTime returns the value of EveningEndTime.
func (s *V1TradingDay) GetEveningEndTime() OptDateTime {
	return s.EveningEndTime
}

// GetClearingStartTime returns the value of ClearingStartTime.
func (s *V1TradingDay) GetClearingStartTime() OptDateTime {
	return s.ClearingStartTime
}

// GetClearingEndTime returns the value of ClearingEndTime.
func (s *V1TradingDay) GetClearingEndTime() OptDateTime {
	return s.ClearingEndTime
}

// GetPremarketStartTime returns the value of PremarketStartTime.
func (s *V1TradingDay) GetPremarketStartTime() OptDateTime {
	return s.PremarketStartTime
}

// GetPremarketEndTime returns the value of PremarketEndTime.
func (s *V1TradingDay) GetPremarketEndTime() OptDateTime {
	return s.PremarketEndTime
}

// GetClosingAuctionStartTime returns the value of ClosingAuctionStartTime.
func (s *V1TradingDay) GetClosingAuctionStartTime() OptDateTime {
	return s.ClosingAuctionStartTime
}

// GetOpeningAuctionEndTime returns the value of OpeningAuctionEndTime.
func (s *V1TradingDay) GetOpeningAuctionEndTime() OptDateTime {
	return s.OpeningAuctionEndTime
}

// SetDate sets the value of Date.
func (s *V1TradingDay) SetDate(val OptDateTime) {
	s.Date = val
}

// SetIsTradingDay sets the value of IsTradingDay.
func (s *V1TradingDay) SetIsTradingDay(val OptBool) {
	s.IsTradingDay = val
}

// SetStartTime sets the value of StartTime.
func (s *V1TradingDay) SetStartTime(val OptDateTime) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *V1TradingDay) SetEndTime(val OptDateTime) {
	s.EndTime = val
}

// SetOpeningAuctionStartTime sets the value of OpeningAuctionStartTime.
func (s *V1TradingDay) SetOpeningAuctionStartTime(val OptDateTime) {
	s.OpeningAuctionStartTime = val
}

// SetClosingAuctionEndTime sets the value of ClosingAuctionEndTime.
func (s *V1TradingDay) SetClosingAuctionEndTime(val OptDateTime) {
	s.ClosingAuctionEndTime = val
}

// SetEveningOpeningAuctionStartTime sets the value of EveningOpeningAuctionStartTime.
func (s *V1TradingDay) SetEveningOpeningAuctionStartTime(val OptDateTime) {
	s.EveningOpeningAuctionStartTime = val
}

// SetEveningStartTime sets the value of EveningStartTime.
func (s *V1TradingDay) SetEveningStartTime(val OptDateTime) {
	s.EveningStartTime = val
}

// SetEveningEndTime sets the value of EveningEndTime.
func (s *V1TradingDay) SetEveningEndTime(val OptDateTime) {
	s.EveningEndTime = val
}

// SetClearingStartTime sets the value of ClearingStartTime.
func (s *V1TradingDay) SetClearingStartTime(val OptDateTime) {
	s.ClearingStartTime = val
}

// SetClearingEndTime sets the value of ClearingEndTime.
func (s *V1TradingDay) SetClearingEndTime(val OptDateTime) {
	s.ClearingEndTime = val
}

// SetPremarketStartTime sets the value of PremarketStartTime.
func (s *V1TradingDay) SetPremarketStartTime(val OptDateTime) {
	s.PremarketStartTime = val
}

// SetPremarketEndTime sets the value of PremarketEndTime.
func (s *V1TradingDay) SetPremarketEndTime(val OptDateTime) {
	s.PremarketEndTime = val
}

// SetClosingAuctionStartTime sets the value of ClosingAuctionStartTime.
func (s *V1TradingDay) SetClosingAuctionStartTime(val OptDateTime) {
	s.ClosingAuctionStartTime = val
}

// SetOpeningAuctionEndTime sets the value of OpeningAuctionEndTime.
func (s *V1TradingDay) SetOpeningAuctionEndTime(val OptDateTime) {
	s.OpeningAuctionEndTime = val
}

// Данные по торговой площадке.
// Ref: #/components/schemas/v1TradingSchedule
type V1TradingSchedule struct {
	Exchange OptString      `json:"exchange"`
	Days     []V1TradingDay `json:"days"`
}

// GetExchange returns the value of Exchange.
func (s *V1TradingSchedule) GetExchange() OptString {
	return s.Exchange
}

// GetDays returns the value of Days.
func (s *V1TradingSchedule) GetDays() []V1TradingDay {
	return s.Days
}

// SetExchange sets the value of Exchange.
func (s *V1TradingSchedule) SetExchange(val OptString) {
	s.Exchange = val
}

// SetDays sets the value of Days.
func (s *V1TradingSchedule) SetDays(val []V1TradingDay) {
	s.Days = val
}

// Запрос расписания торгов.
// Ref: #/components/schemas/v1TradingSchedulesRequest
type V1TradingSchedulesRequest struct {
	Exchange OptString   `json:"exchange"`
	From     OptDateTime `json:"from"`
	To       OptDateTime `json:"to"`
}

// GetExchange returns the value of Exchange.
func (s *V1TradingSchedulesRequest) GetExchange() OptString {
	return s.Exchange
}

// GetFrom returns the value of From.
func (s *V1TradingSchedulesRequest) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *V1TradingSchedulesRequest) GetTo() OptDateTime {
	return s.To
}

// SetExchange sets the value of Exchange.
func (s *V1TradingSchedulesRequest) SetExchange(val OptString) {
	s.Exchange = val
}

// SetFrom sets the value of From.
func (s *V1TradingSchedulesRequest) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *V1TradingSchedulesRequest) SetTo(val OptDateTime) {
	s.To = val
}

// Список торговых площадок.
// Ref: #/components/schemas/v1TradingSchedulesResponse
type V1TradingSchedulesResponse struct {
	Exchanges []V1TradingSchedule `json:"exchanges"`
}

// GetExchanges returns the value of Exchanges.
func (s *V1TradingSchedulesResponse) GetExchanges() []V1TradingSchedule {
	return s.Exchanges
}

// SetExchanges sets the value of Exchanges.
func (s *V1TradingSchedulesResponse) SetExchanges(val []V1TradingSchedule) {
	s.Exchanges = val
}

func (*V1TradingSchedulesResponse) instrumentsServiceTradingSchedulesRes() {}

// Лимит unary-методов.
// Ref: #/components/schemas/v1UnaryLimit
type V1UnaryLimit struct {
	LimitPerMinute OptInt32 `json:"limitPerMinute"`
	Methods        []string `json:"methods"`
}

// GetLimitPerMinute returns the value of LimitPerMinute.
func (s *V1UnaryLimit) GetLimitPerMinute() OptInt32 {
	return s.LimitPerMinute
}

// GetMethods returns the value of Methods.
func (s *V1UnaryLimit) GetMethods() []string {
	return s.Methods
}

// SetLimitPerMinute sets the value of LimitPerMinute.
func (s *V1UnaryLimit) SetLimitPerMinute(val OptInt32) {
	s.LimitPerMinute = val
}

// SetMethods sets the value of Methods.
func (s *V1UnaryLimit) SetMethods(val []string) {
	s.Methods = val
}

// Ref: #/components/schemas/v1VirtualPortfolioPosition
type V1VirtualPortfolioPosition struct {
	PositionUid              OptString       `json:"positionUid"`
	InstrumentUid            OptString       `json:"instrumentUid"`
	Figi                     OptString       `json:"figi"`
	InstrumentType           OptString       `json:"instrumentType"`
	Quantity                 OptV1Quotation  `json:"quantity"`
	AveragePositionPrice     OptV1MoneyValue `json:"averagePositionPrice"`
	ExpectedYield            OptV1Quotation  `json:"expectedYield"`
	ExpectedYieldFifo        OptV1Quotation  `json:"expectedYieldFifo"`
	ExpireDate               OptDateTime     `json:"expireDate"`
	CurrentPrice             OptV1MoneyValue `json:"currentPrice"`
	AveragePositionPriceFifo OptV1MoneyValue `json:"averagePositionPriceFifo"`
}

// GetPositionUid returns the value of PositionUid.
func (s *V1VirtualPortfolioPosition) GetPositionUid() OptString {
	return s.PositionUid
}

// GetInstrumentUid returns the value of InstrumentUid.
func (s *V1VirtualPortfolioPosition) GetInstrumentUid() OptString {
	return s.InstrumentUid
}

// GetFigi returns the value of Figi.
func (s *V1VirtualPortfolioPosition) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s *V1VirtualPortfolioPosition) GetInstrumentType() OptString {
	return s.InstrumentType
}

// GetQuantity returns the value of Quantity.
func (s *V1VirtualPortfolioPosition) GetQuantity() OptV1Quotation {
	return s.Quantity
}

// GetAveragePositionPrice returns the value of AveragePositionPrice.
func (s *V1VirtualPortfolioPosition) GetAveragePositionPrice() OptV1MoneyValue {
	return s.AveragePositionPrice
}

// GetExpectedYield returns the value of ExpectedYield.
func (s *V1VirtualPortfolioPosition) GetExpectedYield() OptV1Quotation {
	return s.ExpectedYield
}

// GetExpectedYieldFifo returns the value of ExpectedYieldFifo.
func (s *V1VirtualPortfolioPosition) GetExpectedYieldFifo() OptV1Quotation {
	return s.ExpectedYieldFifo
}

// GetExpireDate returns the value of ExpireDate.
func (s *V1VirtualPortfolioPosition) GetExpireDate() OptDateTime {
	return s.ExpireDate
}

// GetCurrentPrice returns the value of CurrentPrice.
func (s *V1VirtualPortfolioPosition) GetCurrentPrice() OptV1MoneyValue {
	return s.CurrentPrice
}

// GetAveragePositionPriceFifo returns the value of AveragePositionPriceFifo.
func (s *V1VirtualPortfolioPosition) GetAveragePositionPriceFifo() OptV1MoneyValue {
	return s.AveragePositionPriceFifo
}

// SetPositionUid sets the value of PositionUid.
func (s *V1VirtualPortfolioPosition) SetPositionUid(val OptString) {
	s.PositionUid = val
}

// SetInstrumentUid sets the value of InstrumentUid.
func (s *V1VirtualPortfolioPosition) SetInstrumentUid(val OptString) {
	s.InstrumentUid = val
}

// SetFigi sets the value of Figi.
func (s *V1VirtualPortfolioPosition) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *V1VirtualPortfolioPosition) SetInstrumentType(val OptString) {
	s.InstrumentType = val
}

// SetQuantity sets the value of Quantity.
func (s *V1VirtualPortfolioPosition) SetQuantity(val OptV1Quotation) {
	s.Quantity = val
}

// SetAveragePositionPrice sets the value of AveragePositionPrice.
func (s *V1VirtualPortfolioPosition) SetAveragePositionPrice(val OptV1MoneyValue) {
	s.AveragePositionPrice = val
}

// SetExpectedYield sets the value of ExpectedYield.
func (s *V1VirtualPortfolioPosition) SetExpectedYield(val OptV1Quotation) {
	s.ExpectedYield = val
}

// SetExpectedYieldFifo sets the value of ExpectedYieldFifo.
func (s *V1VirtualPortfolioPosition) SetExpectedYieldFifo(val OptV1Quotation) {
	s.ExpectedYieldFifo = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *V1VirtualPortfolioPosition) SetExpireDate(val OptDateTime) {
	s.ExpireDate = val
}

// SetCurrentPrice sets the value of CurrentPrice.
func (s *V1VirtualPortfolioPosition) SetCurrentPrice(val OptV1MoneyValue) {
	s.CurrentPrice = val
}

// SetAveragePositionPriceFifo sets the value of AveragePositionPriceFifo.
func (s *V1VirtualPortfolioPosition) SetAveragePositionPriceFifo(val OptV1MoneyValue) {
	s.AveragePositionPriceFifo = val
}

// Запрос доступного для вывода остатка.
// Ref: #/components/schemas/v1WithdrawLimitsRequest
type V1WithdrawLimitsRequest struct {
	AccountId OptString `json:"accountId"`
}

// GetAccountId returns the value of AccountId.
func (s *V1WithdrawLimitsRequest) GetAccountId() OptString {
	return s.AccountId
}

// SetAccountId sets the value of AccountId.
func (s *V1WithdrawLimitsRequest) SetAccountId(val OptString) {
	s.AccountId = val
}

// Доступный для вывода остаток.
// Ref: #/components/schemas/v1WithdrawLimitsResponse
type V1WithdrawLimitsResponse struct {
	Money            []V1MoneyValue `json:"money"`
	Blocked          []V1MoneyValue `json:"blocked"`
	BlockedGuarantee []V1MoneyValue `json:"blockedGuarantee"`
}

// GetMoney returns the value of Money.
func (s *V1WithdrawLimitsResponse) GetMoney() []V1MoneyValue {
	return s.Money
}

// GetBlocked returns the value of Blocked.
func (s *V1WithdrawLimitsResponse) GetBlocked() []V1MoneyValue {
	return s.Blocked
}

// GetBlockedGuarantee returns the value of BlockedGuarantee.
func (s *V1WithdrawLimitsResponse) GetBlockedGuarantee() []V1MoneyValue {
	return s.BlockedGuarantee
}

// SetMoney sets the value of Money.
func (s *V1WithdrawLimitsResponse) SetMoney(val []V1MoneyValue) {
	s.Money = val
}

// SetBlocked sets the value of Blocked.
func (s *V1WithdrawLimitsResponse) SetBlocked(val []V1MoneyValue) {
	s.Blocked = val
}

// SetBlockedGuarantee sets the value of BlockedGuarantee.
func (s *V1WithdrawLimitsResponse) SetBlockedGuarantee(val []V1MoneyValue) {
	s.BlockedGuarantee = val
}

func (*V1WithdrawLimitsResponse) operationsServiceGetWithdrawLimitsRes()     {}
func (*V1WithdrawLimitsResponse) sandboxServiceGetSandboxWithdrawLimitsRes() {}
