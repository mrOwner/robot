// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/users.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "tinkoff.public.invest.api.contract.v1.UsersService"
)

// UsersServiceClient is a client for the tinkoff.public.invest.api.contract.v1.UsersService
// service.
type UsersServiceClient interface {
	// Метод получения счетов пользователя.
	GetAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error)
	// Расчёт маржинальных показателей по счёту.
	GetMarginAttributes(context.Context, *connect_go.Request[__.GetMarginAttributesRequest]) (*connect_go.Response[__.GetMarginAttributesResponse], error)
	// Запрос тарифа пользователя.
	GetUserTariff(context.Context, *connect_go.Request[__.GetUserTariffRequest]) (*connect_go.Response[__.GetUserTariffResponse], error)
	// Метод получения информации о пользователе.
	GetInfo(context.Context, *connect_go.Request[__.GetInfoRequest]) (*connect_go.Response[__.GetInfoResponse], error)
}

// NewUsersServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.UsersService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		getAccounts: connect_go.NewClient[__.GetAccountsRequest, __.GetAccountsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts",
			opts...,
		),
		getMarginAttributes: connect_go.NewClient[__.GetMarginAttributesRequest, __.GetMarginAttributesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes",
			opts...,
		),
		getUserTariff: connect_go.NewClient[__.GetUserTariffRequest, __.GetUserTariffResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff",
			opts...,
		),
		getInfo: connect_go.NewClient[__.GetInfoRequest, __.GetInfoResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo",
			opts...,
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	getAccounts         *connect_go.Client[__.GetAccountsRequest, __.GetAccountsResponse]
	getMarginAttributes *connect_go.Client[__.GetMarginAttributesRequest, __.GetMarginAttributesResponse]
	getUserTariff       *connect_go.Client[__.GetUserTariffRequest, __.GetUserTariffResponse]
	getInfo             *connect_go.Client[__.GetInfoRequest, __.GetInfoResponse]
}

// GetAccounts calls tinkoff.public.invest.api.contract.v1.UsersService.GetAccounts.
func (c *usersServiceClient) GetAccounts(ctx context.Context, req *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error) {
	return c.getAccounts.CallUnary(ctx, req)
}

// GetMarginAttributes calls tinkoff.public.invest.api.contract.v1.UsersService.GetMarginAttributes.
func (c *usersServiceClient) GetMarginAttributes(ctx context.Context, req *connect_go.Request[__.GetMarginAttributesRequest]) (*connect_go.Response[__.GetMarginAttributesResponse], error) {
	return c.getMarginAttributes.CallUnary(ctx, req)
}

// GetUserTariff calls tinkoff.public.invest.api.contract.v1.UsersService.GetUserTariff.
func (c *usersServiceClient) GetUserTariff(ctx context.Context, req *connect_go.Request[__.GetUserTariffRequest]) (*connect_go.Response[__.GetUserTariffResponse], error) {
	return c.getUserTariff.CallUnary(ctx, req)
}

// GetInfo calls tinkoff.public.invest.api.contract.v1.UsersService.GetInfo.
func (c *usersServiceClient) GetInfo(ctx context.Context, req *connect_go.Request[__.GetInfoRequest]) (*connect_go.Response[__.GetInfoResponse], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.UsersService service.
type UsersServiceHandler interface {
	// Метод получения счетов пользователя.
	GetAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error)
	// Расчёт маржинальных показателей по счёту.
	GetMarginAttributes(context.Context, *connect_go.Request[__.GetMarginAttributesRequest]) (*connect_go.Response[__.GetMarginAttributesResponse], error)
	// Запрос тарифа пользователя.
	GetUserTariff(context.Context, *connect_go.Request[__.GetUserTariffRequest]) (*connect_go.Response[__.GetUserTariffResponse], error)
	// Метод получения информации о пользователе.
	GetInfo(context.Context, *connect_go.Request[__.GetInfoRequest]) (*connect_go.Response[__.GetInfoResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts",
		svc.GetAccounts,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes",
		svc.GetMarginAttributes,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff",
		svc.GetUserTariff,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo",
		svc.GetInfo,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.UsersService/", mux
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) GetAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.UsersService.GetAccounts is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetMarginAttributes(context.Context, *connect_go.Request[__.GetMarginAttributesRequest]) (*connect_go.Response[__.GetMarginAttributesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.UsersService.GetMarginAttributes is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserTariff(context.Context, *connect_go.Request[__.GetUserTariffRequest]) (*connect_go.Response[__.GetUserTariffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.UsersService.GetUserTariff is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetInfo(context.Context, *connect_go.Request[__.GetInfoRequest]) (*connect_go.Response[__.GetInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.UsersService.GetInfo is not implemented"))
}
