// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/operations.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OperationsServiceName is the fully-qualified name of the OperationsService service.
	OperationsServiceName = "tinkoff.public.invest.api.contract.v1.OperationsService"
	// OperationsStreamServiceName is the fully-qualified name of the OperationsStreamService service.
	OperationsStreamServiceName = "tinkoff.public.invest.api.contract.v1.OperationsStreamService"
)

// OperationsServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.OperationsService service.
type OperationsServiceClient interface {
	// Метод получения списка операций по счёту.При работе с данным методом
	// необходимо учитывать
	//
	//	[особенности взаимодействия](/investAPI/operations_problems) с данным
	//	методом.
	GetOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error)
	// Метод получения портфеля по счёту.
	GetPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error)
	// Метод получения списка позиций по счёту.
	GetPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error)
	// Метод получения доступного остатка для вывода средств.
	GetWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error)
	// Метод получения брокерского отчёта.
	GetBrokerReport(context.Context, *connect_go.Request[__.BrokerReportRequest]) (*connect_go.Response[__.BrokerReportResponse], error)
	// Метод получения отчёта "Справка о доходах за пределами РФ".
	GetDividendsForeignIssuer(context.Context, *connect_go.Request[__.GetDividendsForeignIssuerRequest]) (*connect_go.Response[__.GetDividendsForeignIssuerResponse], error)
	// Метод получения списка операций по счёту с пагинацией. При работе с данным
	// методом необходимо учитывать
	//
	//	[особенности взаимодействия](/investAPI/operations_problems) с данным
	//	методом.
	GetOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error)
}

// NewOperationsServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.OperationsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperationsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OperationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operationsServiceClient{
		getOperations: connect_go.NewClient[__.OperationsRequest, __.OperationsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations",
			opts...,
		),
		getPortfolio: connect_go.NewClient[__.PortfolioRequest, __.PortfolioResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio",
			opts...,
		),
		getPositions: connect_go.NewClient[__.PositionsRequest, __.PositionsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions",
			opts...,
		),
		getWithdrawLimits: connect_go.NewClient[__.WithdrawLimitsRequest, __.WithdrawLimitsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits",
			opts...,
		),
		getBrokerReport: connect_go.NewClient[__.BrokerReportRequest, __.BrokerReportResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport",
			opts...,
		),
		getDividendsForeignIssuer: connect_go.NewClient[__.GetDividendsForeignIssuerRequest, __.GetDividendsForeignIssuerResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer",
			opts...,
		),
		getOperationsByCursor: connect_go.NewClient[__.GetOperationsByCursorRequest, __.GetOperationsByCursorResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor",
			opts...,
		),
	}
}

// operationsServiceClient implements OperationsServiceClient.
type operationsServiceClient struct {
	getOperations             *connect_go.Client[__.OperationsRequest, __.OperationsResponse]
	getPortfolio              *connect_go.Client[__.PortfolioRequest, __.PortfolioResponse]
	getPositions              *connect_go.Client[__.PositionsRequest, __.PositionsResponse]
	getWithdrawLimits         *connect_go.Client[__.WithdrawLimitsRequest, __.WithdrawLimitsResponse]
	getBrokerReport           *connect_go.Client[__.BrokerReportRequest, __.BrokerReportResponse]
	getDividendsForeignIssuer *connect_go.Client[__.GetDividendsForeignIssuerRequest, __.GetDividendsForeignIssuerResponse]
	getOperationsByCursor     *connect_go.Client[__.GetOperationsByCursorRequest, __.GetOperationsByCursorResponse]
}

// GetOperations calls tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations.
func (c *operationsServiceClient) GetOperations(ctx context.Context, req *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error) {
	return c.getOperations.CallUnary(ctx, req)
}

// GetPortfolio calls tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio.
func (c *operationsServiceClient) GetPortfolio(ctx context.Context, req *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error) {
	return c.getPortfolio.CallUnary(ctx, req)
}

// GetPositions calls tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions.
func (c *operationsServiceClient) GetPositions(ctx context.Context, req *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error) {
	return c.getPositions.CallUnary(ctx, req)
}

// GetWithdrawLimits calls
// tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits.
func (c *operationsServiceClient) GetWithdrawLimits(ctx context.Context, req *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error) {
	return c.getWithdrawLimits.CallUnary(ctx, req)
}

// GetBrokerReport calls tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport.
func (c *operationsServiceClient) GetBrokerReport(ctx context.Context, req *connect_go.Request[__.BrokerReportRequest]) (*connect_go.Response[__.BrokerReportResponse], error) {
	return c.getBrokerReport.CallUnary(ctx, req)
}

// GetDividendsForeignIssuer calls
// tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer.
func (c *operationsServiceClient) GetDividendsForeignIssuer(ctx context.Context, req *connect_go.Request[__.GetDividendsForeignIssuerRequest]) (*connect_go.Response[__.GetDividendsForeignIssuerResponse], error) {
	return c.getDividendsForeignIssuer.CallUnary(ctx, req)
}

// GetOperationsByCursor calls
// tinkoff.public.invest.api.contract.v1.OperationsService.GetOperationsByCursor.
func (c *operationsServiceClient) GetOperationsByCursor(ctx context.Context, req *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error) {
	return c.getOperationsByCursor.CallUnary(ctx, req)
}

// OperationsServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.OperationsService service.
type OperationsServiceHandler interface {
	// Метод получения списка операций по счёту.При работе с данным методом
	// необходимо учитывать
	//
	//	[особенности взаимодействия](/investAPI/operations_problems) с данным
	//	методом.
	GetOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error)
	// Метод получения портфеля по счёту.
	GetPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error)
	// Метод получения списка позиций по счёту.
	GetPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error)
	// Метод получения доступного остатка для вывода средств.
	GetWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error)
	// Метод получения брокерского отчёта.
	GetBrokerReport(context.Context, *connect_go.Request[__.BrokerReportRequest]) (*connect_go.Response[__.BrokerReportResponse], error)
	// Метод получения отчёта "Справка о доходах за пределами РФ".
	GetDividendsForeignIssuer(context.Context, *connect_go.Request[__.GetDividendsForeignIssuerRequest]) (*connect_go.Response[__.GetDividendsForeignIssuerResponse], error)
	// Метод получения списка операций по счёту с пагинацией. При работе с данным
	// методом необходимо учитывать
	//
	//	[особенности взаимодействия](/investAPI/operations_problems) с данным
	//	методом.
	GetOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error)
}

// NewOperationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperationsServiceHandler(svc OperationsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations",
		svc.GetOperations,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio",
		svc.GetPortfolio,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions",
		svc.GetPositions,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits",
		svc.GetWithdrawLimits,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport",
		svc.GetBrokerReport,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer",
		svc.GetDividendsForeignIssuer,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor",
		svc.GetOperationsByCursor,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.OperationsService/", mux
}

// UnimplementedOperationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOperationsServiceHandler struct{}

func (UnimplementedOperationsServiceHandler) GetOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetBrokerReport(context.Context, *connect_go.Request[__.BrokerReportRequest]) (*connect_go.Response[__.BrokerReportResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetDividendsForeignIssuer(context.Context, *connect_go.Request[__.GetDividendsForeignIssuerRequest]) (*connect_go.Response[__.GetDividendsForeignIssuerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer is not implemented"))
}

func (UnimplementedOperationsServiceHandler) GetOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsService.GetOperationsByCursor is not implemented"))
}

// OperationsStreamServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.OperationsStreamService service.
type OperationsStreamServiceClient interface {
	// Server-side stream обновлений портфеля
	PortfolioStream(context.Context, *connect_go.Request[__.PortfolioStreamRequest]) (*connect_go.ServerStreamForClient[__.PortfolioStreamResponse], error)
	// Server-side stream обновлений информации по изменению позиций портфеля
	PositionsStream(context.Context, *connect_go.Request[__.PositionsStreamRequest]) (*connect_go.ServerStreamForClient[__.PositionsStreamResponse], error)
}

// NewOperationsStreamServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.OperationsStreamService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperationsStreamServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OperationsStreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operationsStreamServiceClient{
		portfolioStream: connect_go.NewClient[__.PortfolioStreamRequest, __.PortfolioStreamResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream",
			opts...,
		),
		positionsStream: connect_go.NewClient[__.PositionsStreamRequest, __.PositionsStreamResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream",
			opts...,
		),
	}
}

// operationsStreamServiceClient implements OperationsStreamServiceClient.
type operationsStreamServiceClient struct {
	portfolioStream *connect_go.Client[__.PortfolioStreamRequest, __.PortfolioStreamResponse]
	positionsStream *connect_go.Client[__.PositionsStreamRequest, __.PositionsStreamResponse]
}

// PortfolioStream calls
// tinkoff.public.invest.api.contract.v1.OperationsStreamService.PortfolioStream.
func (c *operationsStreamServiceClient) PortfolioStream(ctx context.Context, req *connect_go.Request[__.PortfolioStreamRequest]) (*connect_go.ServerStreamForClient[__.PortfolioStreamResponse], error) {
	return c.portfolioStream.CallServerStream(ctx, req)
}

// PositionsStream calls
// tinkoff.public.invest.api.contract.v1.OperationsStreamService.PositionsStream.
func (c *operationsStreamServiceClient) PositionsStream(ctx context.Context, req *connect_go.Request[__.PositionsStreamRequest]) (*connect_go.ServerStreamForClient[__.PositionsStreamResponse], error) {
	return c.positionsStream.CallServerStream(ctx, req)
}

// OperationsStreamServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.OperationsStreamService service.
type OperationsStreamServiceHandler interface {
	// Server-side stream обновлений портфеля
	PortfolioStream(context.Context, *connect_go.Request[__.PortfolioStreamRequest], *connect_go.ServerStream[__.PortfolioStreamResponse]) error
	// Server-side stream обновлений информации по изменению позиций портфеля
	PositionsStream(context.Context, *connect_go.Request[__.PositionsStreamRequest], *connect_go.ServerStream[__.PositionsStreamResponse]) error
}

// NewOperationsStreamServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperationsStreamServiceHandler(svc OperationsStreamServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream", connect_go.NewServerStreamHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream",
		svc.PortfolioStream,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream", connect_go.NewServerStreamHandler(
		"/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream",
		svc.PositionsStream,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.OperationsStreamService/", mux
}

// UnimplementedOperationsStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOperationsStreamServiceHandler struct{}

func (UnimplementedOperationsStreamServiceHandler) PortfolioStream(context.Context, *connect_go.Request[__.PortfolioStreamRequest], *connect_go.ServerStream[__.PortfolioStreamResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsStreamService.PortfolioStream is not implemented"))
}

func (UnimplementedOperationsStreamServiceHandler) PositionsStream(context.Context, *connect_go.Request[__.PositionsStreamRequest], *connect_go.ServerStream[__.PositionsStreamResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.OperationsStreamService.PositionsStream is not implemented"))
}
