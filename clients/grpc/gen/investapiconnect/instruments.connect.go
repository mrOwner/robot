// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/instruments.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InstrumentsServiceName is the fully-qualified name of the InstrumentsService service.
	InstrumentsServiceName = "tinkoff.public.invest.api.contract.v1.InstrumentsService"
)

// InstrumentsServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.InstrumentsService service.
type InstrumentsServiceClient interface {
	// Метод получения расписания торгов торговых площадок.
	TradingSchedules(context.Context, *connect_go.Request[__.TradingSchedulesRequest]) (*connect_go.Response[__.TradingSchedulesResponse], error)
	// Метод получения облигации по её идентификатору.
	BondBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.BondResponse], error)
	// Метод получения списка облигаций.
	Bonds(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.BondsResponse], error)
	// Метод получения графика выплат купонов по облигации.
	GetBondCoupons(context.Context, *connect_go.Request[__.GetBondCouponsRequest]) (*connect_go.Response[__.GetBondCouponsResponse], error)
	// Метод получения валюты по её идентификатору.
	CurrencyBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.CurrencyResponse], error)
	// Метод получения списка валют.
	Currencies(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.CurrenciesResponse], error)
	// Метод получения инвестиционного фонда по его идентификатору.
	EtfBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.EtfResponse], error)
	// Метод получения списка инвестиционных фондов.
	Etfs(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.EtfsResponse], error)
	// Метод получения фьючерса по его идентификатору.
	FutureBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.FutureResponse], error)
	// Метод получения списка фьючерсов.
	Futures(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.FuturesResponse], error)
	// Метод получения опциона по его идентификатору.
	OptionBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.OptionResponse], error)
	// Метод получения списка опционов.
	Options(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.OptionsResponse], error)
	// Метод получения акции по её идентификатору.
	ShareBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.ShareResponse], error)
	// Метод получения списка акций.
	Shares(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.SharesResponse], error)
	// Метод получения накопленного купонного дохода по облигации.
	GetAccruedInterests(context.Context, *connect_go.Request[__.GetAccruedInterestsRequest]) (*connect_go.Response[__.GetAccruedInterestsResponse], error)
	// Метод получения размера гарантийного обеспечения по фьючерсам.
	GetFuturesMargin(context.Context, *connect_go.Request[__.GetFuturesMarginRequest]) (*connect_go.Response[__.GetFuturesMarginResponse], error)
	// Метод получения основной информации об инструменте.
	GetInstrumentBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.InstrumentResponse], error)
	// Метод для получения событий выплаты дивидендов по инструменту.
	GetDividends(context.Context, *connect_go.Request[__.GetDividendsRequest]) (*connect_go.Response[__.GetDividendsResponse], error)
	// Метод получения актива по его идентификатору.
	GetAssetBy(context.Context, *connect_go.Request[__.AssetRequest]) (*connect_go.Response[__.AssetResponse], error)
	// Метод получения списка активов.
	GetAssets(context.Context, *connect_go.Request[__.AssetsRequest]) (*connect_go.Response[__.AssetsResponse], error)
	// Метод получения списка избранных инструментов.
	GetFavorites(context.Context, *connect_go.Request[__.GetFavoritesRequest]) (*connect_go.Response[__.GetFavoritesResponse], error)
	// Метод редактирования списка избранных инструментов.
	EditFavorites(context.Context, *connect_go.Request[__.EditFavoritesRequest]) (*connect_go.Response[__.EditFavoritesResponse], error)
	// Метод получения списка стран.
	GetCountries(context.Context, *connect_go.Request[__.GetCountriesRequest]) (*connect_go.Response[__.GetCountriesResponse], error)
	// Метод поиска инструмента.
	FindInstrument(context.Context, *connect_go.Request[__.FindInstrumentRequest]) (*connect_go.Response[__.FindInstrumentResponse], error)
	// Метод получения списка брендов.
	GetBrands(context.Context, *connect_go.Request[__.GetBrandsRequest]) (*connect_go.Response[__.GetBrandsResponse], error)
	// Метод получения бренда по его идентификатору.
	GetBrandBy(context.Context, *connect_go.Request[__.GetBrandRequest]) (*connect_go.Response[__.Brand], error)
}

// NewInstrumentsServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.InstrumentsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstrumentsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InstrumentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &instrumentsServiceClient{
		tradingSchedules: connect_go.NewClient[__.TradingSchedulesRequest, __.TradingSchedulesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules",
			opts...,
		),
		bondBy: connect_go.NewClient[__.InstrumentRequest, __.BondResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy",
			opts...,
		),
		bonds: connect_go.NewClient[__.InstrumentsRequest, __.BondsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds",
			opts...,
		),
		getBondCoupons: connect_go.NewClient[__.GetBondCouponsRequest, __.GetBondCouponsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons",
			opts...,
		),
		currencyBy: connect_go.NewClient[__.InstrumentRequest, __.CurrencyResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy",
			opts...,
		),
		currencies: connect_go.NewClient[__.InstrumentsRequest, __.CurrenciesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies",
			opts...,
		),
		etfBy: connect_go.NewClient[__.InstrumentRequest, __.EtfResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy",
			opts...,
		),
		etfs: connect_go.NewClient[__.InstrumentsRequest, __.EtfsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs",
			opts...,
		),
		futureBy: connect_go.NewClient[__.InstrumentRequest, __.FutureResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy",
			opts...,
		),
		futures: connect_go.NewClient[__.InstrumentsRequest, __.FuturesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures",
			opts...,
		),
		optionBy: connect_go.NewClient[__.InstrumentRequest, __.OptionResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy",
			opts...,
		),
		options: connect_go.NewClient[__.InstrumentsRequest, __.OptionsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options",
			opts...,
		),
		shareBy: connect_go.NewClient[__.InstrumentRequest, __.ShareResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy",
			opts...,
		),
		shares: connect_go.NewClient[__.InstrumentsRequest, __.SharesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares",
			opts...,
		),
		getAccruedInterests: connect_go.NewClient[__.GetAccruedInterestsRequest, __.GetAccruedInterestsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
			opts...,
		),
		getFuturesMargin: connect_go.NewClient[__.GetFuturesMarginRequest, __.GetFuturesMarginResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
			opts...,
		),
		getInstrumentBy: connect_go.NewClient[__.InstrumentRequest, __.InstrumentResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
			opts...,
		),
		getDividends: connect_go.NewClient[__.GetDividendsRequest, __.GetDividendsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends",
			opts...,
		),
		getAssetBy: connect_go.NewClient[__.AssetRequest, __.AssetResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy",
			opts...,
		),
		getAssets: connect_go.NewClient[__.AssetsRequest, __.AssetsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets",
			opts...,
		),
		getFavorites: connect_go.NewClient[__.GetFavoritesRequest, __.GetFavoritesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites",
			opts...,
		),
		editFavorites: connect_go.NewClient[__.EditFavoritesRequest, __.EditFavoritesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites",
			opts...,
		),
		getCountries: connect_go.NewClient[__.GetCountriesRequest, __.GetCountriesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries",
			opts...,
		),
		findInstrument: connect_go.NewClient[__.FindInstrumentRequest, __.FindInstrumentResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument",
			opts...,
		),
		getBrands: connect_go.NewClient[__.GetBrandsRequest, __.GetBrandsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands",
			opts...,
		),
		getBrandBy: connect_go.NewClient[__.GetBrandRequest, __.Brand](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy",
			opts...,
		),
	}
}

// instrumentsServiceClient implements InstrumentsServiceClient.
type instrumentsServiceClient struct {
	tradingSchedules    *connect_go.Client[__.TradingSchedulesRequest, __.TradingSchedulesResponse]
	bondBy              *connect_go.Client[__.InstrumentRequest, __.BondResponse]
	bonds               *connect_go.Client[__.InstrumentsRequest, __.BondsResponse]
	getBondCoupons      *connect_go.Client[__.GetBondCouponsRequest, __.GetBondCouponsResponse]
	currencyBy          *connect_go.Client[__.InstrumentRequest, __.CurrencyResponse]
	currencies          *connect_go.Client[__.InstrumentsRequest, __.CurrenciesResponse]
	etfBy               *connect_go.Client[__.InstrumentRequest, __.EtfResponse]
	etfs                *connect_go.Client[__.InstrumentsRequest, __.EtfsResponse]
	futureBy            *connect_go.Client[__.InstrumentRequest, __.FutureResponse]
	futures             *connect_go.Client[__.InstrumentsRequest, __.FuturesResponse]
	optionBy            *connect_go.Client[__.InstrumentRequest, __.OptionResponse]
	options             *connect_go.Client[__.InstrumentsRequest, __.OptionsResponse]
	shareBy             *connect_go.Client[__.InstrumentRequest, __.ShareResponse]
	shares              *connect_go.Client[__.InstrumentsRequest, __.SharesResponse]
	getAccruedInterests *connect_go.Client[__.GetAccruedInterestsRequest, __.GetAccruedInterestsResponse]
	getFuturesMargin    *connect_go.Client[__.GetFuturesMarginRequest, __.GetFuturesMarginResponse]
	getInstrumentBy     *connect_go.Client[__.InstrumentRequest, __.InstrumentResponse]
	getDividends        *connect_go.Client[__.GetDividendsRequest, __.GetDividendsResponse]
	getAssetBy          *connect_go.Client[__.AssetRequest, __.AssetResponse]
	getAssets           *connect_go.Client[__.AssetsRequest, __.AssetsResponse]
	getFavorites        *connect_go.Client[__.GetFavoritesRequest, __.GetFavoritesResponse]
	editFavorites       *connect_go.Client[__.EditFavoritesRequest, __.EditFavoritesResponse]
	getCountries        *connect_go.Client[__.GetCountriesRequest, __.GetCountriesResponse]
	findInstrument      *connect_go.Client[__.FindInstrumentRequest, __.FindInstrumentResponse]
	getBrands           *connect_go.Client[__.GetBrandsRequest, __.GetBrandsResponse]
	getBrandBy          *connect_go.Client[__.GetBrandRequest, __.Brand]
}

// TradingSchedules calls tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules.
func (c *instrumentsServiceClient) TradingSchedules(ctx context.Context, req *connect_go.Request[__.TradingSchedulesRequest]) (*connect_go.Response[__.TradingSchedulesResponse], error) {
	return c.tradingSchedules.CallUnary(ctx, req)
}

// BondBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy.
func (c *instrumentsServiceClient) BondBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.BondResponse], error) {
	return c.bondBy.CallUnary(ctx, req)
}

// Bonds calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds.
func (c *instrumentsServiceClient) Bonds(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.BondsResponse], error) {
	return c.bonds.CallUnary(ctx, req)
}

// GetBondCoupons calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBondCoupons.
func (c *instrumentsServiceClient) GetBondCoupons(ctx context.Context, req *connect_go.Request[__.GetBondCouponsRequest]) (*connect_go.Response[__.GetBondCouponsResponse], error) {
	return c.getBondCoupons.CallUnary(ctx, req)
}

// CurrencyBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy.
func (c *instrumentsServiceClient) CurrencyBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.CurrencyResponse], error) {
	return c.currencyBy.CallUnary(ctx, req)
}

// Currencies calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies.
func (c *instrumentsServiceClient) Currencies(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.CurrenciesResponse], error) {
	return c.currencies.CallUnary(ctx, req)
}

// EtfBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy.
func (c *instrumentsServiceClient) EtfBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.EtfResponse], error) {
	return c.etfBy.CallUnary(ctx, req)
}

// Etfs calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs.
func (c *instrumentsServiceClient) Etfs(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.EtfsResponse], error) {
	return c.etfs.CallUnary(ctx, req)
}

// FutureBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy.
func (c *instrumentsServiceClient) FutureBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.FutureResponse], error) {
	return c.futureBy.CallUnary(ctx, req)
}

// Futures calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures.
func (c *instrumentsServiceClient) Futures(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.FuturesResponse], error) {
	return c.futures.CallUnary(ctx, req)
}

// OptionBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.OptionBy.
func (c *instrumentsServiceClient) OptionBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.OptionResponse], error) {
	return c.optionBy.CallUnary(ctx, req)
}

// Options calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Options.
func (c *instrumentsServiceClient) Options(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.OptionsResponse], error) {
	return c.options.CallUnary(ctx, req)
}

// ShareBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy.
func (c *instrumentsServiceClient) ShareBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.ShareResponse], error) {
	return c.shareBy.CallUnary(ctx, req)
}

// Shares calls tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares.
func (c *instrumentsServiceClient) Shares(ctx context.Context, req *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.SharesResponse], error) {
	return c.shares.CallUnary(ctx, req)
}

// GetAccruedInterests calls
// tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests.
func (c *instrumentsServiceClient) GetAccruedInterests(ctx context.Context, req *connect_go.Request[__.GetAccruedInterestsRequest]) (*connect_go.Response[__.GetAccruedInterestsResponse], error) {
	return c.getAccruedInterests.CallUnary(ctx, req)
}

// GetFuturesMargin calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin.
func (c *instrumentsServiceClient) GetFuturesMargin(ctx context.Context, req *connect_go.Request[__.GetFuturesMarginRequest]) (*connect_go.Response[__.GetFuturesMarginResponse], error) {
	return c.getFuturesMargin.CallUnary(ctx, req)
}

// GetInstrumentBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy.
func (c *instrumentsServiceClient) GetInstrumentBy(ctx context.Context, req *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.InstrumentResponse], error) {
	return c.getInstrumentBy.CallUnary(ctx, req)
}

// GetDividends calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends.
func (c *instrumentsServiceClient) GetDividends(ctx context.Context, req *connect_go.Request[__.GetDividendsRequest]) (*connect_go.Response[__.GetDividendsResponse], error) {
	return c.getDividends.CallUnary(ctx, req)
}

// GetAssetBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssetBy.
func (c *instrumentsServiceClient) GetAssetBy(ctx context.Context, req *connect_go.Request[__.AssetRequest]) (*connect_go.Response[__.AssetResponse], error) {
	return c.getAssetBy.CallUnary(ctx, req)
}

// GetAssets calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssets.
func (c *instrumentsServiceClient) GetAssets(ctx context.Context, req *connect_go.Request[__.AssetsRequest]) (*connect_go.Response[__.AssetsResponse], error) {
	return c.getAssets.CallUnary(ctx, req)
}

// GetFavorites calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFavorites.
func (c *instrumentsServiceClient) GetFavorites(ctx context.Context, req *connect_go.Request[__.GetFavoritesRequest]) (*connect_go.Response[__.GetFavoritesResponse], error) {
	return c.getFavorites.CallUnary(ctx, req)
}

// EditFavorites calls tinkoff.public.invest.api.contract.v1.InstrumentsService.EditFavorites.
func (c *instrumentsServiceClient) EditFavorites(ctx context.Context, req *connect_go.Request[__.EditFavoritesRequest]) (*connect_go.Response[__.EditFavoritesResponse], error) {
	return c.editFavorites.CallUnary(ctx, req)
}

// GetCountries calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetCountries.
func (c *instrumentsServiceClient) GetCountries(ctx context.Context, req *connect_go.Request[__.GetCountriesRequest]) (*connect_go.Response[__.GetCountriesResponse], error) {
	return c.getCountries.CallUnary(ctx, req)
}

// FindInstrument calls tinkoff.public.invest.api.contract.v1.InstrumentsService.FindInstrument.
func (c *instrumentsServiceClient) FindInstrument(ctx context.Context, req *connect_go.Request[__.FindInstrumentRequest]) (*connect_go.Response[__.FindInstrumentResponse], error) {
	return c.findInstrument.CallUnary(ctx, req)
}

// GetBrands calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBrands.
func (c *instrumentsServiceClient) GetBrands(ctx context.Context, req *connect_go.Request[__.GetBrandsRequest]) (*connect_go.Response[__.GetBrandsResponse], error) {
	return c.getBrands.CallUnary(ctx, req)
}

// GetBrandBy calls tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBrandBy.
func (c *instrumentsServiceClient) GetBrandBy(ctx context.Context, req *connect_go.Request[__.GetBrandRequest]) (*connect_go.Response[__.Brand], error) {
	return c.getBrandBy.CallUnary(ctx, req)
}

// InstrumentsServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.InstrumentsService service.
type InstrumentsServiceHandler interface {
	// Метод получения расписания торгов торговых площадок.
	TradingSchedules(context.Context, *connect_go.Request[__.TradingSchedulesRequest]) (*connect_go.Response[__.TradingSchedulesResponse], error)
	// Метод получения облигации по её идентификатору.
	BondBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.BondResponse], error)
	// Метод получения списка облигаций.
	Bonds(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.BondsResponse], error)
	// Метод получения графика выплат купонов по облигации.
	GetBondCoupons(context.Context, *connect_go.Request[__.GetBondCouponsRequest]) (*connect_go.Response[__.GetBondCouponsResponse], error)
	// Метод получения валюты по её идентификатору.
	CurrencyBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.CurrencyResponse], error)
	// Метод получения списка валют.
	Currencies(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.CurrenciesResponse], error)
	// Метод получения инвестиционного фонда по его идентификатору.
	EtfBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.EtfResponse], error)
	// Метод получения списка инвестиционных фондов.
	Etfs(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.EtfsResponse], error)
	// Метод получения фьючерса по его идентификатору.
	FutureBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.FutureResponse], error)
	// Метод получения списка фьючерсов.
	Futures(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.FuturesResponse], error)
	// Метод получения опциона по его идентификатору.
	OptionBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.OptionResponse], error)
	// Метод получения списка опционов.
	Options(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.OptionsResponse], error)
	// Метод получения акции по её идентификатору.
	ShareBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.ShareResponse], error)
	// Метод получения списка акций.
	Shares(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.SharesResponse], error)
	// Метод получения накопленного купонного дохода по облигации.
	GetAccruedInterests(context.Context, *connect_go.Request[__.GetAccruedInterestsRequest]) (*connect_go.Response[__.GetAccruedInterestsResponse], error)
	// Метод получения размера гарантийного обеспечения по фьючерсам.
	GetFuturesMargin(context.Context, *connect_go.Request[__.GetFuturesMarginRequest]) (*connect_go.Response[__.GetFuturesMarginResponse], error)
	// Метод получения основной информации об инструменте.
	GetInstrumentBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.InstrumentResponse], error)
	// Метод для получения событий выплаты дивидендов по инструменту.
	GetDividends(context.Context, *connect_go.Request[__.GetDividendsRequest]) (*connect_go.Response[__.GetDividendsResponse], error)
	// Метод получения актива по его идентификатору.
	GetAssetBy(context.Context, *connect_go.Request[__.AssetRequest]) (*connect_go.Response[__.AssetResponse], error)
	// Метод получения списка активов.
	GetAssets(context.Context, *connect_go.Request[__.AssetsRequest]) (*connect_go.Response[__.AssetsResponse], error)
	// Метод получения списка избранных инструментов.
	GetFavorites(context.Context, *connect_go.Request[__.GetFavoritesRequest]) (*connect_go.Response[__.GetFavoritesResponse], error)
	// Метод редактирования списка избранных инструментов.
	EditFavorites(context.Context, *connect_go.Request[__.EditFavoritesRequest]) (*connect_go.Response[__.EditFavoritesResponse], error)
	// Метод получения списка стран.
	GetCountries(context.Context, *connect_go.Request[__.GetCountriesRequest]) (*connect_go.Response[__.GetCountriesResponse], error)
	// Метод поиска инструмента.
	FindInstrument(context.Context, *connect_go.Request[__.FindInstrumentRequest]) (*connect_go.Response[__.FindInstrumentResponse], error)
	// Метод получения списка брендов.
	GetBrands(context.Context, *connect_go.Request[__.GetBrandsRequest]) (*connect_go.Response[__.GetBrandsResponse], error)
	// Метод получения бренда по его идентификатору.
	GetBrandBy(context.Context, *connect_go.Request[__.GetBrandRequest]) (*connect_go.Response[__.Brand], error)
}

// NewInstrumentsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstrumentsServiceHandler(svc InstrumentsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules",
		svc.TradingSchedules,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy",
		svc.BondBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds",
		svc.Bonds,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons",
		svc.GetBondCoupons,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy",
		svc.CurrencyBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies",
		svc.Currencies,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy",
		svc.EtfBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs",
		svc.Etfs,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy",
		svc.FutureBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures",
		svc.Futures,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy",
		svc.OptionBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options",
		svc.Options,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy",
		svc.ShareBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares",
		svc.Shares,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
		svc.GetAccruedInterests,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
		svc.GetFuturesMargin,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
		svc.GetInstrumentBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends",
		svc.GetDividends,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy",
		svc.GetAssetBy,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets",
		svc.GetAssets,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites",
		svc.GetFavorites,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites",
		svc.EditFavorites,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries",
		svc.GetCountries,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument",
		svc.FindInstrument,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands",
		svc.GetBrands,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy",
		svc.GetBrandBy,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.InstrumentsService/", mux
}

// UnimplementedInstrumentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstrumentsServiceHandler struct{}

func (UnimplementedInstrumentsServiceHandler) TradingSchedules(context.Context, *connect_go.Request[__.TradingSchedulesRequest]) (*connect_go.Response[__.TradingSchedulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) BondBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.BondResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Bonds(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.BondsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetBondCoupons(context.Context, *connect_go.Request[__.GetBondCouponsRequest]) (*connect_go.Response[__.GetBondCouponsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBondCoupons is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) CurrencyBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.CurrencyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Currencies(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.CurrenciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) EtfBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.EtfResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Etfs(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.EtfsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) FutureBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.FutureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Futures(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.FuturesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) OptionBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.OptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.OptionBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Options(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.OptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Options is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) ShareBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.ShareResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) Shares(context.Context, *connect_go.Request[__.InstrumentsRequest]) (*connect_go.Response[__.SharesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetAccruedInterests(context.Context, *connect_go.Request[__.GetAccruedInterestsRequest]) (*connect_go.Response[__.GetAccruedInterestsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetFuturesMargin(context.Context, *connect_go.Request[__.GetFuturesMarginRequest]) (*connect_go.Response[__.GetFuturesMarginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetInstrumentBy(context.Context, *connect_go.Request[__.InstrumentRequest]) (*connect_go.Response[__.InstrumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetDividends(context.Context, *connect_go.Request[__.GetDividendsRequest]) (*connect_go.Response[__.GetDividendsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetAssetBy(context.Context, *connect_go.Request[__.AssetRequest]) (*connect_go.Response[__.AssetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssetBy is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetAssets(context.Context, *connect_go.Request[__.AssetsRequest]) (*connect_go.Response[__.AssetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssets is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetFavorites(context.Context, *connect_go.Request[__.GetFavoritesRequest]) (*connect_go.Response[__.GetFavoritesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFavorites is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) EditFavorites(context.Context, *connect_go.Request[__.EditFavoritesRequest]) (*connect_go.Response[__.EditFavoritesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.EditFavorites is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetCountries(context.Context, *connect_go.Request[__.GetCountriesRequest]) (*connect_go.Response[__.GetCountriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetCountries is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) FindInstrument(context.Context, *connect_go.Request[__.FindInstrumentRequest]) (*connect_go.Response[__.FindInstrumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.FindInstrument is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetBrands(context.Context, *connect_go.Request[__.GetBrandsRequest]) (*connect_go.Response[__.GetBrandsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBrands is not implemented"))
}

func (UnimplementedInstrumentsServiceHandler) GetBrandBy(context.Context, *connect_go.Request[__.GetBrandRequest]) (*connect_go.Response[__.Brand], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBrandBy is not implemented"))
}
