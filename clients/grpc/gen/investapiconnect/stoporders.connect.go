// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/stoporders.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StopOrdersServiceName is the fully-qualified name of the StopOrdersService service.
	StopOrdersServiceName = "tinkoff.public.invest.api.contract.v1.StopOrdersService"
)

// StopOrdersServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.StopOrdersService service.
type StopOrdersServiceClient interface {
	// Метод выставления стоп-заявки.
	PostStopOrder(context.Context, *connect_go.Request[__.PostStopOrderRequest]) (*connect_go.Response[__.PostStopOrderResponse], error)
	// Метод получения списка активных стоп заявок по счёту.
	GetStopOrders(context.Context, *connect_go.Request[__.GetStopOrdersRequest]) (*connect_go.Response[__.GetStopOrdersResponse], error)
	// Метод отмены стоп-заявки.
	CancelStopOrder(context.Context, *connect_go.Request[__.CancelStopOrderRequest]) (*connect_go.Response[__.CancelStopOrderResponse], error)
}

// NewStopOrdersServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.StopOrdersService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStopOrdersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StopOrdersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stopOrdersServiceClient{
		postStopOrder: connect_go.NewClient[__.PostStopOrderRequest, __.PostStopOrderResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.StopOrdersService/PostStopOrder",
			opts...,
		),
		getStopOrders: connect_go.NewClient[__.GetStopOrdersRequest, __.GetStopOrdersResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.StopOrdersService/GetStopOrders",
			opts...,
		),
		cancelStopOrder: connect_go.NewClient[__.CancelStopOrderRequest, __.CancelStopOrderResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.StopOrdersService/CancelStopOrder",
			opts...,
		),
	}
}

// stopOrdersServiceClient implements StopOrdersServiceClient.
type stopOrdersServiceClient struct {
	postStopOrder   *connect_go.Client[__.PostStopOrderRequest, __.PostStopOrderResponse]
	getStopOrders   *connect_go.Client[__.GetStopOrdersRequest, __.GetStopOrdersResponse]
	cancelStopOrder *connect_go.Client[__.CancelStopOrderRequest, __.CancelStopOrderResponse]
}

// PostStopOrder calls tinkoff.public.invest.api.contract.v1.StopOrdersService.PostStopOrder.
func (c *stopOrdersServiceClient) PostStopOrder(ctx context.Context, req *connect_go.Request[__.PostStopOrderRequest]) (*connect_go.Response[__.PostStopOrderResponse], error) {
	return c.postStopOrder.CallUnary(ctx, req)
}

// GetStopOrders calls tinkoff.public.invest.api.contract.v1.StopOrdersService.GetStopOrders.
func (c *stopOrdersServiceClient) GetStopOrders(ctx context.Context, req *connect_go.Request[__.GetStopOrdersRequest]) (*connect_go.Response[__.GetStopOrdersResponse], error) {
	return c.getStopOrders.CallUnary(ctx, req)
}

// CancelStopOrder calls tinkoff.public.invest.api.contract.v1.StopOrdersService.CancelStopOrder.
func (c *stopOrdersServiceClient) CancelStopOrder(ctx context.Context, req *connect_go.Request[__.CancelStopOrderRequest]) (*connect_go.Response[__.CancelStopOrderResponse], error) {
	return c.cancelStopOrder.CallUnary(ctx, req)
}

// StopOrdersServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.StopOrdersService service.
type StopOrdersServiceHandler interface {
	// Метод выставления стоп-заявки.
	PostStopOrder(context.Context, *connect_go.Request[__.PostStopOrderRequest]) (*connect_go.Response[__.PostStopOrderResponse], error)
	// Метод получения списка активных стоп заявок по счёту.
	GetStopOrders(context.Context, *connect_go.Request[__.GetStopOrdersRequest]) (*connect_go.Response[__.GetStopOrdersResponse], error)
	// Метод отмены стоп-заявки.
	CancelStopOrder(context.Context, *connect_go.Request[__.CancelStopOrderRequest]) (*connect_go.Response[__.CancelStopOrderResponse], error)
}

// NewStopOrdersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStopOrdersServiceHandler(svc StopOrdersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.StopOrdersService/PostStopOrder", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.StopOrdersService/PostStopOrder",
		svc.PostStopOrder,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.StopOrdersService/GetStopOrders", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.StopOrdersService/GetStopOrders",
		svc.GetStopOrders,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.StopOrdersService/CancelStopOrder", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.StopOrdersService/CancelStopOrder",
		svc.CancelStopOrder,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.StopOrdersService/", mux
}

// UnimplementedStopOrdersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStopOrdersServiceHandler struct{}

func (UnimplementedStopOrdersServiceHandler) PostStopOrder(context.Context, *connect_go.Request[__.PostStopOrderRequest]) (*connect_go.Response[__.PostStopOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.StopOrdersService.PostStopOrder is not implemented"))
}

func (UnimplementedStopOrdersServiceHandler) GetStopOrders(context.Context, *connect_go.Request[__.GetStopOrdersRequest]) (*connect_go.Response[__.GetStopOrdersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.StopOrdersService.GetStopOrders is not implemented"))
}

func (UnimplementedStopOrdersServiceHandler) CancelStopOrder(context.Context, *connect_go.Request[__.CancelStopOrderRequest]) (*connect_go.Response[__.CancelStopOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.StopOrdersService.CancelStopOrder is not implemented"))
}
