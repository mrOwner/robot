// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/marketdata.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MarketDataServiceName is the fully-qualified name of the MarketDataService service.
	MarketDataServiceName = "tinkoff.public.invest.api.contract.v1.MarketDataService"
	// MarketDataStreamServiceName is the fully-qualified name of the MarketDataStreamService service.
	MarketDataStreamServiceName = "tinkoff.public.invest.api.contract.v1.MarketDataStreamService"
)

// MarketDataServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.MarketDataService service.
type MarketDataServiceClient interface {
	// Метод запроса исторических свечей по инструменту.
	GetCandles(context.Context, *connect_go.Request[__.GetCandlesRequest]) (*connect_go.Response[__.GetCandlesResponse], error)
	// Метод запроса цен последних сделок по инструментам.
	GetLastPrices(context.Context, *connect_go.Request[__.GetLastPricesRequest]) (*connect_go.Response[__.GetLastPricesResponse], error)
	// Метод получения стакана по инструменту.
	GetOrderBook(context.Context, *connect_go.Request[__.GetOrderBookRequest]) (*connect_go.Response[__.GetOrderBookResponse], error)
	// Метод запроса статуса торгов по инструментам.
	GetTradingStatus(context.Context, *connect_go.Request[__.GetTradingStatusRequest]) (*connect_go.Response[__.GetTradingStatusResponse], error)
	// Метод запроса статуса торгов по инструментам.
	GetTradingStatuses(context.Context, *connect_go.Request[__.GetTradingStatusesRequest]) (*connect_go.Response[__.GetTradingStatusesResponse], error)
	// Метод запроса обезличенных сделок за последний час.
	GetLastTrades(context.Context, *connect_go.Request[__.GetLastTradesRequest]) (*connect_go.Response[__.GetLastTradesResponse], error)
	// Метод запроса цен закрытия торговой сессии по инструментам.
	GetClosePrices(context.Context, *connect_go.Request[__.GetClosePricesRequest]) (*connect_go.Response[__.GetClosePricesResponse], error)
}

// NewMarketDataServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.MarketDataService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMarketDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MarketDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &marketDataServiceClient{
		getCandles: connect_go.NewClient[__.GetCandlesRequest, __.GetCandlesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles",
			opts...,
		),
		getLastPrices: connect_go.NewClient[__.GetLastPricesRequest, __.GetLastPricesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices",
			opts...,
		),
		getOrderBook: connect_go.NewClient[__.GetOrderBookRequest, __.GetOrderBookResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook",
			opts...,
		),
		getTradingStatus: connect_go.NewClient[__.GetTradingStatusRequest, __.GetTradingStatusResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus",
			opts...,
		),
		getTradingStatuses: connect_go.NewClient[__.GetTradingStatusesRequest, __.GetTradingStatusesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses",
			opts...,
		),
		getLastTrades: connect_go.NewClient[__.GetLastTradesRequest, __.GetLastTradesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades",
			opts...,
		),
		getClosePrices: connect_go.NewClient[__.GetClosePricesRequest, __.GetClosePricesResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices",
			opts...,
		),
	}
}

// marketDataServiceClient implements MarketDataServiceClient.
type marketDataServiceClient struct {
	getCandles         *connect_go.Client[__.GetCandlesRequest, __.GetCandlesResponse]
	getLastPrices      *connect_go.Client[__.GetLastPricesRequest, __.GetLastPricesResponse]
	getOrderBook       *connect_go.Client[__.GetOrderBookRequest, __.GetOrderBookResponse]
	getTradingStatus   *connect_go.Client[__.GetTradingStatusRequest, __.GetTradingStatusResponse]
	getTradingStatuses *connect_go.Client[__.GetTradingStatusesRequest, __.GetTradingStatusesResponse]
	getLastTrades      *connect_go.Client[__.GetLastTradesRequest, __.GetLastTradesResponse]
	getClosePrices     *connect_go.Client[__.GetClosePricesRequest, __.GetClosePricesResponse]
}

// GetCandles calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles.
func (c *marketDataServiceClient) GetCandles(ctx context.Context, req *connect_go.Request[__.GetCandlesRequest]) (*connect_go.Response[__.GetCandlesResponse], error) {
	return c.getCandles.CallUnary(ctx, req)
}

// GetLastPrices calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices.
func (c *marketDataServiceClient) GetLastPrices(ctx context.Context, req *connect_go.Request[__.GetLastPricesRequest]) (*connect_go.Response[__.GetLastPricesResponse], error) {
	return c.getLastPrices.CallUnary(ctx, req)
}

// GetOrderBook calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook.
func (c *marketDataServiceClient) GetOrderBook(ctx context.Context, req *connect_go.Request[__.GetOrderBookRequest]) (*connect_go.Response[__.GetOrderBookResponse], error) {
	return c.getOrderBook.CallUnary(ctx, req)
}

// GetTradingStatus calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus.
func (c *marketDataServiceClient) GetTradingStatus(ctx context.Context, req *connect_go.Request[__.GetTradingStatusRequest]) (*connect_go.Response[__.GetTradingStatusResponse], error) {
	return c.getTradingStatus.CallUnary(ctx, req)
}

// GetTradingStatuses calls
// tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses.
func (c *marketDataServiceClient) GetTradingStatuses(ctx context.Context, req *connect_go.Request[__.GetTradingStatusesRequest]) (*connect_go.Response[__.GetTradingStatusesResponse], error) {
	return c.getTradingStatuses.CallUnary(ctx, req)
}

// GetLastTrades calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades.
func (c *marketDataServiceClient) GetLastTrades(ctx context.Context, req *connect_go.Request[__.GetLastTradesRequest]) (*connect_go.Response[__.GetLastTradesResponse], error) {
	return c.getLastTrades.CallUnary(ctx, req)
}

// GetClosePrices calls tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices.
func (c *marketDataServiceClient) GetClosePrices(ctx context.Context, req *connect_go.Request[__.GetClosePricesRequest]) (*connect_go.Response[__.GetClosePricesResponse], error) {
	return c.getClosePrices.CallUnary(ctx, req)
}

// MarketDataServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.MarketDataService service.
type MarketDataServiceHandler interface {
	// Метод запроса исторических свечей по инструменту.
	GetCandles(context.Context, *connect_go.Request[__.GetCandlesRequest]) (*connect_go.Response[__.GetCandlesResponse], error)
	// Метод запроса цен последних сделок по инструментам.
	GetLastPrices(context.Context, *connect_go.Request[__.GetLastPricesRequest]) (*connect_go.Response[__.GetLastPricesResponse], error)
	// Метод получения стакана по инструменту.
	GetOrderBook(context.Context, *connect_go.Request[__.GetOrderBookRequest]) (*connect_go.Response[__.GetOrderBookResponse], error)
	// Метод запроса статуса торгов по инструментам.
	GetTradingStatus(context.Context, *connect_go.Request[__.GetTradingStatusRequest]) (*connect_go.Response[__.GetTradingStatusResponse], error)
	// Метод запроса статуса торгов по инструментам.
	GetTradingStatuses(context.Context, *connect_go.Request[__.GetTradingStatusesRequest]) (*connect_go.Response[__.GetTradingStatusesResponse], error)
	// Метод запроса обезличенных сделок за последний час.
	GetLastTrades(context.Context, *connect_go.Request[__.GetLastTradesRequest]) (*connect_go.Response[__.GetLastTradesResponse], error)
	// Метод запроса цен закрытия торговой сессии по инструментам.
	GetClosePrices(context.Context, *connect_go.Request[__.GetClosePricesRequest]) (*connect_go.Response[__.GetClosePricesResponse], error)
}

// NewMarketDataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMarketDataServiceHandler(svc MarketDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles",
		svc.GetCandles,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices",
		svc.GetLastPrices,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook",
		svc.GetOrderBook,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus",
		svc.GetTradingStatus,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses",
		svc.GetTradingStatuses,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades",
		svc.GetLastTrades,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices",
		svc.GetClosePrices,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.MarketDataService/", mux
}

// UnimplementedMarketDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMarketDataServiceHandler struct{}

func (UnimplementedMarketDataServiceHandler) GetCandles(context.Context, *connect_go.Request[__.GetCandlesRequest]) (*connect_go.Response[__.GetCandlesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetLastPrices(context.Context, *connect_go.Request[__.GetLastPricesRequest]) (*connect_go.Response[__.GetLastPricesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetOrderBook(context.Context, *connect_go.Request[__.GetOrderBookRequest]) (*connect_go.Response[__.GetOrderBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetTradingStatus(context.Context, *connect_go.Request[__.GetTradingStatusRequest]) (*connect_go.Response[__.GetTradingStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetTradingStatuses(context.Context, *connect_go.Request[__.GetTradingStatusesRequest]) (*connect_go.Response[__.GetTradingStatusesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetLastTrades(context.Context, *connect_go.Request[__.GetLastTradesRequest]) (*connect_go.Response[__.GetLastTradesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades is not implemented"))
}

func (UnimplementedMarketDataServiceHandler) GetClosePrices(context.Context, *connect_go.Request[__.GetClosePricesRequest]) (*connect_go.Response[__.GetClosePricesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices is not implemented"))
}

// MarketDataStreamServiceClient is a client for the
// tinkoff.public.invest.api.contract.v1.MarketDataStreamService service.
type MarketDataStreamServiceClient interface {
	// Bi-directional стрим предоставления биржевой информации.
	MarketDataStream(context.Context) *connect_go.BidiStreamForClient[__.MarketDataRequest, __.MarketDataResponse]
	// Server-side стрим предоставления биржевой информации.
	MarketDataServerSideStream(context.Context, *connect_go.Request[__.MarketDataServerSideStreamRequest]) (*connect_go.ServerStreamForClient[__.MarketDataResponse], error)
}

// NewMarketDataStreamServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.MarketDataStreamService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMarketDataStreamServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MarketDataStreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &marketDataStreamServiceClient{
		marketDataStream: connect_go.NewClient[__.MarketDataRequest, __.MarketDataResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream",
			opts...,
		),
		marketDataServerSideStream: connect_go.NewClient[__.MarketDataServerSideStreamRequest, __.MarketDataResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream",
			opts...,
		),
	}
}

// marketDataStreamServiceClient implements MarketDataStreamServiceClient.
type marketDataStreamServiceClient struct {
	marketDataStream           *connect_go.Client[__.MarketDataRequest, __.MarketDataResponse]
	marketDataServerSideStream *connect_go.Client[__.MarketDataServerSideStreamRequest, __.MarketDataResponse]
}

// MarketDataStream calls
// tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream.
func (c *marketDataStreamServiceClient) MarketDataStream(ctx context.Context) *connect_go.BidiStreamForClient[__.MarketDataRequest, __.MarketDataResponse] {
	return c.marketDataStream.CallBidiStream(ctx)
}

// MarketDataServerSideStream calls
// tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream.
func (c *marketDataStreamServiceClient) MarketDataServerSideStream(ctx context.Context, req *connect_go.Request[__.MarketDataServerSideStreamRequest]) (*connect_go.ServerStreamForClient[__.MarketDataResponse], error) {
	return c.marketDataServerSideStream.CallServerStream(ctx, req)
}

// MarketDataStreamServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.MarketDataStreamService service.
type MarketDataStreamServiceHandler interface {
	// Bi-directional стрим предоставления биржевой информации.
	MarketDataStream(context.Context, *connect_go.BidiStream[__.MarketDataRequest, __.MarketDataResponse]) error
	// Server-side стрим предоставления биржевой информации.
	MarketDataServerSideStream(context.Context, *connect_go.Request[__.MarketDataServerSideStreamRequest], *connect_go.ServerStream[__.MarketDataResponse]) error
}

// NewMarketDataStreamServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMarketDataStreamServiceHandler(svc MarketDataStreamServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream", connect_go.NewBidiStreamHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream",
		svc.MarketDataStream,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream", connect_go.NewServerStreamHandler(
		"/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream",
		svc.MarketDataServerSideStream,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/", mux
}

// UnimplementedMarketDataStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMarketDataStreamServiceHandler struct{}

func (UnimplementedMarketDataStreamServiceHandler) MarketDataStream(context.Context, *connect_go.BidiStream[__.MarketDataRequest, __.MarketDataResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream is not implemented"))
}

func (UnimplementedMarketDataStreamServiceHandler) MarketDataServerSideStream(context.Context, *connect_go.Request[__.MarketDataServerSideStreamRequest], *connect_go.ServerStream[__.MarketDataResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream is not implemented"))
}
