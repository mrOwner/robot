// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clients/grpc/proto/sandbox.proto

package investapiconnect

import (
	__ "./"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SandboxServiceName is the fully-qualified name of the SandboxService service.
	SandboxServiceName = "tinkoff.public.invest.api.contract.v1.SandboxService"
)

// SandboxServiceClient is a client for the tinkoff.public.invest.api.contract.v1.SandboxService
// service.
type SandboxServiceClient interface {
	// Метод регистрации счёта в песочнице.
	OpenSandboxAccount(context.Context, *connect_go.Request[__.OpenSandboxAccountRequest]) (*connect_go.Response[__.OpenSandboxAccountResponse], error)
	// Метод получения счетов в песочнице.
	GetSandboxAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error)
	// Метод закрытия счёта в песочнице.
	CloseSandboxAccount(context.Context, *connect_go.Request[__.CloseSandboxAccountRequest]) (*connect_go.Response[__.CloseSandboxAccountResponse], error)
	// Метод выставления торгового поручения в песочнице.
	PostSandboxOrder(context.Context, *connect_go.Request[__.PostOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error)
	// Метод изменения выставленной заявки.
	ReplaceSandboxOrder(context.Context, *connect_go.Request[__.ReplaceOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error)
	// Метод получения списка активных заявок по счёту в песочнице.
	GetSandboxOrders(context.Context, *connect_go.Request[__.GetOrdersRequest]) (*connect_go.Response[__.GetOrdersResponse], error)
	// Метод отмены торгового поручения в песочнице.
	CancelSandboxOrder(context.Context, *connect_go.Request[__.CancelOrderRequest]) (*connect_go.Response[__.CancelOrderResponse], error)
	// Метод получения статуса заявки в песочнице.
	GetSandboxOrderState(context.Context, *connect_go.Request[__.GetOrderStateRequest]) (*connect_go.Response[__.OrderState], error)
	// Метод получения позиций по виртуальному счёту песочницы.
	GetSandboxPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error)
	// Метод получения операций в песочнице по номеру счёта.
	GetSandboxOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error)
	// Метод получения операций в песочнице по номеру счета с пагинацией.
	GetSandboxOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error)
	// Метод получения портфолио в песочнице.
	GetSandboxPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error)
	// Метод пополнения счёта в песочнице.
	SandboxPayIn(context.Context, *connect_go.Request[__.SandboxPayInRequest]) (*connect_go.Response[__.SandboxPayInResponse], error)
	// Метод получения доступного остатка для вывода средств в песочнице.
	GetSandboxWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error)
}

// NewSandboxServiceClient constructs a client for the
// tinkoff.public.invest.api.contract.v1.SandboxService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSandboxServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SandboxServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sandboxServiceClient{
		openSandboxAccount: connect_go.NewClient[__.OpenSandboxAccountRequest, __.OpenSandboxAccountResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount",
			opts...,
		),
		getSandboxAccounts: connect_go.NewClient[__.GetAccountsRequest, __.GetAccountsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts",
			opts...,
		),
		closeSandboxAccount: connect_go.NewClient[__.CloseSandboxAccountRequest, __.CloseSandboxAccountResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount",
			opts...,
		),
		postSandboxOrder: connect_go.NewClient[__.PostOrderRequest, __.PostOrderResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder",
			opts...,
		),
		replaceSandboxOrder: connect_go.NewClient[__.ReplaceOrderRequest, __.PostOrderResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder",
			opts...,
		),
		getSandboxOrders: connect_go.NewClient[__.GetOrdersRequest, __.GetOrdersResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders",
			opts...,
		),
		cancelSandboxOrder: connect_go.NewClient[__.CancelOrderRequest, __.CancelOrderResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder",
			opts...,
		),
		getSandboxOrderState: connect_go.NewClient[__.GetOrderStateRequest, __.OrderState](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState",
			opts...,
		),
		getSandboxPositions: connect_go.NewClient[__.PositionsRequest, __.PositionsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions",
			opts...,
		),
		getSandboxOperations: connect_go.NewClient[__.OperationsRequest, __.OperationsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations",
			opts...,
		),
		getSandboxOperationsByCursor: connect_go.NewClient[__.GetOperationsByCursorRequest, __.GetOperationsByCursorResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor",
			opts...,
		),
		getSandboxPortfolio: connect_go.NewClient[__.PortfolioRequest, __.PortfolioResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio",
			opts...,
		),
		sandboxPayIn: connect_go.NewClient[__.SandboxPayInRequest, __.SandboxPayInResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn",
			opts...,
		),
		getSandboxWithdrawLimits: connect_go.NewClient[__.WithdrawLimitsRequest, __.WithdrawLimitsResponse](
			httpClient,
			baseURL+"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits",
			opts...,
		),
	}
}

// sandboxServiceClient implements SandboxServiceClient.
type sandboxServiceClient struct {
	openSandboxAccount           *connect_go.Client[__.OpenSandboxAccountRequest, __.OpenSandboxAccountResponse]
	getSandboxAccounts           *connect_go.Client[__.GetAccountsRequest, __.GetAccountsResponse]
	closeSandboxAccount          *connect_go.Client[__.CloseSandboxAccountRequest, __.CloseSandboxAccountResponse]
	postSandboxOrder             *connect_go.Client[__.PostOrderRequest, __.PostOrderResponse]
	replaceSandboxOrder          *connect_go.Client[__.ReplaceOrderRequest, __.PostOrderResponse]
	getSandboxOrders             *connect_go.Client[__.GetOrdersRequest, __.GetOrdersResponse]
	cancelSandboxOrder           *connect_go.Client[__.CancelOrderRequest, __.CancelOrderResponse]
	getSandboxOrderState         *connect_go.Client[__.GetOrderStateRequest, __.OrderState]
	getSandboxPositions          *connect_go.Client[__.PositionsRequest, __.PositionsResponse]
	getSandboxOperations         *connect_go.Client[__.OperationsRequest, __.OperationsResponse]
	getSandboxOperationsByCursor *connect_go.Client[__.GetOperationsByCursorRequest, __.GetOperationsByCursorResponse]
	getSandboxPortfolio          *connect_go.Client[__.PortfolioRequest, __.PortfolioResponse]
	sandboxPayIn                 *connect_go.Client[__.SandboxPayInRequest, __.SandboxPayInResponse]
	getSandboxWithdrawLimits     *connect_go.Client[__.WithdrawLimitsRequest, __.WithdrawLimitsResponse]
}

// OpenSandboxAccount calls tinkoff.public.invest.api.contract.v1.SandboxService.OpenSandboxAccount.
func (c *sandboxServiceClient) OpenSandboxAccount(ctx context.Context, req *connect_go.Request[__.OpenSandboxAccountRequest]) (*connect_go.Response[__.OpenSandboxAccountResponse], error) {
	return c.openSandboxAccount.CallUnary(ctx, req)
}

// GetSandboxAccounts calls tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxAccounts.
func (c *sandboxServiceClient) GetSandboxAccounts(ctx context.Context, req *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error) {
	return c.getSandboxAccounts.CallUnary(ctx, req)
}

// CloseSandboxAccount calls
// tinkoff.public.invest.api.contract.v1.SandboxService.CloseSandboxAccount.
func (c *sandboxServiceClient) CloseSandboxAccount(ctx context.Context, req *connect_go.Request[__.CloseSandboxAccountRequest]) (*connect_go.Response[__.CloseSandboxAccountResponse], error) {
	return c.closeSandboxAccount.CallUnary(ctx, req)
}

// PostSandboxOrder calls tinkoff.public.invest.api.contract.v1.SandboxService.PostSandboxOrder.
func (c *sandboxServiceClient) PostSandboxOrder(ctx context.Context, req *connect_go.Request[__.PostOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error) {
	return c.postSandboxOrder.CallUnary(ctx, req)
}

// ReplaceSandboxOrder calls
// tinkoff.public.invest.api.contract.v1.SandboxService.ReplaceSandboxOrder.
func (c *sandboxServiceClient) ReplaceSandboxOrder(ctx context.Context, req *connect_go.Request[__.ReplaceOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error) {
	return c.replaceSandboxOrder.CallUnary(ctx, req)
}

// GetSandboxOrders calls tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOrders.
func (c *sandboxServiceClient) GetSandboxOrders(ctx context.Context, req *connect_go.Request[__.GetOrdersRequest]) (*connect_go.Response[__.GetOrdersResponse], error) {
	return c.getSandboxOrders.CallUnary(ctx, req)
}

// CancelSandboxOrder calls tinkoff.public.invest.api.contract.v1.SandboxService.CancelSandboxOrder.
func (c *sandboxServiceClient) CancelSandboxOrder(ctx context.Context, req *connect_go.Request[__.CancelOrderRequest]) (*connect_go.Response[__.CancelOrderResponse], error) {
	return c.cancelSandboxOrder.CallUnary(ctx, req)
}

// GetSandboxOrderState calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOrderState.
func (c *sandboxServiceClient) GetSandboxOrderState(ctx context.Context, req *connect_go.Request[__.GetOrderStateRequest]) (*connect_go.Response[__.OrderState], error) {
	return c.getSandboxOrderState.CallUnary(ctx, req)
}

// GetSandboxPositions calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxPositions.
func (c *sandboxServiceClient) GetSandboxPositions(ctx context.Context, req *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error) {
	return c.getSandboxPositions.CallUnary(ctx, req)
}

// GetSandboxOperations calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOperations.
func (c *sandboxServiceClient) GetSandboxOperations(ctx context.Context, req *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error) {
	return c.getSandboxOperations.CallUnary(ctx, req)
}

// GetSandboxOperationsByCursor calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOperationsByCursor.
func (c *sandboxServiceClient) GetSandboxOperationsByCursor(ctx context.Context, req *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error) {
	return c.getSandboxOperationsByCursor.CallUnary(ctx, req)
}

// GetSandboxPortfolio calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxPortfolio.
func (c *sandboxServiceClient) GetSandboxPortfolio(ctx context.Context, req *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error) {
	return c.getSandboxPortfolio.CallUnary(ctx, req)
}

// SandboxPayIn calls tinkoff.public.invest.api.contract.v1.SandboxService.SandboxPayIn.
func (c *sandboxServiceClient) SandboxPayIn(ctx context.Context, req *connect_go.Request[__.SandboxPayInRequest]) (*connect_go.Response[__.SandboxPayInResponse], error) {
	return c.sandboxPayIn.CallUnary(ctx, req)
}

// GetSandboxWithdrawLimits calls
// tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxWithdrawLimits.
func (c *sandboxServiceClient) GetSandboxWithdrawLimits(ctx context.Context, req *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error) {
	return c.getSandboxWithdrawLimits.CallUnary(ctx, req)
}

// SandboxServiceHandler is an implementation of the
// tinkoff.public.invest.api.contract.v1.SandboxService service.
type SandboxServiceHandler interface {
	// Метод регистрации счёта в песочнице.
	OpenSandboxAccount(context.Context, *connect_go.Request[__.OpenSandboxAccountRequest]) (*connect_go.Response[__.OpenSandboxAccountResponse], error)
	// Метод получения счетов в песочнице.
	GetSandboxAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error)
	// Метод закрытия счёта в песочнице.
	CloseSandboxAccount(context.Context, *connect_go.Request[__.CloseSandboxAccountRequest]) (*connect_go.Response[__.CloseSandboxAccountResponse], error)
	// Метод выставления торгового поручения в песочнице.
	PostSandboxOrder(context.Context, *connect_go.Request[__.PostOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error)
	// Метод изменения выставленной заявки.
	ReplaceSandboxOrder(context.Context, *connect_go.Request[__.ReplaceOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error)
	// Метод получения списка активных заявок по счёту в песочнице.
	GetSandboxOrders(context.Context, *connect_go.Request[__.GetOrdersRequest]) (*connect_go.Response[__.GetOrdersResponse], error)
	// Метод отмены торгового поручения в песочнице.
	CancelSandboxOrder(context.Context, *connect_go.Request[__.CancelOrderRequest]) (*connect_go.Response[__.CancelOrderResponse], error)
	// Метод получения статуса заявки в песочнице.
	GetSandboxOrderState(context.Context, *connect_go.Request[__.GetOrderStateRequest]) (*connect_go.Response[__.OrderState], error)
	// Метод получения позиций по виртуальному счёту песочницы.
	GetSandboxPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error)
	// Метод получения операций в песочнице по номеру счёта.
	GetSandboxOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error)
	// Метод получения операций в песочнице по номеру счета с пагинацией.
	GetSandboxOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error)
	// Метод получения портфолио в песочнице.
	GetSandboxPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error)
	// Метод пополнения счёта в песочнице.
	SandboxPayIn(context.Context, *connect_go.Request[__.SandboxPayInRequest]) (*connect_go.Response[__.SandboxPayInResponse], error)
	// Метод получения доступного остатка для вывода средств в песочнице.
	GetSandboxWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error)
}

// NewSandboxServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSandboxServiceHandler(svc SandboxServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount",
		svc.OpenSandboxAccount,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts",
		svc.GetSandboxAccounts,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount",
		svc.CloseSandboxAccount,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder",
		svc.PostSandboxOrder,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder",
		svc.ReplaceSandboxOrder,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders",
		svc.GetSandboxOrders,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder",
		svc.CancelSandboxOrder,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState",
		svc.GetSandboxOrderState,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions",
		svc.GetSandboxPositions,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations",
		svc.GetSandboxOperations,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor",
		svc.GetSandboxOperationsByCursor,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio",
		svc.GetSandboxPortfolio,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn",
		svc.SandboxPayIn,
		opts...,
	))
	mux.Handle("/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits", connect_go.NewUnaryHandler(
		"/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits",
		svc.GetSandboxWithdrawLimits,
		opts...,
	))
	return "/tinkoff.public.invest.api.contract.v1.SandboxService/", mux
}

// UnimplementedSandboxServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSandboxServiceHandler struct{}

func (UnimplementedSandboxServiceHandler) OpenSandboxAccount(context.Context, *connect_go.Request[__.OpenSandboxAccountRequest]) (*connect_go.Response[__.OpenSandboxAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.OpenSandboxAccount is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxAccounts(context.Context, *connect_go.Request[__.GetAccountsRequest]) (*connect_go.Response[__.GetAccountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxAccounts is not implemented"))
}

func (UnimplementedSandboxServiceHandler) CloseSandboxAccount(context.Context, *connect_go.Request[__.CloseSandboxAccountRequest]) (*connect_go.Response[__.CloseSandboxAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.CloseSandboxAccount is not implemented"))
}

func (UnimplementedSandboxServiceHandler) PostSandboxOrder(context.Context, *connect_go.Request[__.PostOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.PostSandboxOrder is not implemented"))
}

func (UnimplementedSandboxServiceHandler) ReplaceSandboxOrder(context.Context, *connect_go.Request[__.ReplaceOrderRequest]) (*connect_go.Response[__.PostOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.ReplaceSandboxOrder is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxOrders(context.Context, *connect_go.Request[__.GetOrdersRequest]) (*connect_go.Response[__.GetOrdersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOrders is not implemented"))
}

func (UnimplementedSandboxServiceHandler) CancelSandboxOrder(context.Context, *connect_go.Request[__.CancelOrderRequest]) (*connect_go.Response[__.CancelOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.CancelSandboxOrder is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxOrderState(context.Context, *connect_go.Request[__.GetOrderStateRequest]) (*connect_go.Response[__.OrderState], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOrderState is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxPositions(context.Context, *connect_go.Request[__.PositionsRequest]) (*connect_go.Response[__.PositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxPositions is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxOperations(context.Context, *connect_go.Request[__.OperationsRequest]) (*connect_go.Response[__.OperationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOperations is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxOperationsByCursor(context.Context, *connect_go.Request[__.GetOperationsByCursorRequest]) (*connect_go.Response[__.GetOperationsByCursorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxOperationsByCursor is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxPortfolio(context.Context, *connect_go.Request[__.PortfolioRequest]) (*connect_go.Response[__.PortfolioResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxPortfolio is not implemented"))
}

func (UnimplementedSandboxServiceHandler) SandboxPayIn(context.Context, *connect_go.Request[__.SandboxPayInRequest]) (*connect_go.Response[__.SandboxPayInResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.SandboxPayIn is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandboxWithdrawLimits(context.Context, *connect_go.Request[__.WithdrawLimitsRequest]) (*connect_go.Response[__.WithdrawLimitsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tinkoff.public.invest.api.contract.v1.SandboxService.GetSandboxWithdrawLimits is not implemented"))
}
