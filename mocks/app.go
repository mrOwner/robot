// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrOwner/robot/internal/app (interfaces: LifeCycle)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLifeCycle is a mock of LifeCycle interface.
type MockLifeCycle struct {
	ctrl     *gomock.Controller
	recorder *MockLifeCycleMockRecorder
}

// MockLifeCycleMockRecorder is the mock recorder for MockLifeCycle.
type MockLifeCycleMockRecorder struct {
	mock *MockLifeCycle
}

// NewMockLifeCycle creates a new mock instance.
func NewMockLifeCycle(ctrl *gomock.Controller) *MockLifeCycle {
	mock := &MockLifeCycle{ctrl: ctrl}
	mock.recorder = &MockLifeCycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLifeCycle) EXPECT() *MockLifeCycleMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockLifeCycle) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLifeCycleMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLifeCycle)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockLifeCycle) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockLifeCycleMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLifeCycle)(nil).Stop), arg0)
}
